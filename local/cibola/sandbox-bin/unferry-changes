#! /bin/bash -e
. ~/bin/bash_funcs

tarfile=$1
[[ $tarfile ]] || die "must supply tarfile name/pattern"
opts=":$2:"

# make sure we have creds before we get too far in
$CEROOT/devtools/aws-credentials-check


# check for `git am` failure
function git-am-failed
{
	git status | grep -E 'in the middle of an am session|git-am is in progress'
}


# current repo check
CE='campus-explorer'
read owner repo <<<$(git config --get remote.origin.url | perl -lne 'm|^.*?:(.*?)/(.*)\.git$| and print "$1 $2"')
[[ $owner && $repo ]] || die "this does not appear to be a valid repo directory"
[[ $owner == $CE ]]   || die "this repo is not owned by $CE"


ferrydir=/var/tmp/ferry
mkdir -p $ferrydir

[[ $tarfile == "s3://"* ]] || tarfile=$(ferry-ls -l "$tarfile")
[[ $tarfile ]] || die "ferry file /$1/ doesn't exist"
[[ $(echo "$tarfile" | wc -l) == 1 ]] || die "too many candidates! [$tarfile]"

patchdir=tmp/patches
if [[ -e $patchdir ]]
then
	die "$patchdir already exists; left over from prior run?"
fi

aws s3 cp $tarfile $ferrydir
tarfile=$ferrydir/$(basename $tarfile)
trap "/bin/rm -f $tarfile" EXIT

if [[ $(vc info %is_dirty) == 1 ]]
then
	tmpfile=$(mktemp)
	trap "/bin/rm -f $tarfile $tmpfile" EXIT
	vc clean -y | tee $tmpfile
	dirty_restore=$(perl -lne '/^Dropped.*\((\w+)\)/ and print $1' $tmpfile)
	color_msg_block $CYAN "dirty_restore: $dirty_restore"
fi

old_head=$(git rev-parse HEAD)
color_msg_block $CYAN "old_head: $old_head"
first_unpushed=$(vc info %local_commits | tail -n1)
if [[ $first_unpushed ]]
then
	branched_from=$(git rev-parse $first_unpushed^)
fi

# if we have local commits, back up prior to them
# (effectively expunging them)
if [[ $branched_from ]]
then
	git reset --hard $branched_from
fi

# regardless of anything else, make sure we're updated with respect to our mainline
vc clean -y ||:
cur_branch=$(vc info %cur_branch)
if [[ $cur_branch == feature/* ]]
then
	if ! vc branch-update
	then
		echo -n "possible merge conflict; resolve and resume [ENTER to continue ...] "
		read
	fi
elif [[ $cur_branch == $(vc info %Mainline) ]]
then
	vc sync
fi

# restore dirty files and local commits (in the form of patches)
tar xvpzf $tarfile
# OTOH, those dirty files can get in our way and bork our `git am`
STASH_MESSAGE="changes for unferry-changes"
git stash save -u "$STASH_MESSAGE"

# if we have local commits to restore, do so
if [[ -d $patchdir ]]
then
	if ! git am --3way $patchdir/*
	then
		color_msg_block $RED	'Your `git am` failed.  Your repo is currently fairly borked.'					\
								"You can poke around and see if you can fix it,"								\
								"or just reset according the instructions below."
	else
		[[ $opts == *":keep:"* ]] || /bin/rm -rf $patchdir
	fi
fi

if [[ ! $(git-am-failed) ]]
then
	# safe stash pop
	# (don't let a merge conflict from the unstash blow us up)
	[[ $(git stash list | grep "$STASH_MESSAGE") ]] && git stash pop ||:
	echo -e "\n\n\n"
fi
echo "to restore your repo to its pre-unferry state, do this:" >&2
cmds=()
[[ $(git-am-failed) ]] && cmds+=("git am --abort")
[[ -d $patchdir     ]] && cmds+=("/bin/rm -rf $patchdir")
cmds+=("vc clean -y")
cmds+=("git reset --hard $old_head")
[[ $dirty_restore ]] && cmds+=("git stash apply $dirty_restore")
[[ -d $patchdir ]] && cmds+=("rm -rf $patchdir")
color_msg_block $BOLD "${cmds[@]}"

# exit cleanly iff `git am` succeeded
[[ $(git-am-failed) ]] && exit 1
exit 0
