#! /usr/bin/env perl

use 5.14.0;
use autodie ':all';
use warnings FATAL => 'all';

use Const::Fast;
use Text::Balanced qw<:ALL>;
use Text::Tabs; $tabstop = 4;


my $pre_re = qr/^\.$/;
my $commit_sha_re = qr/\[([0-9a-f]{10})\]/;
const my $REPO_URL => 'https://github.com/campus-explorer/CE/commit';

my $in_pre = 0;					# 0 == not in pre, 1 == indented pre block, 2 == explicit pre block
my $in_list = 0;
while (<>)
{
	$_ = expand($_);

	if (( /$pre_re/ or /^\s+(.)/ and !($1 ~~ ['*','#']) ) and not $in_pre and not $in_list)
	{
		if ( /$pre_re/ )
		{
			$_ = "{{{\n";
			$in_pre = 2;
		}
		else
		{
			say '{{{';
			s/^    //;
			$in_pre = 1;
		}
	}
	elsif ($in_pre == 1 and /^$/ or $in_pre == 2 and /$pre_re/ )
	{
		$in_pre == 1 ? say '}}}' : ($_ = "}}}\n");
		$in_pre = 0;
	}
	elsif ($in_list and /^$/)
	{
		$in_list = 0;
	}
	elsif ($in_pre == 1)
	{
		s/^    //;
	}
	elsif (not $in_pre)
	{
		# as ever, stolen shamelessly from Filter::Simple by The Damian
		# in this case, we're not avoiding normal quotes, but backquotes
		# because those indicate preformatted text that's safe from Trac's interference anyway
		my @quoted_strings;
		$_ = join('', map { ref $_ ? scalar((push @quoted_strings, $_), "{Q$#quoted_strings}") : $_ }
			extract_multiple($_,
			[
				{ BQ => sub { extract_delimited($_[0], q{`}, '', q{`}) } },
				qr/[^`]+/,
			])
		);

		s/^  (\s*\*\s+)/$1/ and $in_list = 1;							# bullet lists
		s/^  (\s*)#(\s+)/${1}1.$2/ and $in_list = 1;					# numbered lists
		s/^  // if $in_list and not /^\s+[*#\d]/;						# continuation of bullet items

		s{$commit_sha_re}{[$REPO_URL/$1 $1]}g;							# link to GitHub via commit SHA1

		s/\*\b(.+?)\*(?=\W)/**$1**/g;									# bold
		s{(^|\W)_(.+?)_(\W|$)}{$1//$2//$3}g;							# italics
		s/\[(.*?)\|(.*?)\]/[$1 $2]/g;									# links
		s/(#\d\d?)(?!\d)/!$1/g;											# numbered things that aren't tickets
		s/(?<!-)--(?!-)/—/g;											# em dashes
		s/ - / – /g;													# en dashes

		s{\b([A-Z][a-z/]+[A-Z][a-z/]+\w*)\b}{!$1}g;						# stop auto-linking to Wiki pages for camel case

		# put any quoted strings back
		s/{Q(\d+)}/${$quoted_strings[$1]}/g;
	}

	print;
}
