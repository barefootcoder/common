# THIS IS SHARED ACROSS ALL MACHINES

# personal overrides for VC commands
<git>
	<commands>
		stage <<---
			git add -p %files
		---
		unbranch <<---
			%cur_branch ne %Mainline	->	echo %cur_branch >%last_branch_file
			git checkout %Mainline
		---
		resolved <<---
			git rerere
			# one of these will always fail, so ignore the final exit code
			git status | grep 'interactive rebase' >/dev/null && git add %files        ||:
			git status | grep 'interactive rebase' >/dev/null || git reset HEAD %files ||:
		---
	</commands>
</git>
# these really should be in the <git> block above
# but they don't work there, for some reason
	<CustomInfo last_branch_file>
		action <<---
			{ glob("~/.vctools/last_branch." . %project) }
		---
	</CustomInfo>
	<CustomCommand stat-plus>
		action <<---
			git-helper-stat
		---
	</CustomCommand>
	<CustomCommand rebranch>
		action <<---
			not -e %last_branch_file	->	! Don't know what last active branch was.
			git checkout `cat %last_branch_file`
		---
	</CustomCommand>


# personal overrides that need to call the underlying thing overridden
# and therefore require renaming
# (man, I really need to rethink this whole structure ...)

<CustomCommand my-sync>
	Description = update working copy from server, preserving times of modified files (if any)
	Verify = project

	action <<---
		git-savetimes --save    --auto -u vc-sync
		= sync
		git-savetimes --restore --auto    vc-sync
	---
</CustomCommand>

<CustomCommand my-push>
	Description = update working copy from server, preserving times of modified files (if any)
	Verify = project

	action <<---
		git-savetimes --save    --auto -u vc-push
		= push
		git-savetimes --restore --auto    vc-push
	---
</CustomCommand>


<CustomInfo local_commits>
	Type = ArrayRef
	action <<---
		git-helper-local-commits
	---
</CustomInfo>

<CustomInfo num_local_commits>
	Type = Str
	action <<---
		{ scalar %local_commits }
	---
</CustomInfo>


<CustomCommand merge>
	Verify = project
	Files = 0

	action <<---
		%cur_branch !~ m{^feature/} -> ! Will only merge trunk into a feature branch.
		= safe-stash-push vc-merge
		git fetch origin
		git merge origin/%Mainline
		= safe-stash-pop vc-merge
	---
</CustomCommand>


<CustomCommand chktabs>
	Description = Verify there are no tabs in modified files
	Verify = project

	action <<---
		POLICY=$self->config->policy || '0'
		"$POLICY" eq "CE" ->	CHECKTABS=`checktabs -n`
		"$POLICY" eq "CE" ->	"$CHECKTABS" -> > $CHECKTABS
		"$POLICY" eq "CE" ->	"$CHECKTABS" -> ! "fix checktabs problems before continuing"
	---
</CustomCommand>

<CustomCommand find-unmerged-commits>
	Description = After "not fully merged" message, see what Git thinks is not fully merged
	Verify = project
	Argument = branch_name      <unique string which appears in (pre-existing) branch name>

	action <<---
		PATTERN='*' . %branch_name . '*'
		NUM_PROSPECTS=`git branch --no-color --list "$PATTERN" | wc -l`
		# this is just to make our error message look nicer
		{ chomp $ENV{'NUM_PROSPECTS'} }
		$NUM_PROSPECTS == 0 -> ! Can't find branch matching $PATTERN.
		$NUM_PROSPECTS  > 1 -> ! Too many prospects matching $PATTERN (found $NUM_PROSPECTS).

		COMPARE_BRANCH=`git branch --no-color --list "$PATTERN"`
		git log --graph --left-right --cherry-pick --oneline %Mainline..$COMPARE_BRANCH
	---
</CustomCommand>

<CustomCommand safe-stash-push>
	Description = Create a stash that can later identified with a string
	Verify = project
	Argument = id_string							<identifier for stash>

	action <<---
		STASH_MESSAGE="changes for " . %id_string
		git-savetimes --save --auto -u %id_string
		git stash       save        -u "$STASH_MESSAGE"
	---
</CustomCommand>

<CustomCommand safe-stash-pop>
	Description = Unstash a stash identified by a string iff it exists
	Verify = project
	Argument = id_string							<identifier for stash>

	action <<---
		STASH_MESSAGE="changes for " . %id_string
		# use the super-safe stash drop developed for `split-amend`
		STASH=(map { /^(.*?): .*?: (.*)$/ && $2 eq "$STASH_MESSAGE" ? $1 : () } `git stash list`)[0] || ''
		'$STASH'	->	git stash pop $STASH ||:
		'$STASH'	->	git-savetimes --restore --auto stg-amend
	---
</CustomCommand>

<CustomCommand stg-amend>
	Description = Amend a previous commit
	Verify = project
	Argument = how_far_back							<integer (number of commits to go back to) or SHA1>

	action <<---
		# verify state and set up proper value for $TARGET
		= chktabs
		length(%how_far_back) >= 7	->	TARGET=%how_far_back
		length(%how_far_back) < 7	->	%how_far_back == 1 -> ! Won't do most recent commit; use `%me commit -F` instead.
		length(%how_far_back) < 7	->	TARGET="HEAD" . '^' x (%how_far_back - 1)
		`git branch -r --contains $TARGET` -> ! Cannot amend; commit has already been published.
		!%is_dirty -> > *~You have no changes to apply.~*
		!%is_dirty -> ? Are you sure you want to amend anyway?

		# first, save all mods
		= safe-stash-push stg-amend

		# now fire up a rebase, then, *if* the user chooses to edit a commit,
		# re-apply the mods and let the user stage some of them
		git rebase -i $TARGET^
		COMMIT_EDIT=`git status` =~ /rebase in progress/ ? 1 : 0
		$COMMIT_EDIT	->		git stash apply	|| :
		$COMMIT_EDIT	->		= unstage
		$COMMIT_EDIT	->		git add -i

		# now adjust the commit (again, *if* the user chose to edit a commit)
		$COMMIT_EDIT	->		git commit -v --amend

		# now we really need to clear out all the leftover mods before proceeding
		# the easiest (and safest) way to do that is to just stash again, then drop the stash
		$COMMIT_EDIT	->		STASH_MESSAGE_INNER="throwing away unused changes"
		$COMMIT_EDIT	->		git stash save -u "$STASH_MESSAGE_INNER"
		# note safe stash drop
		$COMMIT_EDIT	->		git stash list | grep -q "$STASH_MESSAGE_INNER" && git stash drop ||:

		# now put back all the intervening commits, then restore any remaining mods
		$COMMIT_EDIT	->		git rebase --continue
		= safe-stash-pop stg-amend
	---
</CustomCommand>

<CustomCommand amend-local>
	Description = Amend one commit from among all local commits
	Verify = project

	action <<---
		= chktabs
		> *-%num_local_commits local commits-*
		= stg-amend %num_local_commits
	---
</CustomCommand>

<CustomCommand split-amend>
	Description = Amend a previous commit by splitting it into multiple commits
	Verify = project
	Argument = to_split								<SHA1 of commit to be split>

	action <<---
		# verify state and that $TARGET is a valid candidate
		= chktabs
		TARGET=%to_split
		not `git branch --contains $TARGET`			->	! Commit does not appear to exist.
		`git branch -r --contains $TARGET`			->	! Cannot split; commit has already been published.

		# first, save all mods
		= safe-stash-push split-amend

		# now fire up a rebase, force-edit the first commit, then drop to a shell
		GIT_SEQUENCE_EDITOR=q{perl -i -pe 's/^pick/edit/ if $. == 1'}
		git rebase -i %to_split^
		`git status` !~ /rebase in progress/		->	! Something went badly wrong when trying to edit the commit.
		git reset HEAD^
		> *-You are now in the midst of the mods for the commit you want to split.-*
		> *-Anything you want to pull out of the commit, either commit it now, or just stash it.-*
		> *-Leave whatever you want to remain in the original commit.-*
		> *-You will have a chance to edit the original commit message.-*
		>
		> *+Just exit the subshell when you're done fucking around.+*
		$SHELL
		# if there's nothing left, whine about it
		# if there is something left, commit it with the previous message and a chance to re-edit
		CURRENT_STATUS=`git status`
		q{$CURRENT_STATUS} =~ /nothing to commit/	->	? The old commit will be lost entirely.
		q{$CURRENT_STATUS} !~ /nothing to commit/	->	git add .
		q{$CURRENT_STATUS} !~ /nothing to commit/	->	git commit -v -c $TARGET

		# at this point, there _shouldn't_ be any more mods
		`git status` !~ /nothing to commit/			->	! Unexpectedly have changes remaining after full commit.

		# now put back all the intervening commits, then restore any remaining mods
		git rebase --continue
		= safe-stash-pop split-amend
	---
</CustomCommand>


# given the name of another (published) branch, make that branch look exactly
# like the current branch, then publish it
<CustomCommand force-align>
	Description = Given a published branch, force it to align with the current branch, then republish
	Verify = project
	Verify = clean
	Argument = branch									<branch to force-align>

	action <<---
		ALIGN_BRANCH=%branch						# makes it easier to interpolate
		!`git rev-parse --verify --quiet $ALIGN_BRANCH`			->	! %branch is not a local branch
		!`git rev-parse --verify --quiet origin/$ALIGN_BRANCH`	->	! %branch is not a remote branch
		? *!This is VERY destructive!!*  Be very sure you want to do this.

		SOURCE_BRANCH=%cur_branch
		NUM_COMMITS=%num_local_commits
		> forcing $ALIGN_BRANCH to match $SOURCE_BRANCH
		> (given $NUM_COMMITS local commits)
		git checkout $ALIGN_BRANCH
		git merge --no-commit -s ours $SOURCE_BRANCH
		git rm -rf . >/dev/null
		git checkout $SOURCE_BRANCH -- .
		git commit -m "force-align public feature branch with dev feature branch ($SOURCE_BRANCH)"
		? About to publish the changes and make this non-reversible.
		git push
		git checkout $SOURCE_BRANCH
		> *-You must change the wording in the initial commit in some way.-*
		> If you don't, your local changes will appear as published.
		? Ready to make it so?
		GIT_SEQUENCE_EDITOR=q{perl -i -pe 's/^pick/reword/ if $. == 1'}
		git rebase -i HEAD~$NUM_COMMITS

		> *+Summary of actions:+*
		> - $ALIGN_BRANCH was forced to match $SOURCE_BRANCH
		> - $ALIGN_BRANCH was published to GitHub
		> - $SOURCE_BRANCH had all its commits modified so they are not considered published
		> - you are currently on $SOURCE_BRANCH
	---
</CustomCommand>

# given the name of another (published) branch, delete that branch entirely,
# then republish it as a copy of the current branch
<CustomCommand reset-published>
	Description = Given a published branch, delete it locally and remotely, then republish as a copy of the current branch
	Verify = project
	Verify = clean
	Argument = branch									<branch to reset-published>

	action <<---
		COPY_BRANCH=%branch						    # makes it easier to interpolate
		EXPUNGE_FIRST=0						    	# only expunge if we have to
		SOURCE_BRANCH=%cur_branch
		NUM_COMMITS=%num_local_commits

		`git rev-parse --verify --quiet origin/$COPY_BRANCH`				->	EXPUNGE_FIRST=1
		$EXPUNGE_FIRST && !`git rev-parse --verify --quiet $COPY_BRANCH`	->	! %branch is not a local branch
		$EXPUNGE_FIRST		->	? *!This is VERY destructive!!*  Be very sure you want to do this.
		$EXPUNGE_FIRST		->	? $COPY_BRANCH will be destroyed and recreated.  You have been warned.
		$EXPUNGE_FIRST		->	> removing $COPY_BRANCH locally and remotely
		$EXPUNGE_FIRST		->	= expunge-branch $COPY_BRANCH

		> publishing branch with $NUM_COMMITS local commits
		git checkout -b $COPY_BRANCH $SOURCE_BRANCH
		= publish
		git checkout $SOURCE_BRANCH
		> *-You must change the wording in the initial commit in some way.-*
		> If you don't, your local changes will appear as published.
		? Ready to make it so?
		GIT_SEQUENCE_EDITOR=q{perl -i -pe 's/^pick/reword/ if $. == 1'}
		git rebase -i HEAD~$NUM_COMMITS

		> *+Summary of actions:+*
		$EXPUNGE_FIRST		->	> - $COPY_BRANCH was deleted, both locally and remotely
		> - $COPY_BRANCH was recreated as a copy of $SOURCE_BRANCH
		> - $COPY_BRANCH was published to GitHub
		> - $SOURCE_BRANCH had all its commits modified so they are not considered published
		> - you are currently on $SOURCE_BRANCH
	---
</CustomCommand>


# given part of the stash message, or the stash number, find the stash name
# (this is used by many of the stash commands below; not very useful on its own)
<CustomCommand stash-identify>
	Description = Given a stash message (partial okay), return the stash name
	Verify = project
	<Trailing stashid>
		description = stash number, stash message, or partial message
		singular = stashid
		qty = 0..1
	</Trailing>

	action <<---
		# from the original version of `stash-files`
		#STASH=my $f = %name[0] // '0'; $f =~ /^\d+$/ ? sprintf('stash@{%s}', $f) : $f

		# don't forget: env expansion still takes place in single quotes
		# normally I would use double quotes just to make it more obvious, but $STASH can contain an @,
		# so it could give a "Possible unintended interpolation" error if we don't use single quotes
		STASH=""									# avoid "not defined" warning
		!"%stashid"							->	STASH='stash@{0}'
		"%stashid" =~ /^stash\@\{\d+\}$/	->	STASH="%stashid"
		"%stashid" =~ /^\d{1,3}$/			->	STASH=sprintf('stash@{%s}', "%stashid")
		!'$STASH'  							->	STASH=join(',', map { /^(.*?): .*%stashid/ ? $1 : () } `git stash list`)

		not '$STASH'						->	! Could not find the stash: %stashid
		'$STASH' =~ /,/						->	! Ambiguous stashid: $STASH
		> stash: *-$STASH-*
	---
</CustomCommand>

# override for standard stash
<CustomCommand my-stash>
	Description = Stash changes, saving timestamps
	Verify = project
	Argument = stashid									<identifier for stash>

	action <<---
		echo %stashid
		%stashid =~ /\s/					->	! Must not have spaces in stash ID
		%stashid =~ m{/}					->	! Must not have slashes in stash ID
		grep { /^${\(%stashid)}$/ } `git stash list --format=%s | awk -F": " '{print \\\$2}'` -> ! Stash ID already exists
		git-savetimes --save -u --auto %stashid
		git stash push -u -m %stashid
	---
</CustomCommand>

# override for standard unstash
<CustomCommand my-unstash>
	Description = Restore previously stashed changes, by name
	Verify = project
	<Trailing stashid>
		description = optional identifier (number/message/partial message) to identify stash
		singular = stashid
		qty = 0..1
	</Trailing>

	action <<---
		= stash-identify %stashid
		# now $STASH is set
		STASHID=do {my $i='$STASH'; my $s=`git log -1 --format=%s '$i' | awk -F": " '{print \\\$2}'`; chomp $s; $s}
		git stash pop $STASH
		"$STASHID" !~ m{[ /]}				->	git-savetimes --restore --auto $STASHID
	---
</CustomCommand>

<CustomCommand stash-p>
	Description = Partial stash of uncommitted changes
	Verify = project
	Argument = stashid									<identifier for stash>

	action <<---
		%stashid =~ /\s/					->	! Must not have spaces in stash ID
		%stashid =~ m{/}					->	! Must not have slashes in stash ID
		grep { /^${\(%stashid)}$/ } `git stash list --format=%s | awk -F": " '{print \\\$2}'` -> ! Stash ID already exists
		git-savetimes --save -u --auto %stashid
		git stash       save -p        %stashid
		= stat-plus
	---
</CustomCommand>

<CustomCommand stash-files>
	Description = Show files stored in a stash
	Verify = project
	<Trailing stashid>
		description = optional identifier (number/message/partial message) to identify stash
		singular = stashid
		qty = 0..1
	</Trailing>

	action <<---
		= stash-identify %stashid
		# now $STASH is set
		# don't forget: env expansion still takes place in single quotes
		# normally I would use double quotes just to make it more obvious, but $STASH contains an @,
		# so it will give a "Possible unintended interpolation" error if we don't use single quotes
		!system('git rev-list --quiet $STASH^3 2>/dev/null')		->	UNTRACKED='$STASH^3'
		git show $STASH $UNTRACKED --stat | grep '^ [^ ]'
	---
</CustomCommand>

<CustomCommand stash-search>
	Description = Search all stashes for a string
	Verify = project
	Argument = pattern								<Perl regex to search for>

	action <<---
		SHOW_STASH='git show {}; git cat-file -t {}^3 >/dev/null 2>&1 && git show {}^3'
		git reflog --format=\%gd stash | each "$SHOW_STASH" | perl -lne "print if /%pattern/" | $PAGER
	---
</CustomCommand>

<CustomCommand unstash-force>
	Description = Unstash dammit
	Verify = project
	<Trailing stashid>
		description = optional identifier (number/message/partial message) to identify stash
		singular = stashid
		qty = 0..1
	</Trailing>

	action <<---
		= stash-identify %stashid
		# now $STASH is set
		git stash show --no-color -p $STASH | git apply
		git stash drop $STASH
	---
</CustomCommand>

<CustomCommand unstash-conflict-recover>
	Description = Recover from an unstash that generated a conflict
	Verify = project
	<Trailing stashid>
		description = optional identifier (number/message/partial message) to identify stash
		singular = stashid
		qty = 0..1
	</Trailing>

	action <<---
		= stash-identify %stashid
		# now $STASH is set
		git-unstash-recover $STASH
	---
</CustomCommand>

<CustomCommand stash-drop>
	Description = Drop a stash, by name
	Verify = project
	Argument = stashid								<stash number or stash message (partial okay)>

	action <<---
		= stash-identify %stashid
		# now $STASH is set
		git log -1 --format=%s $STASH
		= stash-files $STASH
		? Are you sure you want to drop this stash?
		git stash drop $STASH
	---
</CustomCommand>

<CustomCommand stash-check>
	Description = Examine a stash, increasingly microscopically, without unstashing
	Verify = project
	Verify = clean
	Argument = stashid								<stash number or stash message (partial okay)>

	action <<---
		= stash-identify %stashid
		# now $STASH is set
		git log -1 --format="%s [%ad]" $STASH
		= stash-files $STASH
		? ...
		git stash show -p $STASH
		? Apply the stash for deeper investigation?
		git stash apply $STASH
		> *-Run this after browsing stashed changes:-*
		> *=vc clean=*
	---
</CustomCommand>

<CustomCommand clean>
	Description = Remove local changes in a recoverable fashion

	action <<---
		!%is_dirty			->	! Nothing to clean!
		SHUT_UP=eval '$' . 'ENV{OKAY_TO_CLEAN} ? 1 : 0'
		!$SHUT_UP		->	? *~Local changes will be lost!~* (but recoverable via SHA1 of dropped stash)
		git reset HEAD || :
		git stash save -u 'Local changes in effect as of `%me clean`'
		git stash drop
	---
</CustomCommand>

<CustomCommand testclean>
	Description = Stash, run tests, then unstash
	Verify = project

	action <<---
		!%is_dirty	->	! Nothing to clean! (just run `t`)
		= safe-stash-push testclean
		t ||:
		? *-Testing complete.-*
		OKAY_TO_CLEAN=1
		`git status` !~ /working \w+ clean/	->	= clean
		= safe-stash-pop testclean
	---
</CustomCommand>

<CustomCommand ls-mods>
	Description = List mod times for dirty files
	Verify = project

	action <<---
		git status --porcelain | perl -lne 's/^...//; s/ -\> .*$//; push @f, $_; END {system(ls => -lhFdrt => @f)}'
	---
</CustomCommand>


<CustomCommand reset-symlinks>
	Description = Revert spurious typechange modifications, often caused by Dropbox
	Verify = project

	action <<---
		FILES=join('', grep { s/^(...)// and $1 eq ' T ' } `git status --porcelain=v1`)
		not "$FILES" -> ! No typechange'd files to revert.
		> *-Will revert the following files:-*
		> *=$FILES=*
		> *~I cannot guarantee that all these are borked symlinks.~*
		> *~Also, filenames with spaces (if any) will not be handled correctly.~*
		? *~Proceed at your own risk.~*
		FILES="$FILES" =~ s/\n/ /gr
		= unget $FILES
	---
</CustomCommand>

<CustomCommand push-some>
	Description = Push only X local commits to origin
	Verify = project
	Argument = how_many								<integer (number of commits to push)>

	action <<---
		%how_many  > %num_local_commits		->	! Don't have that many commits to push.
		%how_many == %num_local_commits		->	! That's all the commits there are to push; just run `%me push`.
		COMMITS_TO_KEEP=%num_local_commits - %how_many
		= my-sync
		>
		git show -s --oneline %local_commits | tail -n%how_many
		? The commits above will be pushed.
		git push origin HEAD~$COMMITS_TO_KEEP:%cur_branch
		COMMITS_PUSHED=join(', ', (reverse %local_commits)[0..(%how_many-1)])
		> *+Pushed the following commits to origin: $COMMITS_PUSHED+*
	---
</CustomCommand>

<CustomCommand commit-filedate>
	Description = Commit, but use the mtime of <file> as the commit date
	Verify = project
	Argument = file									<file to draw date from>

	action <<---
		%has_staged			->	? *~Some changes already staged!!~*
		not -r %file		->	! Can't read file %file.
		DATETIME=do { use Date::Easy; datetime((stat %file)[9])->iso8601 }
		git add -p %file
		git commit -v --date $DATETIME
	---
</CustomCommand>

<CustomCommand commit-date>
	Description = Commit, but use the supplied datetime as the commit date
	Verify = project
	Argument = date									<date string (flexible format)>

	action <<---
		not %has_staged		->	! Stage your changes first.
		DATETIME=do { use Date::Easy; datetime(%date)->iso8601 }
		not "$DATETIME"		->	! Can't interpret date.
		git commit -v --date $DATETIME
	---
</CustomCommand>


<CustomCommand changed-files>
	Description = Show a list of files modified by commits matching pattern
	Verify = project
	Argument = pattern									<regex for commit matching>

	action <<---
		# give --stat a ridiculously high number as a way of saying "don't truncate filenames"
		git log --grep "%pattern" --stat=1000 | perl -lne 's/^\s+// and print if s/\s+\|.*$//' | sort -u
	---
</CustomCommand>

<CustomCommand previous-version>
	Description = Show the file prior to its last modification (to stdout)
	Verify = project
	Argument = file									<file to show previous version of>

	action <<---
		REVISION=do {my $r=`git log --pretty='%h' -n1 --follow ${\(%file)}`; chomp $r; $r}
		git show $REVISION^:%file
	---
</CustomCommand>


<CustomInfo remotes>
	Type = ArrayRef
	action <<---
		git remote
	---
</CustomInfo>
<CustomCommand set-upstream>
	Description = Set upstream remote for the current branch
	Verify = project
	Argument = remote								<name of remote (must exist)>

	action <<---
		#NUM_REMOTES=scalar @[(%remotes)]
		not %remote ~~ [%remotes]		->	! Remote %remote does not exist
		git fetch %remote
		git branch --set-upstream-to %remote/%cur_branch
	---
</CustomCommand>
