VCtoolsDir=~/proj/VCtools

WorkingDir=~/proj
WorkingDir=~/workproj

# Policy file for CE
<<include /home/buddy/workproj/CE/etc/ceflow/CE.conf>>

DefaultVC=git
<<include ~/proj/VCtools/share/conf/git.conf>>
<<include ~/proj/VCtools/share/conf/svn.conf>>

DefaultSourcePath=git@github.com:%user/%project.git

# personal overrides for VC commands
<git>
	<commands>
		stage <<---
			#CHECKTABS=`checktabs -n`
			#"$CHECKTABS" -> > $CHECKTABS
			#"$CHECKTABS" -> ! "fix checktabs problems before continuing"
			git add -p %files
		---
	</commands>
</git>


<Project VCtools.svn>
    VC = svn
</Project>

<Project common>
	ProjectDir = ~/common
</Project>


<CustomCommand merge>
    Verify = project
    Files = 0

    action <<---
		%cur_branch !~ m{^feature/} -> ! Will only merge trunk into a feature branch.
		%is_dirty -> git stash save -u
		git fetch origin
		git merge origin/%Mainline
		%is_dirty -> git stash pop
    ---
</CustomCommand>


<CustomCommand stg-amend>
	Description = Amend a previous commit
    Verify = project
    Argument = how_far_back

    action <<---
		REMOTE='origin'
		join('/', "$REMOTE", %cur_branch) ~~ [%remote_branches] -> ! Will not do this on a published branch.
		!%is_dirty -> ! You have no changes to apply.
		git stash save -u "changes for stg-amend"
		TARGET="HEAD" . '^' x %how_far_back
		git rebase -i $TARGET
		git stash apply
		git add -i
		git commit -v --amend
		git status -s | awk '{print $2}' | each 'git checkout -- {}'
		git rebase --continue
		git stash pop
    ---
</CustomCommand>


# overrides for CE
<Policy CE>
	<git>
		<commands>

			# remember: %info methods record the state as of when they're first requested
			# therefore, %is_dirty will remain true (if it was before) even after the stash
			sync <<---
				%is_dirty -> git stash save -u
				git pull --rebase
				%is_dirty -> git stash pop
			---

		</commands>
	</git>
</Policy>
