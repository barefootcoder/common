#! /bin/bash

# Reliable SSH agent environment detector
# Returns environment variables for the running ssh-agent
# written with the help of Claude (3.7 Sonnet):
# 	https://claude.ai/share/89195029-5b8a-4e60-a268-dc68dd5f21bb

# Find all potential SSH agent sockets
function find_ssh_sockets
{
    # Look in common locations, including hidden files (with .)
    find /tmp /run/user/$(id -u) -path "*/ssh*"  -type s 2>/dev/null
    find /tmp /run/user/$(id -u) -path "*/.ssh*" -type s 2>/dev/null
}

# Find running ssh-agent processes for current user
function find_ssh_agents
{
    /bin/pgrep -u $(id -u) ssh-agent
}

# Test if a socket works
function test_socket
{
    local socket="$1"

    # Just test the socket without setting environment
    SSH_AUTH_SOCK="$socket" ssh-add -l >/dev/null 2>&1

    # Return codes:
    # 0 = connection works, has keys
    # 1 = connection works, no keys
    # 2 = connection failed
    [[ $? -lt 2 ]]
}

# Find the first working socket
function find_working_socket
{
    local sockets=$(find_ssh_sockets)

    for socket in $sockets
    do
        if test_socket "$socket"
        then
            echo "$socket"
            return 0
        fi
    done

    return 1
}

# MAIN: output environment settings
# Get the first working socket
socket=$(find_working_socket)

if [[ "$socket" ]]
then
    echo "unsetenv SSH_AGENT_PID;"
    echo "setenv SSH_AUTH_SOCK $socket;"
    exit 0
else
    # Check if agent is running but no working sockets found
    agents=$(find_ssh_agents)
    if [[ "$agents" ]]
    then
        echo "# SSH agent is running ($agents) but no working sockets found" >&2
    else
        echo "# No SSH agent found" >&2
    fi
    exit 1
fi
