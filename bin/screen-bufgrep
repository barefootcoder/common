#! /usr/bin/env perl

use myperl::Pxb;
use autodie ':all';

const my $PROMPT => '(\[.*?\]|\w+ [~/].*? #|[\w\@]+:[~/].*?\$) ';


opts <<'-';
	[-c | -F] [-bvD] { -e <pattern> | <pattern> } [-B <dir>] [<buf>]
	-c : search for commands
	-F : treat pattern as literal, like `grep -F` (not particularly faster)
	-b : bare (don't show filename; with -c, don't show prompt either)
	-v : be more verbose
	-e : next arg is the <pattern>, even if it starts with -
	-B : pretend that <dir> is the base dir for buflogs
	-D : debug mode (implies -v)
	<pattern> : Perl-style regex
	<buf>     : screen buffer to search (default: *)
-
$OPT{v} = 1 if $OPT{D};
my $screenbuf_dir = path( $OPT{B} // "~/local/data/screen-buflog" );
usage_error("-c and -F are incompatible") if $OPT{c} and $OPT{F};

my $regex = $OPT{e} // shift // usage_error('must supply regex');
$regex = "^$PROMPT.*(?:$regex)" if $OPT{c};
$regex = $OPT{F} ? shq($regex) : qr{$regex};
my $bufs = shift // ''; $bufs .= '*';


my (%seen, @results);
my @switches = $OPT{F} ? qw< -H -Q > : qw< -H >;
$regex = shq($regex);
my $cmd = "ack @switches --match $regex $screenbuf_dir/*/$bufs";
foreach (reverse sh bash => -c => -O => extglob => $cmd)
{
	# extract the filename and the matching line
	my ($file, $line) = m{^$screenbuf_dir/(.*?):(?:\d+:)?(.*)$} or die("cannot parse: $_");
	# skip if we're showing commands and this line is just a previous output of us showing commands
	next if $OPT{c} and m{^\d{4}-\d\d-\d\d/[\w-]+\.buf:};
	# handle headers (or lack thereof)
	if ( $OPT{b} )				# bare mode
	{
		$file = '';
		$line =~ s/^$PROMPT// if $OPT{c};
	}
	else						# normal mode
	{
		$file .= ':';
	}
	# save the line, but only if we haven't already seen it
	unshift @results, "$file$line" unless $seen{$line}++;
}
say foreach @results;
