#! /usr/bin/env perl

use myperl::Script;
use autodie ':all';

use Date::Easy;
use Path::Class::Tiny;
use List::AllUtils qw< pairfirst >;


sub csv_split(;$);


my %DESCRIPTIONS =
(
	Reserve			=>	[
							qr/N6723 CAMPUS EXP DIR DEP/i,
							qr/N6723 ARCHER ED/i,
							qr/Interest Paid/i,
							qr/internet transfer/i,
							qr/booster transfer/i,
							qr/requested transfer/i,
							qr/overdraft transfer/i,
						],
	Mortgage		=>	[
							qr/BAC Home Loans/i,
							qr/Bank of America/i,
							qr/Nationstar dba/i,
							qr/NSM DBAMR.COOPER/i,
						],
	'Power/Heat'	=>	[
							qr/S CA Edison/i,
							qr/So Cal Edison/i,
							qr/Southern Cal Gas/i,
							qr/So Cal Gas Co/i,
							qr/SOUTHERN CALIFOR Online Payment/i,
							qr/Mosaic/i,
							qr/Aloe Solar/i,
						],
	Phone			=>	[
							qr/Verizon/i,
							qr/VZWRLSS/i,
							qr/asurion wireless/i,
							qr/Google Fi/i,
							qr/GOOGLE \*GOOGLE/i,
							qr/GOOGLE \*FI\b/i,
						],
	'TV/Internet'	=>	[
							qr/DirecTv\b/i,
							qr/Uverse Online/i,
							qr/Time Warner/i,
							qr/Spectrum/i,
							qr/Netflix/i,
							qr/Amazon Prime/i,
							qr/Prime Video/i,
							qr/HBOMax/i,
							qr/Hulu/i,
							qr/CBS All Access/i,
							qr/Paramount+/i,
							qr/Philo/i,
							qr/Disney ?Plus/i,
							qr/Sling.com/i,
							qr/DisneyPlus/i,
							qr/OTT\* DROPOUT/i,
						],
	Water			=>	[
							qr/Golden State (Water|Wtr|Wat)/i,
						],
	Trash			=>	[
							qr/Anderson Rubbish/i,
							qr/Waste Management/i,
						],
	House			=>	[
							qr/Gottlieb's/i,
							qr/BRETT MORGAN/i,
							qr/Q's Quality Pool/i,
							qr/carlos ortega/i,
							qr/jessie flores/i,
							qr/fidelity nationa/i,
							qr/CloudPaper/i,
						],
	Cars			=>	[
							qr/Carmax Auto Fin./i,
						],
	Insurance		=>	[
							qr/acsc-huon/i,
						],
	'Car Maint'		=>	[
							qr/CA(LIF)? DMV/i,
							qr/\bsmog\b/i,
							qr/AUTO CLUB SO CAL/i,
							qr/Bill's Quality Auto Care/i,
						],
	Groceries		=>	[
							qr/Trader Joe.?s/i,
							qr/HelloFresh/i,
							qr/HLLFRSH/i,
							qr/EMeals/i,
							qr/Thrive Market/i,
							qr/Sprouts\b/i,
							qr/Sprouts Farmers/i,
							qr/Lassens/i,
							qr/SmartNFinal/i,
							qr/Smart and Final/i,
							qr/StaterBros/i,
							qr/Ralphs/i,
							qr/Albertsons/i,
							qr/Vons/i,
							qr/Costco Whse/i,
							qr/Costco[. ]com/i,
							qr/Costco by Insta(cart)?/i,
							qr/Imperfect Foods/i,
							qr/Pure Indian (Foods)?/i,
							qr/Bennets_Honey_Farm/i,
							qr/Cloud Paper/i,
							qr/EARTHBREEZE.COM/,
						],
	Health			=>	[
							qr|CVS/Pharmacy|i,
							qr/CVS\.com/i,
							qr/Walgreens/i,
							qr/Ocean Park Pharmacy/i,
							qr/WW INT(ERNATIONA|')L?/i,
							qr/Lume deodorant/i,
						],
	Clothing		=>	[
							qr/WomanWithin/i,
						],
	Grooming		=>	[
							qr/SuperCuts/i,
							qr/Body Positive/i,
						],
	Travel				=>	[
							qr/chevron/i,
							qr/shell (oil|service|simi|\d+)/i,
							qr/exxon/i,
							qr/USA 63216/i,
							qr/HD Fuel/i,
							qr/76.*oil/i,
							qr/Arco/i,
							qr/gse 76/i,
							qr/moller retail/i,
							qr/Costco Gas/i,
						],
	Pets			=>	[
							qr/Aquarium Connect./i,
							qr/THE AQUARIUM CO/i,
							qr/Theresa'?s/i,
							qr/Valley Veterinary/i,
							qr/Nordhoff Veterin(ary)?/i,
							qr/Chewy\.?com/i,
						],
	School			=>	[
							qr/Outschool/i,
							qr/Barefoot Within the( Trees Curriculum)?/i,
							qr/CuriosityStream/i,
							qr/Discovery Cube/i,
							qr/Discovery Scien(ce)?/i,
							qr/UNDERWOOD FAMI/i,
							qr/Santa Barbara Zoo/i,
							qr/DojoBoom/i,
							qr/Universal Yums/i,
							qr/school ?fees/i,
							qr/MOORPARK COL BKSTOR/i,
							qr/Los Angeles Zoo/i,
							qr/T\.O\. E-LIBRARY/i,
							qr/OwlCrate/i,
						],
	Entertainment	=>	[
							qr/Studio Movie Gr/i,
							qr/Simi Valley 10 Cinemas/i,
							qr/Fandango/i,
							qr/Video on Demand/i,
							qr/Universal Cty/i,
							qr/Six Flags/i,
							qr/Chuck E Cheese/i,
							qr/^D&B /i,
							qr/DnD Adventure C(lub)?/i,
							qr/Great Wolf Lodge/i,
							qr/GG Delivers/i,
							qr/Sunday Scaries/i,
						],
	Books			=>	[
							qr/Audible/i,
							qr/Kindle/i,
							qr/(amazon|amzn) digit(al)?/i,
						],
	'Eating Out'	=>	[
							qr/McDonald'?s/i,
							qr/Taco Bell/i,
							qr/Wendy'?s/i,
							qr/Carl'?s Jr/i,
							qr/Jack in the Box/i,
							qr/Subway/i,
							qr/In N Out/i,
							qr/\bKFC\b/i,
							qr/Popeye'?s/i,
							qr/SMART MANAGEMENT & CO/i,
							qr/Arbys/i,
							qr/Freddy'?s/i,
							qr/5Guys/i,
							qr/Burgerim/i,
							qr/Domino'?s/i,
							qr/Pizza Hut/i,
							qr/Toppers/i,
							qr/Fatte'?s Pizza/i,
							qr/Burger Express/i,
							qr/Ameci/i,
							qr/Presto Pasta/i,
							qr/Little Caesars/i,
							qr/Panda Express/i,
							qr/Great Steak( Hoagie)?/i,
							qr/\bThe Hat\b/i,
							qr/^Habit\b/i,
							qr/Golden Tiger/i,
							qr/Indian Haweli/i,
							qr/FunBurger/i,
							qr/Baja Fresh/i,
							qr/118 Cafe/i,
							qr/The Dugout/i,
							qr/Szechuwan Garden/i,
							qr/Guido['`]s Pizza/i,
							qr/East Coast Pizza/i,
							qr/Red's BBQ/i,
							qr/Michael Ds/i,
							qr/\bBeto.?s\b/i,
							qr/Old Susana/i,
							qr/Olivios Trattoria/i,
							qr/Viva la Pasta/i,
							qr/Yolandas/i,
							qr/Outback/i,
							qr/Denny's/i,
							qr/Junkyard/i,
							qr/Sharky's/i,
							qr/Thai House/i,
							qr/Bollywood Indian/i,
							qr/Fire Island Grill/i,
							qr/Red Robin/i,
							qr/Red'?s Barbecue/i,
							qr/Eggs N Things/i,
							qr/Hook Burger/i,
							qr/Panera/i,
							qr/Corner Bakery/i,
							qr/Chipotle/i,
							qr/Lucky'?s Dog House/i,
							qr/Starbucks/i,
							qr/Baskin/i,
							qr/Sub Zero Ice Cr/i,
							qr/Tutti Frutti/i,
							qr/7-?Eleven/i,
							qr/Simi Donuts/i,
							qr/Donuts Plus/i,
							qr/Dairy Queen/i,
							qr/Coldstone( Creamery)?/i,
							qr/Yogurtland/i,
						],
	Personal		=>	[
							qr/PlayStation Net(work)?/i,
							qr/PlayStationNetwork/i,
							qr/SteamGames/i,
							qr/paypal inst xfer/i,
							qr/Kickstarter/i,
							qr/Critical Role/i,
							qr/Treasured Memories/i,
							qr/Jimmy Beans Wool?/i,
							qr/Joann\b/i,
							qr/HobbyLobb/i,
							qr/Quilty Pleasures/i,
							qr/noa coppa/i,
							qr/vito rest/i,
							qr/Urban Plate/i,
							qr/Hopdoddy/i,
							qr/Smoke & Vape/i,
							qr/BackBlaze/i,
							qr/Miniature Market?/i,
							qr/TrollAndToad/i,
							qr/ONEBOOKSHELF.COM?/i,
							qr/Elderbrain/i,
							qr/MCDM Prod/i,
							qr/Nintendo/i,
							qr/GameStop/i,
							qr/Kopy King/i,
							qr/MP3VA.com/i,
							qr/BandCamp/i,
							qr/OFFICE DE\b/i,
							qr/parking.*playa vista/i,
							qr/GOOGLE \*INNERSLOTH/i,
						],
	Charity			=>	[
							qr/Maximum Fun/i,
							qr/Patreon/i,
						],
	Debt			=>	[
							qr/CITI CARD ONLINE/i,
							qr/Chase Credit/i,
							qr/AMZ[ _-]STORECA?RD/i,
							qr/PAYMENT FOR AMZ/i,
							qr/CITI AUTOPAY/i,
							qr/CHASE EPAY/i,
						],
	'Professional Fees'=>	[
							qr/HLW Tax/i,
						],
	Medical			=>	[
							qr/Simi Chiro/i,
							qr/Family Psych/i,
							qr/Mojgan Makhsoosi?/i,
						],
	Reimburse		=>	[
							qr/ChatGPT/i,
							qr/SM City Parking Meters/i,
							qr/Optum Bank/i,
							qr/OPTUM BANK REIMBUR/i,
							qr/VENTURA CO CCD/i,
							qr/SOL RESTAURANTS/i,
							qr/TONY PS DOCKSIDE/i,
						],
	'HSA to be reimbursed' => [
							qr/Lifespan/i,
						],
	
);

my %WHAT_LOOKUP =
(
	'N6723 CAMPUS EXP DIR DEP'			=>	'Paycheck',
	'N6723 ARCHER EDU DIR DEP'			=>	'Paycheck',
	'N6723 ARCHER ED'					=>	'Paycheck',
	'BAC Home Loans'					=>	'Mortgage Payment',
	'Nationstar dba'					=>	'Mortgage Payment',
	'NSM DBAMR.COOPER'					=>	'Mortgage Payment',
	'S CA Edison'						=>	'Electric Bill',
	'SOUTHERN CALIFOR Online Payment'	=> 	'So Cal Gas Co',
	'Golden State (Water|Wtr|Wat)'		=>	'Water Bill',
	'VZWRLSS'							=>	'Verizon Wireless',
	"Gottlieb's"						=>	"Gottlieb's (new pool guy)",
	'BRETT MORGAN'						=>	'Pool Guy',
	'jessie flores'						=>	'Gardeners',
	'carlos ortega'						=>	'Gardener',
	'fidelity nationa'					=>	'Warranty Company',
	'HLLFRSH'							=>	'Hello Fresh',
	'Sprouts Farmers'					=>	'Sprouts',
	'Baskin'							=>	'Baskin Robbins',
	'SMART MANAGEMENT & CO'				=>	'Arbys',
	'EARTHBREEZECOM'					=>	'Earthbreeze [laundry soap sheets]',
	'acsc-huon'							=>	'AAA Car Insurance',
	'CITI AUTOPAY'						=>	'Costco CC',
	'AMZ[ _-]STORECARD'					=>	'Amazon Credit Card',
	'SM City Parking Meters'			=>	'Parking Meters',
	'noa coppa'							=>	'Nintendo',
	'MOORPARK COL BKSTOR'				=>	'College Bookstore',
	'Body Positive'						=>	'Yoga Club',
	'OPTUM BANK REIMBUR'				=>	'HSA Reimbursement',
	'GG Delivers'						=>	'Recreational',
	'VENTURA CO CCD'					=>	'Moorpark College',
	'UNDERWOOD FAMI'					=>	'Underwood Farms',
	'SOL RESTAURANTS'					=>	'Sol (Work Team Lunch)',
	'TONY PS DOCKSIDE'					=>	"Tony P's (Work Team Lunch)",
	'DRIVETHRU'							=>	"DriveThruRPG []",
	'ONEBOOKSHELFCOM'					=>	"DriveThruRPG []",
	'Uverse Online'						=>	'DirecTv',
	'AUTO CLUB SO CAL'					=>	'AAA (Roadside Assistance)',
	'OFFICE DE'							=>	'Office Depot',
	'^D&B '								=>	"Dave & Buster's",
	'T.O. E-LIBRARY'					=>	'Library (TO)',
	"WW INTERNATIONA|'L"				=>	'Weight Watchers',
	'JUNKYARD'							=>	'Junkyard Cafe',
	'Imperfect Foods'					=>	'Veggie box',
	'GOOGLE *INNERSLOTH',				=>	'Android Game',
	'THE AQUARIUM CO',					=>	'Aquarium Connect',
	'GOOGLE *GOOGLE',					=>	'Google Fi',
	'GOOGLE *FI',						=>	'Google Fi',
	'OTT* DROPOUT',						=>	'DropoutTV',
	'Costco com'						=>	'Costco.com',
	'ACH Withdrawal MOSAIC'				=>	'Mosaic (solar)',
);


opts <<'-';
	{ [-F|-B] [-N] [-a<id>] [-H] | -g } <file>
	-F : family spending output (default: family finances output)
	-B : new Budget sheet categorization output
	-N : only show those lines that didn't get a category assigned
	-a : only show transactions after <id> (and before midnight)
	-H : show header line (default: don't)
	-g : group expenses by category (default: one line per expense)
	reads transactions file (CSV from Ally)
	converts it to TSV for personal finance sheet(s)
-


@ARGV or usage_error("must supply transaction file");
my $file = file(shift);
-r $file or fatal("can't open $file");

my %categories;
my @transactions = get_rows_from_file($file);
my $trans_rows = 0;
foreach (@transactions)
{
	my ($id,$date,$seq,$amount,$type,$descr) = @$_;
	# seq is useless
	# type can be very useful or practically useless
	# amount is always negative for debits, positive for credits

	my $category = derive_category_from($descr);
	my $who = '';									# might get set later
	my $what = $descr;								# just as the default
	# let source default to type, but update for the more useless ones
	my $source = $type;
	$source = 'BillPay' if $descr =~ /Online Payment/;
	$source = 'Check' if is_debit($amount) and $descr =~ /check\b.*#?\d/i;
	$source = 'CC' if $source eq 'Withdrawal';

	if ($OPT{a})
	{
		next if date($date) >= today;
		last if $id eq $OPT{a};
	}
	++$trans_rows;

	given ($descr)
	{
		if ( not is_debit($amount) and $descr ~~ [ qr/Expensify/, qr/OPTUM BANK REIMBUR/, qr/ATM Fee Reimbursement/ ] )
		{
			$category = 'Reimburse';
		}

		if ( $descr eq 'PAYPAL INST XFER' and abs($amount) == 5 and date($date)->day <= 5 )
		{
			$category = 'Charity';
			$what = 'Patreon';
			$who = 'Christy';
		}

		when ( /Cardtronics/ )
		{
			$what = 'Petty Cash';
		}
		when ( 'Interest Paid' )
		{
			$category = 'Bank Fees';
			$source = 'Electronic';
		}
		when ( /(Internet|Requested) Transfer/i )
		{
			$what = 'Account Transfer';
			$source = 'Electronic';
		}
		when ( /^TFR-/ )
		{
			$source = 'Overdraft';
			$category = 'Reserve';
		}
		when ( /transfer (to|from) (\w+ )?(checking|savings)/i )
		{
			$what = join(' ', Transfer => map { lc } $1, $3);
			$source = 'Transfer';
			$category = 'Reserve';
		}

		when ( /^PAYPAL INST XFER/i or /^PAYPAL TRANSFER/i or /IAT PAYPAL/i or /^PAYPAL$/i or /Withdrawal PAYPAL$/i )
		{
			$source = 'PayPal';
			$what = '<<PAYPAL>>' if $what eq $descr;
		}
		when ( /Amazon/i or /Amzn\b/i or /Prime Video/i or /Audible/i )
		{
			$source = 'Amazon';
			if ($category eq 'TV/Internet')
			{
				given (abs($amount))
				{
					$what = 'Video rental:'	when $_ < 6;
					$what = 'Disney+' 		when $_ < 8;
					$what = 'AMC+' 			when $_ < 9;
					#$what = 'Starz' 		when $_ < 9;
					#$what = 'Showtime' 	when $_ < 11;
					$what = 'HBO'			when $_ < 15;
					$what = 'Movie purchase:';
				}
				$category = "Entertainment" if $what =~ /:$/;
			}
			elsif ($category eq 'Books')
			{
				$what = /Audible/i ? 'Audible (subscription)' : 'Kindle book';
			}
			$what = 'Amazon []' if $what eq $descr;
		}
		when ( /^Kindle/i )
		{
			$source = 'Amazon';
			$what = 'Kindle';
		}
		when ( /^TARGET/i )
		{
			$what = 'Target []' if $what eq $descr;
		}
		when ( /Wal-Mart/i or /WM SUPERCENTER/i or /WALMART EGIFT/i or /WALMART\.COM/i )
		{
			$what = 'Wal-Mart []' if $what eq $descr;
		}
		when ( /MICHAELS/i )
		{
			$what = "Michael's []" if $what eq $descr;
		}
		when ( [ qr/99.CENTS/i, qr/DOLLAR TR/i, ] )
		{
			$what = 'Dollar Store []' if $what eq $descr;
		}

		when ( /STUDIO MOVIE GR/ )
		{
			$what = 'Studio Movie Grill';
			$who = 'family';
		}

		when ( /parking.*playa vista/i )
		{
			$what = 'Lunch parking';
			$who = 'Buddy';
		}
		when ( /^DRIVETHRU\b.*GA/ )
		{
			$what = 'DriveThruRPG';
			$category = "Personal";
			$who = 'Buddy';
		}
		when ( /(Knit(Crate|Picks))/i )
		{
			($what = lc $1) =~ s/knit(.)/'Knit' . uc $1/ie;
			$category = "Personal";
			$who = 'Christy';
		}
		when ( 'DropoutTV' )
		{
			$category = "TV/Internet";
		}

		when ( [ qr/THOUSAND OAKS 14/i, qr/AMC ONLINE/i, ] )
		{
			$what = 'Movie Theater';
			$who = 'family';
		}

		when ( $category eq 'Travel' )
		{
			$what = 'Misc Gas Station';
		}

		default
		{
			foreach ( @{ $DESCRIPTIONS{$category} } )
			{
				$what = s/\(.*?:(\\b)?(.*?)(\\b)?\)/$2/r =~ s/(?<!\\)[.?*^()]//gr =~
						s/(?<!\\)\[(.).*\]/$1/gr =~ s/\\//gr if $descr =~ /$_/;
			}
			$what = $WHAT_LOOKUP{$what} // $what;
			$who  = {
						'Treasured Memories'	=>	'Christy',
						'Jimmy Beans Wool'		=>	'Christy',
						Panera					=>	'Christy',
						Starbucks				=>	'Christy',
						'PlayStation Network'	=>	'Perrin',
						Nintendo				=>	'Perrin',
						'Smoke & Vape'			=>	'Buddy',
						'MP3VA.com'				=>	'Buddy',
						BackBlaze				=>	'Buddy',
						'DriveThruRPG []'		=>	'Buddy',
						'MCDM Prod'				=>	'Buddy',
						BandCamp				=>	'Buddy',
						Elderbrain				=>	'Buddy',
						'Android Game'			=>	'Merrick',
					}->{$what} // '';
			# high-dollar 7-11 is gas, not food
			$category = 'Travel' if $what eq '7-Eleven' and abs($amount) >= 30;
		}

	}

	my $display = 1;
	$display = 0 if $OPT{N} and $category;
	if ($OPT{F})
	{
		$amount = -$amount if is_debit($amount);
		$amount = round($amount);
		$display = 0 unless $category ~~ [ 'Personal', 'Charity', 'Entertainment', 'Eating Out', '' ];
		say join("\t", $what,$who,$amount,$source,$date) if $display;
	}
	elsif ($OPT{B})
	{
		say join("\t", $id,$amount,$what,$category,$source,$who) if $display;
	}
	elsif ($OPT{g})
	{
		$categories{$category} += $amount;
	}
	else
	{
		say join("\t", $id,$date,$seq,$amount,$type,$descr) if $display;
	}
}

if ($OPT{g})
{
	printf "%-20s  ::  %8.2f\n", $_ || '<UNKNOWN>', $categories{$_} foreach sort keys %categories;
}
else
{
	say STDERR "transaction rows: $trans_rows";
}


########
# SUBS #
########

sub get_rows_from_file
{
	my ($filename) = @_;
	$filename =~ /\.(\w+)$/ or die("can't handle a file without an extension");
	given ($1)
	{
		return parse_csv($filename)  when /csv/i;
		return parse_html($filename) when /m?html/i;
		return parse_ofx($filename)  when /ofx|qfx/i;
		# otherwise ...
		die("don't know how to parse a .$1 file");
	}
}

# This is used by some of the parse functions.
sub generate_seq_and_id
{
	my (@rows) = @_;

	# if we don't have times, make faux sequence numbers
	# have to reverse the rows to make them be in the right order ...
	# ... and then have to reverse them _again_ in order to be in the order the output expects
	my %dates;
	@rows = reverse apply { $_->{seq} = ++$dates{$_->{date}} } reverse @rows;

	# now that we have sequence numbers, we can fake up some ids
	$_->{id} = sprintf("%8d%03d", date($_->{date})->strftime("%Y%m%d"), $_->{seq}) foreach @rows;
	debuggit(6 => "all rows:", DUMP => \@rows);

	return @rows;
}

# This is an update of CSV::split(), from the old Barefoot libs.
sub csv_split (;$)
{
	my $line = @_ ? shift : $_;
	require Text::CSV or die("cannot load Text::CSV; install it?");

	my $csv = Text::CSV->new;
	die("cannot parse line: " . $csv->error_diag) unless $csv->parse($line);
	return $csv->fields;
}

sub parse_csv
{
	my ($file) = @_;

	my (@rows, %ids);
	my $headers_seen = 0;
	my $bank;
	foreach ($file->slurp)
	{
		chomp;
		my @fields = csv_split;

		if (not $headers_seen)
		{
			say join("\t", @fields) if $OPT{H};
			$headers_seen = 1;
			$bank = $fields[-1] eq 'Balance' ? 'discover' : 'ally';
			next;
		}

		if ($bank eq 'ally')
		{
			my $id = datetime("@fields[0,1]")->epoch;	# should be good enough for a unique ID
			--$id while $ids{$id};						# tweak ID if we get a duplicate
			$ids{$id} = 1;
			push @rows, [$id, @fields];
		}
		elsif ($bank eq 'discover')
		{
			# Transaction Date,Transaction Description,Transaction Type,Debit,Credit,Balance
			my ($date, $descr, $type, $debit, $credit, $balance) = @fields;
			next unless $balance;										# rows with no balance are "pending"
			my $trans = { date => $date, ttype => $type, desc => $descr };
			$trans->{amt} = ($credit ? $credit : "-$debit") =~ s/\$//r;
			push @rows, $trans;
		}
		else
		{
			die("don't recognize CSV format");
		}

	}
	given ($bank)
	{
		return @rows when 'ally';
		when ('discover')
		{
			# add the seq and id fileds, then turn the hashrefs into arrayrefs
			return map { [ @$_{qw< id date seq amt ttype desc >} ] } generate_seq_and_id(@rows);
		}
		# otherwise
		die("weird bank [$bank]");
	}
}

sub parse_html
{
	my ($file) = @_;
	require HTML::TreeBuilder        or die("cannot load HTML::TreeBuilder; install it?");
	require HTML::TableContentParser or die("cannot load HTML::TableContentParser; install it?");

	my $contents = path($file)->slurp;
	my $table = first { $_->{class} =~ /account.table/ } @{ HTML::TableContentParser->new->parse( $contents ) }
			or die("cannot determine which HTML table is the account table!");

	my @headers = map { lc s/ /-/gr } map { $_->{data} } @{ $table->{headers} };
	debuggit(3 => "table headers:", DUMP => [@headers]);
	my (@trans, %details);
	while ( my ($i, $row) = each $table->{rows} )
	{
		next if $details{$i};						# skip details row, because we already handled those (below)
		my $date = extract_html_content_from_row( date => $row );
		next unless $date;							# "details" rows and a few others don't have dates; ignore those
		#next if blessed $date;						# pending rows have an element for a date (weirdly)

		# at this point, we've got a row that we need to extract data from
		my $details = $table->{rows}->[$i + 1];		# next row might be a "details" row ...
		debuggit(6 => "cells for [$date] row", $i, DUMP => $row, $details ? (DUMP => $details) : undef);
		$details{$i + 1} = 1, next
			if $row->{class} =~ /pending/;			# pending transactions are not particularly useful
		undef $details unless						# ... but only if its first cell has a "hidden" class
				$details->{cells}
			and $details->{cells}->[0]
			and $details->{cells}->[0]->{class}
			and $details->{cells}->[0]->{class} =~ /\bhidden\b/;
		$details{$i + 1} = 1 if $details;			# so we know to skip this row on the next go-round
		my $data = { date => $date };
		$data->{desc } = extract_html_content_from_row( inner_desc       => $row     ) =~ s/ =20//gr =~ s/(^ )|( $)//gr;
		$data->{amt  } = extract_html_content_from_row( amount_cell      => $row     ) =~ s/\$//r;
		$data->{ttype} = extract_html_content_from_row( transaction_type => $details );
		# if we couldn't get a transaction type, try to extract it from the description
		$data->{ttype} //=	first { !!$_ }
							  map { $data->{desc} =~ s/$_// && $1 }
								  (
									qr/\s+(Online Payment)\b/,
									qr/\b(ACH Withdrawal)\s*/,
									qr/\b(ACH Deposit) From\s+/,
									qr/^(?=(Check) )/,
									qr/^(?=(Transfer) )/i,
									qr/^(?=(Interest) Paid)/i,
									qr/\b(Zelle Payment)/i
								  );
		die("cannot figure out transaction type [$data->{desc}]") unless $data->{ttype};
		debuggit(5 => "cells for row", $i, ':', map { $_ => $data->{$_} } qw< date desc amt ttype >);
		push @trans, $data;
	}

	@trans = generate_seq_and_id(@trans);

	# now just turn the hashrefs into arrayrefs and we're all good
	return map { [ @$_{qw< id date seq amt ttype desc >} ] } @trans;
}

sub extract_html_content_from_row
{
	my ($type, $row) = @_;
	return unless $row->{cells};					# some rows are blank (i.e. no cells)
	my @cells = grep { $_->{data}    }				# some cells are blank (esp the 1st cell of "details" rows)
	                @{ $row->{cells} };
	$type =~ s/_/[ _-]/g;							# underscore might represent another separator
	my $match = qr/ \b $type \b /ix;
	debuggit(4 => "  using regex to find class:", $match);

	# start by looking for a cell that just has the given type as its class
	my $c = first { $_->{class} =~ /$match/ } grep { $_->{class} } @cells;
	return $c->{data} if $c and $c->{data};

	# next, let's see if we can find a span inside the data with the given type as its class
	my @data_html = map { HTML::TreeBuilder->new_from_content($_->{data}) } @cells;
	my $e = first { defined() } map { scalar $_->look_down( class => qr/$match/ ) } @data_html;
	debuggit(6 => "  extract html 2nd pass:", DUMP => $e);
	return $e->content->[0] if $e;					# there _should_ only be one match in this particular case

	# still no luck? guess we better scour the data for "col-xs" cells (whatever *that* is) and find
	# the one whose content matches the type we're looking for (sort of a header), then take the
	# _next_ content after that (which will be the value)
	my (undef, $d) =
		pairfirst { $a =~ /$match/                           }
			 grep { not blessed $_ and $_ !~ /^\s*=20\s*$/   }
		      map { @{ $_->content }                         }			# multiple matches expected for this one
		      map { $_->look_down( class => qr/\bcol-xs\b/ ) }
		            @data_html;
	return $d;										# defined or not, we're out of tricks
}

sub parse_ofx
{
	my ($file) = @_;
	require Finance::OFX::Parse::Simple or die("cannot load Finance::OFX::Parse::Simple; install it?");

	my (@rows, %dates);
	my $ofx = Finance::OFX::Parse::Simple->new->parse_file($file);
	die("cannot handle multiple accounts!") if @$ofx > 1;

	foreach (@{ $ofx->[0]->{transactions} })
	{
		$_->{seq} = ++$dates{$_->{date}};			# we don't have a time, so make a faux sequence number
		my $id = gen_ofx_id(@$_{qw< date amount name >});
		push @rows, [$id, @$_{qw< date seq amount trntype name >}];
	}
	return reverse @rows;
}

# The fact that I can't rely on my bank to produce the same FITID for the same
# transaction on consecutive downloads is ... troubling.  But it is what it is,
# so there's nothing for it but to make our own.
sub gen_ofx_id
{
	my ($date, $amount, $descr) = @_;
	require Digest::CRC or die("cannot load Digest::CRC; install it?");

	# Christy and I can't agree on what day we actually moved in, but this is
	# the date when I wrote the first blog post from the new house, so at the
	# very least we were well settled in by then.  And there will damn sure be
	# no financial transactions prior to the new house.
	state $EPOCH_DAY = date("12/5/2010");

	my $day_num = sprintf("%04d", date($date) - $EPOCH_DAY);
	my $cents   = sprintf("%05d", $amount * 100);
	my $digest  = Digest::CRC->new(type => "crc32")->add("$cents$descr")->hexdigest;
	return "$day_num-$digest";
}



sub is_debit
{
	my ($amount) = @_;
	return $amount =~ s/,//gr < 0;
}

sub derive_category_from
{
	my ($descr) = @_;

	foreach (keys %DESCRIPTIONS)
	{
		return $_ if $descr ~~ $DESCRIPTIONS{$_};
	}

	# can't find a match; just keep it at empty string
	return '';
}
