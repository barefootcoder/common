#! /usr/bin/env perl

use myperl::Script;
use autodie ':all';

use Date::Easy;
use Path::Class;


sub csv_split(;$);


my %DESCRIPTIONS =
(
	Paycheck		=>	[
							qr/N6723 CAMPUS EXP DIR DEP/i,
						],
	Mortgage		=>	[
							qr/bac home loans/i,
							qr/BANK OF AMERICA ONLINE PMT/i,
						],
	'Power/Heat'	=>	[
							qr/s ca edison/i,
							qr/southern cal gas/i,
						],
	Phone			=>	[
							qr/verizon/i,
							qr/asurion wireless/i,
						],
	'TV/Internet'	=>	[
							qr/directv\b/i,
							qr/time warner online/i,
							qr/spectrum/i,
							qr/netflix/i,
							qr/amazon digital svcs/i,
							qr/prime video/i,
						],
	Water			=>	[
							qr/golden state (water|wtr)/i,
						],
	Trash			=>	[
							qr/anderson rubbish/i,
						],
	House			=>	[
							qr/travis junge poo/i,
							qr/jessie flores/i,
							qr/fidelity nationa/i,
						],
	Cars			=>	[
							qr/carmax auto fin/i,
						],
	Insurance		=>	[
							qr/acsc-huon/i,
						],
	'Car Maint'		=>	[
							qr/CALIF DMV/i,
							qr/\bsmog\b/i,
						],
	Groceries		=>	[
							qr/trader joe's/i,
							qr/sprouts/i,
							qr/lassens/i,
							qr/smartnfinal/i,
							qr/ralphs/i,
							qr/costco whse/i,
							qr|cvs/pharmacy|i,
							qr/ocean park pharmacy/i,
						],
	Grooming		=>	[
							qr/supercuts/i,
						],
	Gas				=>	[
							qr/chevron/i,
							qr/shell (oil|service)/i,
							qr/USA 63216/i,
							qr/76.*oil/i,
						],
	Pets			=>	[
							qr/aquarium connectio/i,
							qr/THERESAS COUNTRY FEED/i,
						],
	School			=>	[
							qr/discovery cube/i,
							qr/school ?fees/i,
						],
	Entertainment	=>	[
							qr/studo movie gr/i,
							qr/simi valley 10 cinemas/i,
							qr/fandango/i,
							qr/video on demand/i,
							qr/universal cty/i,
							qr/CHUCK E CHEESE/i,
						],
	Books			=>	[
							qr/Audible/i,
						],
	'Eating Out'	=>	[
							qr/McDonald's/i,
							qr/Taco Bell/i,
							qr/Wendys/i,
							qr/Carl's Jr/i,
							qr/Jack in the Box/i,
							qr/Subway/i,
							qr/\bKFC\b/i,
							qr/Popeye's/i,
							qr/Freddys/i,
							qr/5Guys/i,
							qr/Domino's/i,
							qr/Toppers/i,
							qr/Little Caesars/i,
							qr/\bThe Hat\b/i,
							qr/Indian Haweli/i,
							qr/Szechuwan Garden/i,
							qr/\bBetos\b/i,
							qr/Yolandas/i,
							qr/Red Robin/i,
							qr/Panera/i,
							qr/Starbucks/i,
							qr/Baskin/i,
							qr/7-Eleven/i,
							qr/Simi Donuts/i,
							qr/Donuts Plus/i,
						],
	Personal		=>	[
							qr/PlayStation Network/i,
							qr/paypal inst xfer/i,
							qr/Treasured Memories/i,
							qr/noa coppa/i,
							qr/vito rest/i,
							qr/Smoke & Vape/i,
						],
	Charity			=>	[
							qr/Maximum Fun/i,
						],
	Debt			=>	[
							qr/CITI CARD ONLINE/i,
							qr/CHASE CREDIT/i,
							qr/AMZ[ _-]STORECA?RD/i,
							qr/PAYMENT FOR AMZ/i,
							qr/CITI AUTOPAY/i,
							qr/CHASE EPAY/i,
						],
	Reimburse		=>	[
							qr/sm city parking meters/i,
						],
	Fees			=>	[
							qr/Interest Paid/i,
						],
	Xfer			=>	[
							qr/internet transfer/i,
							qr/overdraft transfer/i,
						],
);


opts <<'-';
	[-F|-N|-g] <file>
	-F : family spending output (default: family finances output)
	-N : only show those lines that didn't get a category assigned
	-g : group expenses by category (default: one line per expense)
	reads transactions file (CSV from Ally)
	converts it to TSV for personal finance sheet
-


@ARGV or usage_error("must supply transaction file");
my $file = file(shift);
-r $file or fatal("can't open $file");

my $line;
my %categories;
foreach ($file->slurp)
{
	chomp;
	if (not $line++)
	{
		say join("\t", csv_split) unless $OPT{F};
		next;
	}

	my ($date,$time,$amount,$type,$descr) = csv_split;
	# time is useless
	# type is always either "Deposit" or "Withdrawal"
	# amount is always negative for withdrawals, positive for deposits

	my $category = derive_category_from($descr);
	my $source = $type eq 'Withdrawal' ? 'CC' : '???';
	my $who = '';									# might get set later
	my $what = $descr;								# just as the default

	given ($descr)
	{
		if ( $type eq 'Deposit' and $descr ~~ [ qr/Expensify/, qr/OPTUM BANK REIMBUR/, qr/ATM Fee Reimbursement/ ] )
		{
			$category = 'Reimburse';
		}

		if ( $descr eq 'PAYPAL INST XFER' and abs($amount) == 5 and date($date)->day <= 5 )
		{
			$category = 'Charity';
			$what = 'Patreon';
			$who = 'Christy';
		}

		when ( /Cardtronics/ and $amount =~ /^[23]00/ )
		{
			$category = 'Personal';
			$who = 'Buddy';
			$what = 'Lunch money';
		}

		when ( /^PAYPAL INST XFER/i )
		{
			$source = 'PayPal';
			$what = '<<PAYPAL>>' if $what eq $descr;
		}
		when ( /^TARGET/i )
		{
			$what = '<<TARGET>>' if $what eq $descr;
		}
		when ( /Wal-Mart/i )
		{
			$what = '<<WAL-MART>>' if $what eq $descr;
		}
		when ( /MICHAELS/i )
		{
			$what = "<<MICHAEL'S>>" if $what eq $descr;
		}
		when ( [ qr/99.CENTS/i, ] )
		{
			$what = '<<DOLLAR STORE>>' if $what eq $descr;
		}

		when ( $category ~~ ['Eating Out', qw< Charity Personal >] )
		{
			foreach ( @{ $DESCRIPTIONS{$category} } )
			{
				$what = s/\(.*?:(\\b)?(.*?)(\\b)?\)/$2/r if $descr =~ /$_/;
			}
			$what .= ' Robbins' if $what eq 'Baskin';
			$what  = 'Nintendo' if $what eq 'noa coppa';
			$who =	{
						'Treasured Memories'	=>	'Christy',
						Panera					=>	'Christy',
						Starbucks				=>	'Christy',
						'PlayStation Network'	=>	'Perrin',
						Nintendo				=>	'Perrin',
						'Smoke & Vape'			=>	'Buddy',
					}->{$what} // '';
		}

		when ( /STUDIO MOVIE GR/ )
		{
			$what = 'Studio Movie Grill';
			$who = 'family';
		}

	}

	if ($OPT{F})
	{
		$amount = -$amount if $type eq 'Withdrawal';
		$amount = round($amount);
		say join("\t", $what,$who,$amount,$source,$date)
				if $category ~~ [ 'Personal', 'Charity', 'Entertainment', 'Eating Out', '' ];
	}
	elsif ($OPT{g})
	{
		$categories{$category} += $amount;
	}
	else
	{
		my $display = 1;
		$display = 0 if $OPT{N} and $category;
		say join("\t", $date,$time,$amount,$type,$descr,$category) if $display;
	}
}

if ($OPT{g})
{
	printf "%-20s  ::  %8.2f\n", $_ || '<UNKNOWN>', $categories{$_} foreach sort keys %categories;
}


########
# SUBS #
########

# This is an update of CSV::split(), from the old Barefoot libs.
sub csv_split (;$)
{
	my $line = @_ ? shift : $_;
	require Text::CSV or die("cannot load Text::CSV; install it?");

	my $csv = Text::CSV->new;
	die("cannot parse line: " . $csv->error_diag) unless $csv->parse($line);
	return $csv->fields;
}


sub derive_category_from
{
	my ($descr) = @_;

	foreach (keys %DESCRIPTIONS)
	{
		return $_ if $descr ~~ $DESCRIPTIONS{$_};
	}

	# can't find a match; just keep it at empty string
	return '';
}
