#! /usr/bin/env perl

use myperl::Script;
use autodie ':all';

use Date::Easy;
use Path::Class::Tiny;


sub csv_split(;$);


my %DESCRIPTIONS =
(
	Reserve			=>	[
							qr/N6723 CAMPUS EXP DIR DEP/i,
							qr/N6723 ARCHER EDU DIR DEP/i,
							qr/Interest Paid/i,
							qr/internet transfer/i,
							qr/booster transfer/i,
							qr/requested transfer/i,
							qr/overdraft transfer/i,
						],
	Mortgage		=>	[
							qr/BAC Home Loans/i,
							qr/Bank of America Online Pmt/i,
						],
	'Power/Heat'	=>	[
							qr/S CA Edison/i,
							qr/Southern Cal Gas/i,
						],
	Phone			=>	[
							qr/Verizon/i,
							qr/asurion wireless/i,
							qr/Google Fi/i,
						],
	'TV/Internet'	=>	[
							qr/DirecTv\b/i,
							qr/Uverse Online/i,
							qr/Time Warner Online/i,
							qr/Spectrum/i,
							qr/Netflix/i,
							qr/(amazon|amzn) digit(al)?/i,
							qr/Prime Video/i,
							qr/HBOMax/i,
							qr/Hulu/i,
							qr/CBS All Access/i,
							qr/Philo/i,
							qr/DisneyPlus/i,
							qr/Sling.com/i,
							qr/DisneyPlus/i,
						],
	Water			=>	[
							qr/Golden State (Water|Wtr)/i,
						],
	Trash			=>	[
							qr/Anderson Rubbish/i,
							qr/Waste Management/i,
						],
	House			=>	[
							qr/BRETT MORGAN/i,
							qr/carlos ortega/i,
							qr/jessie flores/i,
							qr/fidelity nationa/i,
						],
	Cars			=>	[
							qr/Carmax Auto Fin./i,
						],
	Insurance		=>	[
							qr/acsc-huon/i,
						],
	'Car Maint'		=>	[
							qr/CALIF DMV/i,
							qr/\bsmog\b/i,
							qr/AUTO CLUB SO CAL/i,
						],
	Groceries		=>	[
							qr/Trader Joe's/i,
							qr/Sprouts\b/i,
							qr/Sprouts Farmers/i,
							qr/Lassens/i,
							qr/SmartNFinal/i,
							qr/Smart and Final/i,
							qr/StaterBros/i,
							qr/Ralphs/i,
							qr/Albertsons/i,
							qr/Costco Whse/i,
							qr/Costco\.com/i,
							qr/Costco by Instacart/i,
							qr/Imperfect Foods/i,
							qr/Pure Indian Foods/i,
							qr/Bennets_Honey_Farm/i,
						],
	Health			=>	[
							qr|CVS/Pharmacy|i,
							qr/CVS\.com/i,
							qr/Walgreens/i,
							qr/Ocean Park Pharmacy/i,
							qr/WW INT'L/i,
						],
	Grooming		=>	[
							qr/SuperCuts/i,
							qr/Body Positive/i,
						],
	Travel				=>	[
							qr/chevron/i,
							qr/shell (oil|service)/i,
							qr/exxon/i,
							qr/USA 63216/i,
							qr/HD Fuel/i,
							qr/76.*oil/i,
							qr/Arco/i,
							qr/gse 76/i,
							qr/moller retail/i,
							qr/Costco Gas/i,
						],
	Pets			=>	[
							qr/Aquarium Connect./i,
							qr/Theresas Country Feed/i,
							qr/Valley Veterinary/i,
							qr/Chewy\.?com/i,
						],
	School			=>	[
							qr/discovery cube/i,
							qr/UNDERWOOD FAMI/i,
							qr/Santa Barbara Zoo/i,
							qr/DojoBoom/i,
							qr/school ?fees/i,
							qr/MOORPARK COL BKSTOR/i,
							qr/Los Angeles Zoo/i,
							qr/T\.O\. E-LIBRARY/i,
						],
	Entertainment	=>	[
							qr/Studio Movie Gr/i,
							qr/Simi Valley 10 Cinemas/i,
							qr/Fandango/i,
							qr/Video on Demand/i,
							qr/Universal Cty/i,
							qr/Six Flags/i,
							qr/Chuck E Cheese/i,
							qr/^D&B /i,
							qr/Great Wolf Lodge/i,
							qr/GG Delivers/i,
						],
	Books			=>	[
							qr/Audible/i,
							qr/Kindle/i,
						],
	'Eating Out'	=>	[
							qr/McDonald's/i,
							qr/Taco Bell/i,
							qr/Wendy'?s/i,
							qr/Carl'?s Jr/i,
							qr/Jack in the Box/i,
							qr/Subway/i,
							qr/In N Out/i,
							qr/\bKFC\b/i,
							qr/Popeye'?s/i,
							qr/SMART MANAGEMENT & CO/i,
							qr/Freddy'?s/i,
							qr/5Guys/i,
							qr/Burgerim/i,
							qr/Domino'?s/i,
							qr/Toppers/i,
							qr/Ameci/i,
							qr/Presto Pasta/i,
							qr/Little Caesars/i,
							qr/Panda Express/i,
							qr/Great Steak Hoagie/i,
							qr/\bThe Hat\b/i,
							qr/^Habit\b/i,
							qr/Golden Tiger/i,
							qr/Indian Haweli/i,
							qr/FunBurger/i,
							qr/Baja Fresh/i,
							qr/118 Cafe/i,
							qr/Szechuwan Garden/i,
							qr/Guido['`]s Pizza/i,
							qr/Red's BBQ/i,
							qr/Michael Ds/i,
							qr/\bBeto.?s\b/i,
							qr/Viva la Pasta/i,
							qr/Yolandas/i,
							qr/Outback/i,
							qr/Junkyard/i,
							qr/Sharky's/i,
							qr/Thai House/i,
							qr/Bollywood Indian/i,
							qr/Fire Island Grill/i,
							qr/Red Robin/i,
							qr/Eggs N Things/i,
							qr/Hook Burger/i,
							qr/Panera/i,
							qr/Corner Bakery/i,
							qr/Lucky'?s Dog House/i,
							qr/Starbucks/i,
							qr/Baskin/i,
							qr/Tutti Frutti/i,
							qr/7-Eleven/i,
							qr/Simi Donuts/i,
							qr/Donuts Plus/i,
							qr/Dairy Queen/i,
						],
	Personal		=>	[
							qr/PlayStation Network/i,
							qr/paypal inst xfer/i,
							qr/Kickstarter/i,
							qr/Treasured Memories/i,
							qr/Jimmy Beans Wool/i,
							qr/Joann\b/i,
							qr/HobbyLobb/i,
							qr/Quilty Pleasures/i,
							qr/noa coppa/i,
							qr/vito rest/i,
							qr/Urban Plate/i,
							qr/Hopdoddy/i,
							qr/Smoke & Vape/i,
							qr/Dropbox/i,
							qr/Miniature Market/i,
							qr/TrollAndToad/i,
							qr/ONEBOOKSHELF.COM/i,
							qr/Nintendo/i,
							qr/GameStop/i,
							qr/Kopy King/i,
							qr/MP3VA.com/i,
							qr/OFFICE DE\b/i,
							qr/parking.*playa vista/i,
						],
	Charity			=>	[
							qr/Maximum Fun/i,
							qr/Patreon/i,
						],
	Debt			=>	[
							qr/CITI CARD ONLINE/i,
							qr/Chase Credit/i,
							qr/AMZ[ _-]STORECA?RD/i,
							qr/PAYMENT FOR AMZ/i,
							qr/CITI AUTOPAY/i,
							qr/CHASE EPAY/i,
						],
	'Professional Fees'=>	[
							qr/HLW Tax/i,
						],
	Reimburse		=>	[
							qr/SM City Parking Meters/i,
							qr/OPTUM BANK REIMBUR/i,
							qr/VENTURA CO CCD/i,
							qr/SOL RESTAURANTS/i,
							qr/TONY PS DOCKSIDE/i,
						],
);

my %WHAT_LOOKUP =
(
	'N6723 CAMPUS EXP DIR DEP'	=>	'Paycheck',
	'N6723 ARCHER EDU DIR DEP'	=>	'Paycheck',
	'BAC Home Loans'			=>	'Mortgage Payment',
	'S CA Edison'				=>	'Electric Bill',
	'Golden State (Water|Wtr)'	=>	'Water Bill',
	'BRETT MORGAN'				=>	'Pool Guy',
	'jessie flores'				=>	'Gardeners',
	'carlos ortega'				=>	'Gardener',
	'fidelity nationa'			=>	'Warranty Company',
	'Sprouts Farmers'			=>	'Sprouts',
	'Baskin'					=>	'Baskin Robbins',
	'SMART MANAGEMENT & CO'		=>	'Arbys',
	'acsc-huon'					=>	'AAA Car Insurance',
	'CITI AUTOPAY'				=>	'Costco CC',
	'AMZ[ _-]STORECARD'			=>	'Amazon Credit Card',
	'SM City Parking Meters'	=>	'Parking Meters',
	'noa coppa'					=>	'Nintendo',
	'MOORPARK COL BKSTOR'		=>	'College Bookstore',
	'Body Positive'				=>	'Yoga Club',
	'OPTUM BANK REIMBUR'		=>	'HSA Reimbursement',
	'GG Delivers'				=>	'Recreational',
	'VENTURA CO CCD'			=>	'Moorpark College',
	'UNDERWOOD FAMI'			=>	'Underwood Farms',
	'SOL RESTAURANTS'			=>	'Sol (Work Team Lunch)',
	'TONY PS DOCKSIDE'			=>	"Tony P's (Work Team Lunch)",
	'ONEBOOKSHELFCOM'			=>	"DriveThruRPG []",
	'Uverse Online'				=>	'DirecTv',
	'AUTO CLUB SO CAL'			=>	'AAA (Roadside Assistance)',
	'OFFICE DE'					=>	'Office Depot',
	'^D&B '						=>	"Dave & Buster's",
	'T.O. E-LIBRARY'			=>	'Library (TO)',
	"WW INT'L"					=>	'Weight Watchers',
	'JUNKYARD'					=>	'Junkyard Cafe',
	'Imperfect Foods'			=>	'Veggie box',
);


opts <<'-';
	{ [-F|-B] [-N] [-a<id>] [-H] | -g } <file>
	-F : family spending output (default: family finances output)
	-B : new Budget sheet categorization output
	-N : only show those lines that didn't get a category assigned
	-a : only show transactions after <id> (and before midnight)
	-H : show header line (default: don't)
	-g : group expenses by category (default: one line per expense)
	reads transactions file (CSV from Ally)
	converts it to TSV for personal finance sheet(s)
-


@ARGV or usage_error("must supply transaction file");
my $file = file(shift);
-r $file or fatal("can't open $file");

my $line;
my %ids;
my %categories;
my $count = 0;
foreach ($file->slurp)
{
	chomp;
	if (not $line++)
	{
		say join("\t", csv_split) if $OPT{H};
		next;
	}

	my ($date,$time,$amount,$type,$descr) = csv_split;
	# time is useless
	# type is always either "Deposit" or "Withdrawal"
	# amount is always negative for withdrawals, positive for deposits

	my $category = derive_category_from($descr);
	my $source = $type eq 'Withdrawal' && $descr !~ /check.*#/i ? 'CC' : 'Check';
	my $who = '';									# might get set later
	my $what = $descr;								# just as the default
	my $id = datetime("$date $time")->epoch;		# should be good enough for a unique ID
	# tweak ID if we get a duplicate
	--$id while $ids{$id};
	$ids{$id} = 1;

	if ($OPT{a})
	{
		next if $id >= datetime("midnight");
		next unless $id > $OPT{a};
	}

	given ($descr)
	{
		if ( $type eq 'Deposit' and $descr ~~ [ qr/Expensify/, qr/OPTUM BANK REIMBUR/, qr/ATM Fee Reimbursement/ ] )
		{
			$category = 'Reimburse';
		}

		if ( $descr eq 'PAYPAL INST XFER' and abs($amount) == 5 and date($date)->day <= 5 )
		{
			$category = 'Charity';
			$what = 'Patreon';
			$who = 'Christy';
		}

		when ( /Cardtronics/ )
		{
			$what = 'Petty Cash';
		}
		when ( 'Interest Paid' )
		{
			$category = 'Bank Fees';
			$source = 'Electronic';
		}
		when ( /(Internet|Requested) Transfer/i )
		{
			$what = 'Account Transfer';
			$source = 'Electronic';
		}
		when ( /^TFR-/ )
		{
			$source = 'Overdraft';
			$category = 'Reserve';
		}

		when ( /^PAYPAL INST XFER/i or /IAT PAYPAL/i )
		{
			$source = 'PayPal';
			$what = '<<PAYPAL>>' if $what eq $descr;
		}
		when ( /AMAZON/i or /AMZN/i or /Prime Video/i or /Audible/i )
		{
			$source = 'Amazon';
			if ($category eq 'TV/Internet')
			{
				given (abs($amount))
				{
					$what = 'Video rental:'	when $_ < 6;
					$what = 'Starz' 		when $_ < 9;
					$what = 'Showtime' 		when $_ < 11;
					$what = 'HBO'			when $_ < 15;
					$what = 'Movie purchase:';
				}
				$category = "Entertainment" if $what =~ /:$/;
			}
			elsif ($category eq 'Books')
			{
				$what = /Audible/i ? 'Audible (subscription)' : 'Kindle book';
			}
			$what = 'Amazon []' if $what eq $descr;
		}
		when ( /^Kindle/i )
		{
			$source = 'Amazon';
			$what = 'Kindle';
		}
		when ( /^TARGET/i )
		{
			$what = 'Target []' if $what eq $descr;
		}
		when ( /Wal-Mart/i or /WM SUPERCENTER/i )
		{
			$what = 'Wal-Mart []' if $what eq $descr;
		}
		when ( /MICHAELS/i )
		{
			$what = "Michael's []" if $what eq $descr;
		}
		when ( [ qr/99.CENTS/i, qr/DOLLAR TR/i, ] )
		{
			$what = 'Dollar Store []' if $what eq $descr;
		}

		when ( /STUDIO MOVIE GR/ )
		{
			$what = 'Studio Movie Grill';
			$who = 'family';
		}

		when ( /parking.*playa vista/i )
		{
			$what = 'Lunch parking';
			$who = 'Buddy';
		}
		when ( /^DRIVETHRU\b.*GA/ )
		{
			$what = 'DriveThruRPG';
			$category = "Personal";
			$who = 'Buddy';
		}

		when ( [ qr/THOUSAND OAKS 14/i, qr/AMC ONLINE/i, ] )
		{
			$what = 'Movie Theater';
			$who = 'family';
		}

		when ( $category eq 'Travel' )
		{
			$what = 'Misc Gas Station';
		}

		default
		{
			foreach ( @{ $DESCRIPTIONS{$category} } )
			{
				$what = s/\(.*?:(\\b)?(.*?)(\\b)?\)/$2/r =~ s/(?<!\\)[.?*^]//gr =~
						s/(?<!\\)\[(.).*\]/$1/gr =~ s/\\//gr if $descr =~ /$_/;
			}
			$what = $WHAT_LOOKUP{$what} // $what;
			$who  = {
						'Treasured Memories'	=>	'Christy',
						'Jimmy Beans Wool'		=>	'Christy',
						Panera					=>	'Christy',
						Starbucks				=>	'Christy',
						'PlayStation Network'	=>	'Perrin',
						Nintendo				=>	'Perrin',
						'Smoke & Vape'			=>	'Buddy',
						'MP3VA.com'				=>	'Buddy',
						Dropbox					=>	'Buddy',
						'DriveThruRPG []'		=>	'Buddy',
					}->{$what} // '';
			# high-dollar 7-11 is gas, not food
			$category = 'Travel' if $what eq '7-Eleven' and abs($amount) >= 30;
		}

	}

	my $display = 1;
	$display = 0 if $OPT{N} and $category;
	if ($OPT{F})
	{
		$amount = -$amount if $type eq 'Withdrawal';
		$amount = round($amount);
		$display = 0 unless $category ~~ [ 'Personal', 'Charity', 'Entertainment', 'Eating Out', '' ];
		say join("\t", $what,$who,$amount,$source,$date) if $display;
	}
	elsif ($OPT{B})
	{
		say join("\t", $id,$amount,$what,$category,$source,$who) if $display;
	}
	elsif ($OPT{g})
	{
		$categories{$category} += $amount;
	}
	else
	{
		say join("\t", $id,$date,$time,$amount,$type,$descr) if $display;
	}
	++$count;
}

if ($OPT{g})
{
	printf "%-20s  ::  %8.2f\n", $_ || '<UNKNOWN>', $categories{$_} foreach sort keys %categories;
}
else
{
	say STDERR "transaction rows: $count";
}


########
# SUBS #
########

# This is an update of CSV::split(), from the old Barefoot libs.
sub csv_split (;$)
{
	my $line = @_ ? shift : $_;
	require Text::CSV or die("cannot load Text::CSV; install it?");

	my $csv = Text::CSV->new;
	die("cannot parse line: " . $csv->error_diag) unless $csv->parse($line);
	return $csv->fields;
}


sub derive_category_from
{
	my ($descr) = @_;

	foreach (keys %DESCRIPTIONS)
	{
		return $_ if $descr ~~ $DESCRIPTIONS{$_};
	}

	# can't find a match; just keep it at empty string
	return '';
}
