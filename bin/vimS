#! /bin/bash

. ~/bin/bash_funcs

# restore a vim session, only *exactly* like it was before
#
#
# **ALERT!!**
#
# As newer and newer versions of `vim` have come out, loading a sessionfile has become less and less
# useful--that is, a restored session in a newer `vim` is even *less* like the original session than
# it was in older `vim`s.  This is remarkably frustrating, and has led to deeper and deeper hacks in
# this script, until I finally decided to rewrite the whole thing altogether, and then before I
# could finish that effort the situation got even *worse.*  At this point, the advantages that
# loading a `vim`-created sessionfile provide are *vastly* outweighed by the disadvantages.
#
# So we're doing something completely different.
#
# I'm just going to make my own format of "sessionfile."  I refer to this format as a "session
# template," partially just to make it clear which type of file we're talking about, and partially
# because I use it a bit like a template, to generate an actual sessionfile--not as complete as a
# standard `vim`-created sessionfile, but serving the same purpose.  The session template won't
# bother to try to restore most of the stuff that the sessionfile did, because I never cared about
# most of that stuff anyway.  It will *only* try store three things, at least for now, plus a fourth
# soon(ish):
#
# FILES:
# Which files are loaded, what order they are loaded in, what directory any relative paths are
# relative to, and which files are current (`%`) and alternate (`#`).  Traditional `vim`
# sessionfiles are good at the first one of those, okay at the third, and have never bothered with
# the fourth at all.  As for the second, the situation used to be sort of okay (and making it better
# was the original raison d'Ãªtre for this script), but now (as of vim 8.x) has devolved to the point
# where it changes the order all the time, depending on what the current file is when you save the
# session.  For the session template, all I have to do is parse the output of `:files` and call it a
# day.
#
# MAPS:
# What key mappings *have been added or updated* in this session.  Standard `vim` sessionfiles only
# track _all_ mappings.  This may seem like a decent compromise, until I start adding new mappings
# (e.g.  in my `~/.exrc`) that I want available everywhere and then realize that I have dozens of
# existing sessionfiles that will never get those updates.  Sometimes I can just `:source ~/.exrc`
# after loading an old session, but I've also inadvertently wiped out added mappings that way (e.g.
# if I had reused the same key for a new mapping, perhaps because the original mapping wasn't
# relevant to that particular session).  This is tricky to solve; what I actually need to do is save
# the set of mappings from a bare `vim` (with no session), then compare that to the set of mappings
# at end-of-session.  In both cases, I need to parse a sessionfile; originally I considered pulling
# the mappings from the output of `:map`, because sessionfiles don't properly escape special
# characters.  But `:map` output turned out to be worse, as it was too hard to figure out which of
# the 80 million variations of `map` (e.g. `nmap`, `vmap`, `omap`, `nnoremap`, etc) corresponded to
# each line of the output.  Sessionfiles at least get _that_ part right, plus they require no
# parsing *other* than fixing the special characters (which is admittedly annoying, but in the end
# doable).
#
# FUNCTIONS:
# It's rare that I define functions in `vim`, but it does happen.  Typically, sessionfiles keep
# track of these pretty well, but every once in a while they will inexplicably disappear.  As a
# result, I usually maintain function defs in a separate file anyhow, just in case I need to
# redefine them.  Thus, functions can be manually added to a session template, and must be also
# manually mantained therein.  It's rare enough that that's not much of a downside though.
#
# MARKS:
# What local marks (that is, those marks which are designated by lower-case letters) are in effect
# for a given file.  Sessionfiles don't bother to store this _at all_, which is very frustrating.
# However, to be fair, it is quite difficult to do properly, since you need to save the marks
# separately for each file, and there can be many, many files.  Consequently the first cut will omit
# this part, and hopefully I can come up with a good idea for the second major version.
#
# I'm irked that I have to put this much work into essentially recreating what `vim` should be doing
# already.  But it is what it is.
#
# This original script will still handle old-format files for those cases where I haven't converted
# everything over yet.  I'm also going to leave (at least for now) the logic for _finding_ the
# sessionfiles, editing them, etc.  None of that will change: I'll just use a new extension and,
# when a file with that extension is detected, it can hand off processing to a separate script.
#
# The remainder of this script (including the extensive comments below) really have to do more with
# the old format.  For full details on the new format and its algorithms, please see `vim-session`.
#
#
#
# **ORIGINAL COMMENTS AND SCRIPT FOLLOW**
#
#
#
# Normally, using `vim -S sessionfile` leaves buffer #1 empty, and starts loading files at buffer
# #2.  When searching for solutions for this online, most people advised that you shouldn't really
# care (or rely on) which files were set to which buffers.  However, I find that, after working with
# a certain set of files for a long time, your fingers grow accustomed to Ctrl-^ 3 being a certain
# file, and when the buffers get renumbered, you have to retrain your fingers.  Why kill your
# productivity this way?
#
# Plus the problem is very simple to fix.  When you do `vim -S sessionfile`, the first thing vim is
# doing (apparently) is loading an empty buffer (exactly as if you'd done just `vim`).  Then, as it
# goes through the `badd` commands in the sessionfile, it starts opening files, with the first one
# starting at buffer #2.  There is also an `args` command in the sessionfile, which contains the
# very first file (i.e., the one you initiated the whole session with by typing `vim first_file` in
# the first place), but this doesn't seem to help fix the buffer numbering problem.  (Alert readers
# of their sessionfiles will note that the `args` tends to come _after_ all the `badd`s; however,
# moving the `args` up ahead of all the `badd`s doesn't change anything.)
#
# So the solution is to simply use `vim -S sessionfile first_file` instead.  Of course, this
# requires that you remember which file was first.  You probably do, of course: if your fingers
# weren't trained to know which file was Ctrl-^ 1, you wouldn't be so desperate to get the damn
# numbering right in the first place.  However, it might be a long pathname, and who wants to type
# that every time?  But, of course, as we've already mentioned, that filename
# is right there, in the sessionfile, under the `args` command ...
#
# Other tricky bits:
#	*	vim will change to the directory specified in the "cd" line of the session file.  However,
#		if the "args" file is a relative path, that's too late for the first buffer.  So we should
#		pull out the "cd" line and go there first.
#	*	Environment variables in "badd" lines are okay; vim will expand them.  But in the "args"
#		line, we'll have to expand that ourselves.  Also, there might be tildes which need expanding
#		(this applies to the "cd" line as well).  Thus the `eval`s below.
#	*	Newer versions of `vim` use `argadd` instead of `args`.  So we search for either.
#	*	We have to `eval` the `cd` line, because the directory might contain a `~` (or other thing
#		that needs expansion, but mainly tildes).
#	*	vim has the annoying habit of changing the `cd` line by replacing the directory with its
#		`realpath`.  Since the same path can by symlinked to different places on different machines,
#		this is pretty tragic.  Thus, we need to put the directory back like it was prior to the
#		`vim` command afterwards.  Happily, since we pulled it out at the beginning (see point #1
#		above), we can easily put it back.

for prefix in ~/.vimS- ~/vimS/ ~/local/data/vimS/ ~/proj/vimS/ ./vimS/
do
	prefixes="$prefixes $prefix"
done

grepargs=-lP
while getopts ":lg:G:venh" opt
do
	case $opt in
		l)	list=yes
			;;
		g)	pattern="^badd .*$OPTARG"
			;;
		G)	pattern="$OPTARG"
			;;
		v)	verbose=yes
			grepargs=-hP
			;;
		e)	edit=yes
			;;
		n)	local=yes
			;;
		h)  echo "usage: $me -h | -l[v] | -[v]g <pattern> | -[v]G <pattern> | -e <file> | [-n] <file>" >&2
			echo "    -l : list all possible session files" >&2
			echo "    -g : list possible session files which load a file matching <pattern> (Perl regex)" >&2
			echo "    -G : list possible session files which have <pattern> anywhere in them (Perl regex)" >&2
			echo "    -v : with -l, display full pathnames of session files; with -g|-G, diplay full matching lines" >&2
			echo "    -e : instead of starting a vim session, edit the session file itself" >&2
			echo "         (with -l, edit all known vimS session files)" >&2
			echo "         (with -g, edit all matching vimS session files)" >&2
			echo "    -n : do not autosave the session (default: autosave any changes/new files)" >&2
			echo "    -h : this help message" >&2
			echo "    file : session file (or partial name)" >&2
			exit
			;;
		:)  usage_erorr "$OPTARG requires an argument"
			;;
		\?) usage_error "unknown argument $OPTARG"
			;;
	esac
done
shift $(( $OPTIND - 1 ))

if [[ $list || $pattern ]]
then
	[[ $list && $verbose ]] && echo "Name                 Aux?   Path"
	[[ $list && $verbose ]] && echo "============================================================================="

	function print_file
	{
		local base="$1"
		local file="$2"
		local aux

		if [[ ${file%%.(marks|funcs)} != $file && -e ${file%%.(marks|funcs)} ]]
		then
			continue
		fi

		if [[ $verbose ]]
		then
			[[ -r $file.funcs ]] && aux="${aux}F"
			[[ -r $file.marks ]] && aux="${aux}M"
			: ${aux:=.}
			printf "%-20s  %-2s    %s\n" $base $aux $file
		else
			echo $base
		fi
	}

	function handle_file
	{
		local base="$1"
		local file="$2"

		if [[ -d $file || $file == *.V || $file == *.V.bak ]]
		then
			# should be handled by `vim-session`
			continue
		fi

		if [[ $pattern ]]
		then
			if ! grep $grepargs -q "$pattern" "$file"
			then
				return
			fi
		fi

		if [[ $edit ]]
		then
			edit_files="$edit_files $file"
		elif [[ $pattern ]]
		then
			if [[ $verbose ]]
			then
				grep $grepargs "$pattern" "$file" | sed "s/^/$base:/"
			else
				echo $base
			fi
		else
			print_file $base $file
		fi
	}

	for file in ./*.vimS
	do
		if [[ $file != *"*"* ]]
		then
			handle_file "$(basename $file .vimS)" "$file"
		fi
	done
	for prefix in $prefixes
	do
		for file in $prefix*
		do
			if [[ $file != *"*" ]]
			then
				handle_file "${file##$prefix}" "$file"
			fi
		done
	done
	[[ $edit ]] && vi $edit_files
	exit
fi

[[ -n $1 ]] || usage_error "sessionfile arg required"


sessionfile=$1
if [[ ! -f $sessionfile && ! -f $sessionfile.V ]]
then
	sessionfile=$1.vimS
fi
if [[ ! -f $sessionfile && ! -f $sessionfile.V ]]
then
	for prefix in $prefixes
	do
		sessionfile=$prefix$1
		[[ -f $sessionfile || -f $sessionfile.V ]] && break
	done
fi

if [[ -f $sessionfile.V ]]
then
	exec vim-session $sessionfile.V
fi

if [[ ! -f $sessionfile ]]
then
	die "session file $1 not specified, doesn't exist, or is unreadable"
fi

if [[ $edit ]]
then
	vi +1 +/badd $sessionfile
	exit
fi

if [[ $local ]]
then
	tmpfile=/tmp/vimS.$$
	trap "/bin/rm -f $tmpfile" EXIT
	/bin/cp $sessionfile $tmpfile
	sessionfile=$tmpfile
fi

export VIM_SESSIONFILE_DIR=$(awk '$1 == "cd"' $sessionfile | sed 's/^cd //')
export VIM_SESSIONFILE_FILE1=$(perl -lne 'print $1 =~ s/ /\\\\ /gr and exit if /^badd\s+.\d+\s+(.*)/' $sessionfile)
eval cd "$VIM_SESSIONFILE_DIR"
arg=$(perl -nE '/^\$?arg(s|add)\h+(.*)$/ and say $2 =~ s/\\//gr' $sessionfile)
vim -S $sessionfile -c 'call LoadSessionAuxFiles()' "$arg"
proglet='
	BEGIN
	{
		sub expand { (glob shift)[0] }				# sometimes you have to glob just for the tildes ...
		use Cwd q<realpath>;
		$origdir = $ENV{VIM_SESSIONFILE_DIR};
		$filearg = $ENV{VIM_SESSIONFILE_FILE1};
		$expdir  = $origdir =~ s/\$(\w+)/$ENV{$1}/gr;
		$realdir = realpath(expand($expdir));
		@subdirs = map { realpath($_) } glob("$expdir/*");
		warn("missing! [$origdir||$expdir||$realdir]") unless $origdir and $expdir and $realdir;
		sub path_fixup
		{
			my $path = shift;
			my ($epath) = expand($path);
			my $newpath;
			if ( $path =~ m{^$expdir/} )
			{
				$newpath = $path =~ s{^$expdir}{}r;
			}
			elsif ( ($rpath = realpath($epath)) =~ m{^$realdir} )
			{
				$newpath = $rpath =~ s{^$realdir/}{}r;
			}
			else
			{
				foreach (@subdirs)
				{
					if ( $rpath =~ m{^$_} )
					{
						$rparent = s{/[^/]+$}{}r;
						$newpath = $rpath =~ s{^$rparent/}{}r;
						last;
					}
				}
			}
			# newpath if we made one, old path if not, escape the spaces unless they already are
			($newpath // $path) =~ s/(?<!\\) /\\ /gr;
		}
	}
	# most of this stuff is just cleaning up the mess vim itself makes of the sessionfile
	s/^\$//;
	($directive, $line, $file) = m{^(\w+)\h(?:[+-](\d+)\h)?(.+)$};
	if ($save)
	{
		unless ( $save eq $file )
		{
			$save = path_fixup($save);
			$arg //= $save;
			print "badd +1 $save\n";
		}
		undef $save;
	}
	$_ = "cd $origdir\n" and next if $directive eq "cd";
	if ( $directive eq "badd" )
	{
		undef $_, next if -d expand($file);
		$save = $file, $_ = "", next if $line == 1;
		$arg //= path_fixup($file) =~ s/ /\\ /gr;
	}
	$_ = ($filearg =~ / / ? q|$| : "") . "argadd $filearg\n" and next if $directive eq "argadd";
	s{\Q$file}{path_fixup($file)}e if $directive =~ /^(badd|edit)$/
			and $file =~ m{^[/~]};					# filename is absolute path
'
perl -i -pe "$proglet" $sessionfile
