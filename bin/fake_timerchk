#! /usr/bin/env perl

use myperl;
use autodie ':all';

use List::Util				qw< pairs unpairs pairmap pairgrep >;
use Date::Easy;
use PerlX::Maybe;

const my $FIRST_MON_OF_PANDEMIC    => date("3/16/2020");
const my $PANDEMIC_START_WEEKS_AGO => (today - $FIRST_MON_OF_PANDEMIC) / 7;


my $retval = 0;

my %accrued;
my $week = 0;
my $in_week = 0;
my @lunch;
while ( <> )
{
	next if /^$/;

	chomp;
	my ($name, $chunks, @stuff) = split("\t");
	$chunks ||= '';

	if ($name =~ /^:/)
	{
		if ($name eq ':AVAILABILITY')
		{
			my $lunch = $lunch[$week];
			if (ref $lunch and $week >= $PANDEMIC_START_WEEKS_AGO)		# we couldn't find a lunch timer for this week
			{
				my ($avail_from, $avail_to, @other) =
						pairgrep { $a->hour >= 12 || $b->hour >= 12   }
						         ( monday_chunks(split(',', $chunks)) )
				;
				warn("no Monday time in week $week") and next unless $avail_from;

				my $mark = $avail_from;
				my @gaps =
					map  { join(' ', $_->[1]->as("/mdy"), join(' - ', map { $_->as(":HM") } @$_[1,2]), "($_->[0])") }
					grep { $_->[2]->hour <= 14 }
					grep { $_->[0] > 45 }
					gaps ( $avail_from,
							pairgrep     { $b <= $avail_to }
							pairgrep     { $a >= $avail_from }
							monday_chunks( map { split(',') } @$lunch )
					)
				;
				say STDERR "no team lunch in week $week? [gaps: @gaps]" if @gaps;
			}
		}
	}
	elsif ($name =~ s/:$//)
	{
		$in_week = 0;
		# comments
		if (delete $accrued{$name} and not $chunks)
		{
			$retval = 1;
			say STDERR "timer $name in week $week [$.] needs a comment";
		}
	}
	else
	{
		my $line = $.;
		unless ($in_week)
		{
			$retval = 1, say STDERR "timer $_ in week $week [$line] lacks a description altogether" foreach keys %accrued;
			undef %accrued;
			$in_week = 1;
			++$week;
		}
		# regular timers (but don't count timer-fixes timers)
		if ($chunks)
		{
			$accrued{$name} = 1 if $name !~ /^timer-fixes/;
			my @chunks = verify_chunks($name => $chunks);
			# check Mondays
			my $first_start_date = datetime($chunks[0]->{start});
			if ($first_start_date->day_of_week == 1)						# i.e. Monday
			{
				# note if there's a lunch timer (or if Monday was a PTO day)
				$lunch[$week] = $name if $name eq 'lunch' or $name eq 'pto';
				# elsewise save chunks for later gap-checking
				$lunch[$week] //= [];
				push $lunch[$week], $chunks if ref $lunch[$week];
			}
			# check monday-mtg
			if ($name eq 'monday-mtg')
			{
				say STDERR "monday-mtg timer in week $week [$line] has non-Monday time"
						if grep { datetime($_->{start})->day_of_week != 1 } @chunks;
			}
		}
	}
}

exit $retval;


sub monday_chunks
{
	unpairs
	sort     { $a->[0] <=> $b->[0] }
	pairs
	pairgrep { $a->day_of_week == 1 }
	pairmap  { datetime($a), $b ? datetime($b) : now }
	map      { /(\d+)-(\d*)/ }
			   @_
}


sub gaps
{
	state $MIN_ACCEPTABLE_GAP = 5;					# i.e. 5 minutes
	my $mark = shift;
	my @gaps;
	pairmap {
				my $gap = round(UP => ($a->epoch - $mark->epoch) / 60);
				push @gaps, [ $gap => ($mark, $a) ] if $gap > $MIN_ACCEPTABLE_GAP;
				$mark = $b;
			} @_;
	return @gaps;
}


sub verify_chunks
{
	my ($name, $chunks) = @_;
	my @chunks = split(',', $chunks);

	my @parsed;
	for (@chunks)
	{
		my ($div, $start, $end) = m{(\d/)?(\d+)-(\d*)};
		say STDERR "negative chunk in week $week [timer: $name :: $_]" if $end and $start > $end;
		push @parsed, { start => $start, end => $end, maybe div => $div };
	}
	return @parsed;
}
