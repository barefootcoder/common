#!/usr/bin/env perl

use myperl::Script;
use autodie qw< :all >;

use Try::Tiny;
use Date::Easy;
use Path::Tiny;
use List::AllUtils qw< first apply >;


opts <<'-';
	[-v] { [-t <range>] | [-w<N>] } { [-e] <text-pattern> | -f <pattern-file> } <contact-pattern> [...]
	-v : verbose mode
	-t : limit results to timestamp <range> (parsed with Date::Easy; flexible separators)
	-w : -w<N> is a shortcut for -t'N weeks ago - today'
	-e : introduce <text-pattern> that starts with a `-' (or use `--' instead)
	-f : read patterns from <pattern-file>, one per line
	all patterns Perl-style regexen
	<text-pattern> automatically considered case-insensitive
	<pattern-file> patterns automatically considered literal (and case-sensitive)
-


my $range = $OPT{'t'} // ($OPT{'w'} ? "$OPT{'w'} weeks ago - today" : undef);
my ($start, $end) = validate_date_range($range);
say "# limiting results to $start through $end" if $start and $OPT{'v'};

my $pattern;
if ($OPT{'f'})
{
	$pattern = join('|', map { quotemeta } path($OPT{'f'})->lines_utf8({chomp => 1}));
}
else
{
	$pattern = $OPT{'e'} // shift // die("must supply pattern!");
}
$pattern = qr/$pattern/i;
my $contact_pattern = join('|', @ARGV);
say "# checking logs that match /$contact_pattern/" if $OPT{'v'};


my $start_year = $start ? $start->year : undef;
my (%lines, $curline, $curdate);
foreach my $dir (glob("~/.purple/logs/*/*/*"))
{
	next unless $dir =~ /$contact_pattern/o;
	if ($OPT{'v'})
	{
		my @parts = split('/', $dir);
		my ($contact, $protocol) = @parts[ -1, -3 ];
		say "# checking $contact (on $protocol)";
	}

	foreach my $file (glob("$dir/*"))
	{
		if ($start_year)
		{
			next unless $file =~ m{ / $start_year }xo;
		}

		foreach ( path($file)->lines_utf8 )
		{
			if ( /^\(\d/ )
			{
				process($file);
				$curline = $_;
			}
			elsif ( /^Conversation with/ )
			{
				($curdate) = / at (.*?\d{4}) /;
			}
			else
			{
				$curline .= $_;
			}

		}
		process($file);
		undef $curline; undef $curdate;
	}
}

debuggit(4 => "lines struct", DUMP => \%lines) if keys %lines;
print foreach
		map		{ join(':', @{$lines{$_}}, $_)										}
		apply	{ $lines{$_}->[1] = $lines{$_}->[1]->strftime("%Y/%m/%d %H.%M.%S")	}
		sort	{ $lines{$a}->[1] <=> $lines{$b}->[1]								}
				keys %lines;


sub validate_date_range
{
	my $range = shift;
	return (undef, undef) unless $range;
	my @SEPARATORS = ( ' - ', '—', '–', '-', '//' );

	my $sep = first { scalar @{[ $range =~ /$_/ ]} == 1 } @SEPARATORS;
	die("can't figure out how to split your time range into start/end!") unless $sep;
	return map { datetime($_) } split(/$sep/, $range);
}


sub process
{
	return unless defined $curline;
	local $_ = $curline;
	return unless /$pattern/;
	my $file = filename(shift);

	s/^\((.*?)\)//;
	$1 or die("line: $file:$_");
	my $timestamp = $1; $timestamp = "$curdate $timestamp" unless $timestamp =~ m|/|;
	try
	{
		$timestamp = datetime($timestamp);
	}
	catch
	{
		die("In $file: $_");
	};
	if ($start)
	{
		return unless $timestamp >= $start and $timestamp <= $end;
	}
	if (exists $lines{$_})
	{
		$lines{$_} = [ $file, $timestamp ] if $timestamp < $lines{$_}->[1];
	}
	else
	{
		$lines{$_} = [ $file, $timestamp ];
	}
}


sub filename
{
	shift =~ s|^/(.+?/){6}||r =~ s|^(.*?)@.*?(/.*)|$1$2|r =~ s|\.\d{6}-\d{4}[A-Z]{2}T\.txt$||r;
}
