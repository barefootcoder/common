#! /bin/bash

me=${0##*/}																# slightly prettier than $0
readonly me


function die
{
	echo "$me: $@" >&2
	exit 1
}

function usage_error
{
	echo "$me: $@" >&2
	exit 2
}


function capture_git
{
	do_git $pretend 0 "now running:" "$1"
}

function run_git
{
	do_git $pretend $pretend "would run:  " "$1"
}

function do_git
{
	local say_it=$1
	local skip_it=$2
	local msg=$3
	local cmd="git $4"
	[[ $say_it == 1 ]] && echo -e "\e[96m\e[1m$msg\e[0m\e[1m $cmd\e[0m" >&2
	[[ $skip_it == 0 ]]  && eval $cmd
}


function vc
{
	eval "local $(grep VCtoolsDir ~/.vctools/vctools.conf)"
	$VCtoolsDir/bin/vc "$@"
}

function Mainline
{
	vc info %Mainline
}

function current_branch
{
	branch=$(capture_git "branch --show-current")
	if [[ $branch == "" ]]
	then
		die "can't show branch logs with a detached HEAD"
	fi
	echo $branch
}


function branched_from
{
	branch="$1"
	# this will not work properly if a branch was somehow branched from multiple branches
	# however, I can't think how this could possibly happen
	# additionally, it might be slow for branches with lots and lots of commits
	local proglet='@b = grep { s/^  // } `git branch --no-color --contains $_` and print $b[0] and exit'
	capture_git "rev-list --no-merges HEAD | perl -lne '$proglet'"
}

function all_unpushed
{
	vc info %local_commits
}

cmd="log"

args=''
fmtarg='-s'
show_merges=0
show_branch=0
show_local=0
show_me=0
pretend=0
grep_diffs=0
date_format=human
while getopts ":vdscHDCNpbln:LmU:g:RGh" opt
do
	case $opt in
		v)	show_merges=1
			if [[ $fmtarg == "-s" ]]
			then
				fmtarg=''
			fi
			args="$args --stat"
			;;
		d)	if [[ $fmtarg && $fmtarg != "-s" ]]
			then
				usage_error "trying to use conflicting args (pick one of: -d/-s/-H/-c)"
			fi
			fmtarg="-p"
			if [[ $grep_diffs != 0 ]]
			then
				args="$args -G '$grep_diffs'"
			fi
			grep_diffs=1
			;;
		s)	if [[ $fmtarg && $fmtarg != "-s" ]]
			then
				usage_error "trying to use conflicting args (pick one of: -d/-s/-H/-c)"
			fi
			fmtarg="-s --oneline"
			;;
		H)	if [[ $fmtarg && $fmtarg != "-s" ]]
			then
				usage_error "trying to use conflicting args (pick one of: -d/-s/-H/-c)"
			fi
			fmtarg="-s --pretty='%h'"
			;;
		D)	case $fmtarg in
				-s)			# date is already included in default format
							;;
				'')			# also included when you show diffs (empty fmt == -v)
							;;
				*--oneline)	fmtarg="-s --pretty='%C(auto)%h %ad %s'"
							date_format=format:%Y-%m-%d_%H:%M:%S
							;;
				*--pretty*)	fmtarg="${fmtarg%\'} %ad'"
							date_format=format:%Y-%m-%d_%H:%M:%S
							;;
			esac
			;;
		c)	if [[ $fmtarg != "-s" ]]
			then
				usage_error "can't use -c with format args (-d/-s/-H/-v)"
			fi
			fmtarg="-s --oneline"
			post="wc -l"
			;;
		C)	args="$args --no-color"
			;;
		N)  show_merges=1
			post="perl -lpe 's/^((\e.+m)?(commit )?[0-9a-f]{7,})/sprintf(q{%3d %s}, ++\$n, \$1)/e' | ${PAGER:-less}"
			;;
		p)	pretend=1
			;;
		b)	show_branch=1
			;;
		L)	show_local=1
			;;
		l)	args="$args -n1"
			;;
		n)	args="$args -n$OPTARG"
			;;
		m)  show_me=1
			;;
		U)  args="$args --author $OPTARG"
			;;
		g)	if [[ $grep_diffs == 0 ]]
			then
				args="$args --grep '$OPTARG'"
			else
				args="$args -G '$OPTARG'"
			fi
			grep_diffs="$OPTARG"
			;;
		R)	args="$args --reverse"
			;;
		G)	date_format=raw
			;;
		h)  echo "usage: $me -h | [[-v] -{d|s|H} [-NDG] | -c] [-p] [-b | -L] [-l | -nX] [-m | -Uuser] [-g regex] [file ...]"
			echo "    -v : verbose (show files changed, include merge commits)"
			echo "    -d : show diffs of changed files"
			echo "    -s : show short (one-line) format for commits"
			echo "    -H : show only SHA1s (even shorter than short format)"
			echo "    -C : turn off color (useful for piping)"
			echo "    -N : number commits (first commit marked 1, second 2, etc; includes merge commits)"
			echo "    -D : display date for -s or -H format"
			echo "    -G : display dates in raw (epoch seconds + timezone) format"
			echo "    -c : don't show commits, just count them"
			echo "    -p : pretend (show git command to be run, but don't run it)"
			echo "    -b : show only commits on the current branch (no merges unless -v or -N)"
			echo "    -L : show only commits not yet pushed to server (no merges unless -v or -N)"
			echo "    -l : show only latest commit (same as -n1)"
			echo "    -n : show only X commits (default: show all)"
			echo "    -m : show only my commits (commits by current user)"
			echo "    -U : show only commits by user"
			echo "    -g : show only commits with log messages containing regex"
			echo "    -R : show commits in reverse order (oldest to newest; doesn't work across renames)"
			echo "    -h : this help message"
			echo "    user : either name or email; can be partial, but is case-sensitive"
			echo "    file : source file (default: entire working tree)"
			exit
			;;
		:)  usage_error "$OPTARG requires an argument ($me -h for help)"
			;;
		\?) usage_error "unknown argument $OPTARG ($me -h for help)"
			;;
	esac
done
shift $(( $OPTIND - 1 ))
   [[ $date_format != gmt ]] && args="$args --date=$date_format"
   [[ $show_me     == 1   ]] && args="$args --author $(capture_git "config user.email")"
   [[ $show_merges == 0   ]] && args="$args --no-merges"
if [[ $show_local  == 1   ]]
then
	cmd="show"
	commits=$(all_unpushed)
	[[ -z $commits ]] && exit						# no commits to show
	[[ $args == *--reverse* ]] && commits=$(echo $commits | tac -s' ')
	args="$args $commits"
fi
if [[ $show_branch == 1     ]]
then
	branch=$(current_branch)
	from=$(branched_from $branch)
	args="$args $from..$branch"
fi
if [[ $# -eq 1 && -r $1 && $args != *--reverse* ]]	# has to be a single file and not -R
then
	args="$args --follow"
fi


cmd="$cmd $fmtarg $args $*"
if [[ -n $post ]]
then
	cmd="$cmd | $post"
fi

[[ -t 1 && $pretend == 0 ]] && echo -e "\n\n\n\n"
run_git "$cmd"
