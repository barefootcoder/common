#! /bin/bash

me=${0##*/}
termprog=urxvt
force=0
set_echo=0
smaller=0
while getopts ":sSfD:xh" opt
do
	case $opt in
		s)	scaled=1
			;;
		D)	desktop=$(( $OPTARG - 1 ))									# because desktops really start at 0
			;;
		S)	smaller=1
			;;
		f)	force=1
			;;
		x)	set_echo=1
			;;
		h)	echo "usage: $me -h | [-sSf] [-D num] title pixmap geometry [cmd [args]]" >&2
			echo "    -s : scaled image (default: tiled)" >&2
			echo "    -S : smaller font (default: based on screen size)" >&2
			echo "    -f : force (create even if exists)" >&2
			echo "    -D : start term on this desktop (default: current)" >&2
			echo "    -h : this help message" >&2
			echo "  title      : title for term (will not create if exists unless -f)" >&2
			echo "  pixmap     : background image for term" >&2
			echo "  geometry   : window size/placement like WxH+Y+X" >&2
			echo "                where W is width in columns" >&2
			echo "                  and H is height in lines" >&2
			echo "                  and Y is pixels from top of screen" >&2
			echo "                  and X is pixels from left of screen" >&2
			echo "  cmd [args] : command to run in new term" >&2
			exit
			;;
		:)	echo "$me: $OPTARG requires an argument ($me -h for help)" >&2
			exit 2
			;;
		\?)	echo "$me: unknown argument $OPTARG ($me -h for help)" >&2
			exit 2
			;;
	esac
done
shift $(( $OPTIND - 1 ))

title=$1
pixmap=$2
geometry=$3
shift 3

# if a term with the given title already exists, don't create it again
term_pids="$(pgrep $termprog)"
if [[ -n $term_pids ]]
then
	if ps -wwwo cmd -p $term_pids | egrep "\<$title\>" >/dev/null 2>&1
	then
		if [[ ! $force -eq 1 ]]
		then
			echo "$me: term $title already exists; won't make another" >&2
			exit 1
		fi
	fi
fi

function locate_img
{
	image=$1
	shift
	for dir
	do
		patterns="$patterns $dir/$image.*"
	done

	for file in $(/bin/ls -1 $patterns 2>/dev/null | head -n1)
	do
		:
	done
	echo $file
}
if [[ $pixmap != "-" ]]
then
	img=$(locate_img $pixmap ~/local/data/term-bg /usr/share/Eterm/pix/scale /usr/share/Eterm/pix/tile)
	if [[ -z $img ]]
	then
		echo "$me: can't find image file for $pixmap" >&2
		exit 2
	fi
	pixmap=$img
fi

icondir=/usr/share/icons
for iconfile in Mint-X/apps/16/terminal.png gnome/16x16/apps/gnome-terminal.png
do
	iconfile="$icondir/$iconfile"
	if [[ -r $iconfile ]]
	then
		break
	fi
done

# figure out geometry/font adjustments
# get screen size
scrsize=$(xrandr -q 2>&1 | perl -lne 'if (/\*/){($s) = /(\d+\s*x\s*\d+)/; $s =~ s/ //g; print $s}elsif(/RandR extension missing/){print "VNC"}')
# figure proper font size
case $scrsize in
	*x768)		fontsize=11.5
				;;
	*x1024)		fontsize=13
				;;
	*x1200)		fontsize=14
				;;
	*x1050)		fontsize=15
				;;
	*x1080)		fontsize=16
				;;
	VNC)		# we've guessed VNC from the error message
				fontsize=2.5
				echo "in VNC"
				;;
	*)			echo "can't determine proper font size for this screen ($scrsize)" >&2
				exit 1
esac
[[ $smaller -eq 1 ]] && fontsize=$(( $fontsize - 2 ))

case $termprog in
	urxvt)
					[[ $pixmap == "-" ]] || image="-pixmap $pixmap"
					[[ -n $iconfile ]] && icon="-icon $iconfile"
					font_switch=-fn
					font="xft:Inconsolata:antialias=true:pixelsize=$fontsize"
					args="-title $title -name $title $image $icon -fg white -bg black -geometry $geometry -mod alt +sb"
					;;
	Eterm)
					if [[ $pixmap != "-" ]]
					then
						if [[ $scaled == 1 ]]
						then
							image="-P $pixmap@155x100:propscaled"
						else
							image="-P $pixmap@:tiled"
						fi
					fi
					if [[ -n "$desktop" ]]
					then
						args="-D $desktop $args"
					fi
					[[ -n $iconfile ]] && icon="-I $iconfile"
					#font_switch=-F
					#font="-*-andale mono-*-*-*-*-$fontsize-*-*-*-*-*-*-*"
					font_switch=--default-font-index
					font=$(( fontsize - 11))
					args="-n $title $image $icon -f white -c white --geometry=$geometry --buttonbar off --scrollbar off"
					;;
	gnome-terminal)
					args="--geometry=$geometry"
					;;
	*)
					echo "myterm: don't know how to start term $termprog" >&2
					;;
esac

function run-term
{
	[[ $set_echo -eq 1 ]] && set -x
	$termprog $font_switch "$font" $args "$@" &
	# see: http://stackoverflow.com/questions/13195655
	[[ $set_echo -eq 1 ]] && { set +x; } 2>/dev/null
}

if [[ $# -ge 1 ]]
then
	faux_term=
	if [[ $1 == *ssh* ]]		# immediately launching to a new server
	then
		faux_term="-tn vt100"	# see e.g. https://superuser.com/a/792701
	fi
	run-term $faux_term -e "$@"
else
	run-term
fi
