# common bash script stuff
# just call it like so:
#
#		. ~/bin/bash_funcs



###########
## SETUP ##
###########

#set -e                                              					# if any command fails, exit the script
set -o pipefail                                     					# even if it's the first command in a pipeline
shopt -s extglob                                    					# and allow us to use extended glob patterns

readonly me=${0##*/}													# slightly prettier than $0

readonly ME=$me															# slightly prettier than $me
readonly MYDIR=~/common													# use this as little as possible


# I hate that I can't just use an alias here ...
eval $(grep VCtoolsDir ~/.vctools/vctools.conf)
function vc { $VCtoolsDir/bin/vc "$@" ; }								# in case we need to get to vc


# pseudo-aliases
# This code is almost identical to that in rc/tcshrc.  Which bugs me.  But since that has to be tcsh
# syntax and this has to be bash, there ain't much to be done about it.
for repo in pjawk
do
    bindir=~/proj/$repo/bin
    if [[ -d ~/proj/$repo/bin ]]
	then
        for prog in $bindir/*
		do
			eval "function $(basename $prog) { $prog "'"$@" ; }'
        done
    fi
done


##############
## UI FUNCS ##
##############


function die
{
	echo "$me: $1" >&2
	exit 1
}

function usage_error
{
	echo "$me: $1 ($me -h for help)" >&2
	exit 2
}

function warn
{
	echo "$me: [Warning!] $1" >&2
}


function yn
{
	echo -n "$1 [y/N] "
	read yn
	if [[ $yn == [yY]* ]]
	then
		return 0
	else
		return 1
	fi
}


NORMAL=0
BOLD=1
RED=91
CYAN=96
GREEN=92
YELLOW=93
function color_msg_block
{
    # Print an indented message out in a particular color.
    # Use the colors defined above
    local color="$1"
    shift

    echo '' >&2
    for line in "$@"
    do
        echo -e "\e[${color}m    $line\e[0m" >&2
    done
    echo '' >&2
}


###################
## NETWORK FUNCS ##
###################


function get_location
{
	if ping -c1 -w1 10.106.0.6 >&/dev/null || ping -c1 -w1 10.106.0.7 >&/dev/null
	then
		echo "work"
	else
		# assume "not work" == "home" until we figure out a way to better determine it
		echo "home"
	fi
}
