#! /usr/bin/env perl

use myperl::Script;
use autodie qw< :all >;

use File::Next;
use Regexp::Common;
use Text::Tabs; $tabstop = 4;
use List::MoreUtils qw< firstidx >;
use Text::Balanced qw< extract_quotelike extract_multiple >;


opts <<'-';
	{ -a | -m | -i } [-n <name>] file_or_dir [...]
	-a : find attributes in file(s)
	-m : find methods in file(s)
	-i : find inheritance (superclasses and roles) in file(s)
	-n : search only for <name> (treated as a Perl regex)
	dirs are treated recursively
-

my %modes = ( a => 'attributes', m => 'methods', i => 'inheritance' );
my $mode = first { $_ } map { $OPT{$_} ? $modes{$_} : () } sort keys %modes
		or usage_error("must supply one of: " . join(" | ", map { "-$_" } sort keys %modes));

usage_error("must supply file(s) or dir(s)") unless @ARGV;

# Stole this from `hunks`.  As noted there, it really should be wrapped into
# PerlX::bash or something similar.
local *OUT;
const my $PAGER => 'less -rF -x4';
if (-t STDOUT)
{
	open OUT, "| $PAGER";
	binmode OUT, ':utf8';
	select OUT;
}


my %KEYWORDS =
(
	attributes		=>	[qw< has class_has mk_accessors >],
	methods			=>	[qw< sub func method before after around override augment >],
	inheritance		=>	[qw< base parent extends with >, '(parent\s*=>)', '(ISA\s*=)', ],
);
my $keywords = join('|', @{ $KEYWORDS{$mode} });
$keywords = qr/$keywords/;


my $files = File::Next::files(@ARGV);
while ( defined (my $file = $files->()) )
{
	next unless $file =~ /\.p[lm]$/ or -x $file;
	print "checking $file ...", ' ' x 40, "\r";
	process_file($file);
}
print ' ' x 80, "\r";


sub process_file
{
	my ($file) = @_;

	my $code = slurp $file;

	# ignore POD
	$code =~ s/\n\n^=\w+.*?\n\n^=cut.*?$//msg;
	# stash away quoted things so we don't get false positives
	# (as ever, stolen shamelessly from Filter::Simple by The Damian)
	my @quoted_strings;
	$code = join('', map { ref $_ ? scalar((push @quoted_strings, $_), "{Q$#quoted_strings}") : $_ }
			extract_multiple($code,
			[
					{ Q => sub { extract_quotelike($_[0]) } },
					{ C => qr/#.*?\n/ },								# try to eat comments
					qr{[^#'"`/mstyq<]+},								# i.e. exclude all characters that could
			])															# _possibly_ introduce a quoted string
			# note that this could still possibly screw up: imagine some code like so:
			#		my $foo = $bam/$bar/3;
			# first, it eats the whitespace at the beginning of the line, then stops at the 'm' in `my`
			# next, it pops off the 'm' (because nothing matched, so it pops one char)
			# next, it pops off the 'y' (same reason)
			# next, it eats everything up to the next 'm'
			# which, unfortunately, leaves:
			#		m/$bar/3;
			# which is going to look like a m// regex <sigh>
			# we're not going to worry about this, however
			# because everything gets reassembled at the end
			# so, as long as there are no keywords in there we need to find, we're okay
			# (and that seems like a pretty safe bet)
	);

	my $disp_file;
	while ($code =~ /^(.*?[^\$\@%])?\b$keywords\s+(\w+|{Q\d+}).*?$/mg)
	{
		my $keyword_pos = $+[1] ? $+[1] - $-[1] : 0;
		my ($start, $end) = ($-[0], $+[0]);
		next if $OPT{'n'} and $2 !~ qr/$OPT{'n'}/;

		if ( $mode eq 'attributes' and substr($code, $start, $end - $start) =~ /\(/ )
		{
			my $parend_at = $start + $-[0];
			substr($code, $parend_at) =~ /$RE{balanced}{-parens=>'()'}/ or die("can't find closing parend anywhere");
			$end = $parend_at + $+[1];
		}

		if ( $mode eq 'methods' and $OPT{'n'} )
		{
			substr($code, $start) =~ /$RE{balanced}{-parens=>'{}'}/ or die("can't find closing brace anywhere");
			$end = $start + $+[1];
		}

		unless ($disp_file)
		{
			# get rid of useless dirs so filename isn't so damn long ...
			my @parts = split('/', $file);
			my $i = firstidx { /perl/ or /linux/ or /^\d+\.\d+(\.\d+)?$/ } reverse @parts;
			my $start = $i == -1 ? 0 : @parts - $i;
			$disp_file = join('/', @parts[$start..$#parts]);
		}

		my $line = substr($code, $start, $end - $start);
		while ($line =~ /{Q(\d+)}/g)
		{
			my $i = $1;
			$line =~ s/{Q$i}// if $-[0] < $keyword_pos and ${$quoted_strings[$i]} =~ /\n/;
		}
		$line =~ s/{Q(\d+)}/${$quoted_strings[$1]}/g;					# put any quoted strings back
		$line = expand $line;
		$line =~ s/\A\n//;
		$line =~ s/\n/"\n" . ' ' x (length($disp_file) - 1) . "-:"/ge;
		print ' ' x 60, "\r";
		say "$disp_file:$line";
	}
}
