#! /usr/bin/env perl

use v5.14.0;
use warnings;
use autodie ':all';

use MCE::Map;
use Path::Tiny;
use Const::Fast;
use XML::MyXML qw< xml_to_object >;


const my $PIDGIN_DIR => path($ENV{HOME}, '.purple');


my $x = xml_to_object($PIDGIN_DIR->child('accounts.xml')->slurp);
my @dirs =
	# read from the bottom up
	map  { $PIDGIN_DIR->child('logs', $_, '.system') }					# ... find system log dir of subdir
	map  { join("/", @$_) }												# ... form a subdir ...
	map  { [ $_->[0] =~ s/^prpl-//r, $_->[1] =~ s|/.*$||r ] }			# ... normalize protocol and path ...
	grep { $_->[2] == 1 }												# ... only consider auto-login accounts ...
	grep { ($_->[2] // "") ne "" }										# ... ditch accounts w/o auto-login ...
	map  { [ $_->path("protocol")->value, $_->path("name")->value, 		# ... find all auto-login settings ...
			map { $_->value }											#		(get the value of that setting)
			grep { $_->attr("name") eq "auto-login" }					#		(only auto-login settings)
			map { $_->path("setting") }									#		(each individual setting)
			$_->path("settings")										#		(go through all settings blocks)
		 ] }
	$x->path("account");												# for every Pidgin account ...

# now count how many files each auto-login account's system log has
# (i.e. get the current status; connecting will make a new file)
my %file_counts =
	map { $_ => scalar $_->children }
	@dirs;

# have to use a file to communicate with the workers
# because a variable value wouldn't be shared from parent to child
my $timeout = Path::Tiny->tempfile;
# if we time out, kick the flagfile so our workers will know to give up
$SIG{ALRM} = sub { $timeout->touch };
alarm(30);

mce_map { sleep 1 until connected($_) or -e $timeout } keys %file_counts;
say STDERR "Pidgin won't connect to all accounts; bailing after timeout" if -e $timeout;

# give it just a few more seconds for all the contacts to show as connected
sleep 10;


sub connected
{
	my $dir = path(shift);

	my $old_count = $file_counts{$dir};
	my @files = sort $dir->children;
	my $new_count = @files;
	return $new_count > $old_count and grep /connected/, $files[-1]->slurp;
}
