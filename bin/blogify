#! /usr/bin/env perl

use 5.14.0;
use warnings;
use autodie ':all';
use Debuggit;
use Const::Fast;
use Perl6::Slurp;
use Method::Signatures;

use HTML::Entities;
use List::MoreUtils qw< after >;
use List::Util qw< first pairs pairmap >;
use Text::Tabs; $tabstop = 4;

use lib "$ENV{'HOME'}/docs";
use blog::common;
use blog::mixes;


my %blog =
(
	blogspot	=>	{
						italic		=>	'span style="font-style: italic;"',
						bold		=>	'b',
						strike		=>	's',
						big			=>	'span style="font-size: larger;"',
						small		=>	'span style="font-size: smaller;"',
						smallcap	=>	'span style="font-variant: small-caps;"',
						super		=>	'sup',
						quote		=>	'blockquote',
						center		=>	'div align=center',
						code		=>	'code',
						collapsed	=>	'',
						dialog		=>	'div style="margin-left: 1em; line-height: 150%"',
						dash		=>	'&mdash;<wbr/>',
						ndash		=>	'&ndash;',
						initial		=>	"\n",
					},
	perl		=>	{
						italic		=>	'em',
						bold		=>	'strong',
						strike		=>	's',
						big			=>	'big',
						small		=>	'small',
						super		=>	'sup',
						quote		=>	'blockquote',
						center		=>	'div align=center',
						code		=>	'code class="prettyprint"',
						collapsed	=>	'',
						dialog		=>	'div style="margin-left: 1em; line-height: 150%"',
						dash		=>	'&mdash;<wbr/>',
						ndash		=>	'&ndash;',
						initial		=>	'',
					},
	bbcode		=>	{
						italic		=>	'i',
						bold		=>	'b',
						strike		=>	's',
						big			=>	'size=4',
						small		=>	'size=1',
						quote		=>	'quote',
						center		=>	'center',
						code		=>	'code',
						collapsed	=>	'spoiler',
						dialog		=>	'code',
						dash		=>	'—',
						ndash		=>	'–',
						initial		=>	'',
					},
);
$blog{'html'} = { %{$blog{'blogspot'}} };
$blog{'html'}->{'para'} = sub { s{^(.+?)\n(\n+)}{ "<p>$1</p>\n" . "<br/>" x (length($2) - 1) . "\n" }emg };
$blog{'article'} = { %{$blog{'bbcode'}} };
$blog{'article'}->{$_} = $blog{'html'}->{$_} foreach grep { $blog{'html'}->{$_} =~ /^\&/ } keys $blog{'html'};


my $LIST_REGEX    = qr/( (?: ^ \h* ([#*]) \h+ .+? \n )+ )/xm;			# $1 => whole list, #2 => listchar ('*' or '#')
# The only difference in the embedded list is that leading whitespace is manadatory.
my $EMBEDDED_LIST = qr/( (?: ^ \h+ ([#*]) \h+ .+? \n )+ )/xm;


my $blog_type = 'html';													# default blog type
sub bbstyle () { $blog_type ~~ [qw< bbcode article >] }					# [tag] instead of <tag>

my @blocks;																# for codeblocks et al
my @footnotes = (undef);												# footnotes (starting at 1)
my $footnote_style = '*';												# default style for footnotes
my $me = '';															# URL to self (mostly not needed)
my $subtitle = '';														# first line of post (also mostly not needed)
my $subtitle_type;														# one of: alt, vol, or paren


my $hash = '#';
my $front_boundary = qr/(^|[^\w\\])/;
my $back_boundary = qr/(?=\W|$)/;
my $roman_numeral = qr/\bM{0,4}(?:CM|CD|D?C{0,3})(?:XC|XL|L?X{0,3})(?:IX|IV|V?I{0,3})\b/;
my $endnote_header = '<br/>' x 4 . '<div style="line-height: 80%;">' . "\n" . '_' x 10 . "\n\n";
my $section_break = <<EOT;

<img style="display:block; margin:0px auto 0px; text-align:center; width: 200px; height: 20px;" src="http://i58.photobucket.com/albums/g245/barefootcoder/sectionbreak.png" border="0" alt="section break" />
EOT

#while ( <> )
$_ = slurp;
$footnote_style = '1' if s/\^\^/^^/g > 3;								# switch to numbers if a lot of footnotes
{
	# for backwards compatibility, convert old-style to new
	s{^>>}{//--};s{<<$}{--//}g;														# old-style blockquotes
	s[{{(.+?)}}][`$1`]sg;															# old-style inline code

	# temporary conversion so -> and <- aren't considered literal > or <
	my %align = ( '-><-' => 'CENTER', '->->' => 'RIGHT', '<-<-' => 'LEFT' );
	s{\h*(->|<-)(.+?)(->|<-)\h*}{~~$align{"$1$3"}~~$2~~$align{"$1$3"}~~}msg;

	# save URLs so they don't get messed with later
	s{(?<![\\^])\[([^\[\]]+?)\|}{ '[' . block_save($1) . '|' }eg;					# ]] <-- to keep % from freaking out
	# ditto for pure HTML sections
	s[\{html\}\n(.*?)\n\{/html\}][block_save($1)]seg;

	s{\A/(\w*)/(.*)\n}{change_type($1, $2)}eg;										# change blog type
	unless (bbstyle)
	{
		s{\\?<}{&lt;}g;																# literal <'s
		s{\\?>}{&gt;}g;																# literal >'s
	}
	s{^\.\n(.+?)^\.\n}{code_block(block => $1)}smeg;								# code block (only works on Perl blog)
	s{$front_boundary`(.+?)`}{$1 . code_block(inline => $2)}eg;						# inline code
	s{e`}{&eacute;}g;																# generalized e accute
	s{a`}{&agrave;}g;																# generalized a grave
	s{u`}{&uacute;}g;																# generalized u accute
	s{\(c\)}{&copy;}g;																# copyright
	s{\(tm\)}{&trade;}g;															# trademark
	diacritic_fixup($_);															# lots of words/names w/ accents
	s{\b(\d+)c\b}{$1&cent;}g;														# cents sign
	unless ($blog_type eq 'bbcode')
	{
		s{(\d) 1/2}{$1&frac12;}g;													# number + one half
		s{(?<!\\)\b([123])/([234])\b}{&frac$1$2;}g;										# stand-alone fractions
		s{(a m)oo(se once bit my sister)}{$1&oslash;&oslash;$2}ig;					# a Monty Python quote, preserving case
		s{(\w)'(\w)}{$1&rsquo;$2}g;													# apostrophes
		s{(\W)'cause\b}{$1&rsquo;cause}g;											# apostrophe, not quote
		s{(\W)'em\b}{$1&rsquo;em}g;													# ditto
		s{(\W)'nother\b}{$1&rsquo;nother}g;											# double ditto
		s{\b'n'\b}{&rsquo;n&rsquo;}g;												# two apostrophes, even
		s{'$back_boundary}{&rsquo;}g;												# close single quote
		s{$front_boundary'}{$1&lsquo;}g;											# open single quote
		s{"$back_boundary}{&rdquo;}g;												# close double quote
		s{$front_boundary"}{$1&ldquo;}g;											# open double quote
	}
	s{^----$}{$section_break}mg;													# section break
	s{^====$}{<hr/>}mg;																# horizontal rule
	s{^//---\s*(.*?)\s*---//\n}{fmt(quote => $1) . "\n"}mseg;						# nested blockquotes
	s{^//--\n(.*?)\n--//\n}{"<pre>" . fmt(quote => $1) . "</pre>\n"}mseg;			# preformatted blockquotes
	s{^//--\s*(.*?)\s*--//\n}{fmt(quote => $1) . "\n"}mseg;							# blockquotes
	s{^//>>\s*(.*?)\s*<<//\n}{fmt(collapsed => $1)}mseg;							# collapsed ("spoiler") elements
	s{^\|\|-\s*(.*?)\s*-\|\|\n}{fmt(dialog => $1) . "\n"}mseg;						# transcript-type blocks
	s{(-{3,})}{"\cD".length($1)}eg;													# long lines of consecutive dashes
	s{(\w)--}{"<nobr>$1" . $blog{$blog_type}->{dash} =~ s{;}{;</nobr>}r}ge			# em dash following a word char
			unless $blog_type eq 'bbcode';											#		(but not under BBcode)
	s{--}{$blog{$blog_type}->{dash}}g;												# em dash otherwise
	s{ - }{&nbsp;$blog{$blog_type}->{ndash} }g;										# en dash
	s{$LIST_REGEX}{list($2 => $1)}meg;												# un/ordered lists (incl embedded)
	s{(^|>)h(\d+)\.\s*(.*?)\n}{$1<h$2>$3</h$2>}mg;									# headers
	if (bbstyle)
	{
		s{\[\*\]}{\cL}g;															# tuck these away so they don't get
	}																				# confused with boldface
	s{${front_boundary}_(\w+)_(?=\w)}{$1 . fmt(italic => $2)}seg;					# partial word italics (front)
	s{(\w)_(\w+)_$back_boundary}{$1 . fmt(italic => $2)}seg;						# partial word italics (rear)
	s{(?<!\\)${front_boundary}_(.+?)(?<!\\)_$back_boundary}{$1 . fmt(italic => $2)}seg;	# italics
	s{(?<!\\)$front_boundary\*(.+?)\*$back_boundary}{$1 . fmt(bold => $2)}seg;		# bold
	s{(?<!-)$front_boundary-(\S.*?)-$back_boundary(?!-)}{$1 . fmt(strike => $2)}eg;	# strikethrough
	s{(?<![\\^])\[(.*?)(\|(.*?))?\]}{ url_block($1, $3) }seg;						# links (in/external, with/out alt text)
	unless (bbstyle)
	{
		no warnings 'uninitialized';
		s{([^ ])\.\.\. }{$1...&nbsp;}g;												# front ellipsis (rare, but it happens)
		s{ \.\.\.}{&nbsp;...}g;														# normal ellipsis
		s{([]).?!:])([*_])?  }{$1$2&nbsp; }g;										# proper end-of-sentence
		s{^( +)}{'&nbsp;' x length($1)}meg;											# indent
		s{\^\@(.*?)\@}{fmt(smallcap => $1)}seg;										# small caps (very rare)
		s{\^_(.*?)_}{fmt(super => $1)}seg;											# superscript
		s{\b (\d)\b}{&nbsp;$1}g;													# don't leave single digits hanging
	}																				#	out on a separate line
	s{$front_boundary\^=(.+?)=\^$back_boundary}{$1 . fmt(big => $2)}seg;			# larger
	s{${front_boundary}v=(.+?)=v$back_boundary}{$1 . fmt(small => $2)}seg;			# smaller
	s{~~CENTER~~(.*?)~~CENTER~~}{fmt(center => $1)}mseg;							# centered
	s{~~RIGHT~~(.*?)~~RIGHT~~}{<div style="float:right">$1</div>}msg;				# floated right
	s{~~LEFT~~(.*?)~~LEFT~~}{<div style="float:left">$1</div>}msg;					# floated left
	s[\{img(\d+x\d+)? (.*?)\}][image($2, $1)]eg;									# embedded images
	s[\{spc(\d+)\}][blank_space($1)]eg;												# vertical space
	s[{mix (.*?) ($roman_numeral)(\n\s*(.*?)\s*)?}][mix_block($1, $2, $4)]seg;		# mix volume
	s{(?<![\\^])\{(.*?)(\|(.*?))?\}}{ url_block(FORWARD => $1, $3) }seg;			# forward links (internal only)
	s{\b(\d+)c\b}{$1&cent;}g;														# cents sign
	s{(\d) 1/2}{$1&frac12;}g;														# number + one half
	s{\bTM\b}{&trade;}g;															# trademark
	s{\^\^\[(.*?)]}{footnote(full => $1)}seg;										# footnote
	s{\^\^}{footnote('ref')}eg;														# footnote (reference only)
	s{\^(\d+)\s+(.*?)$}{footnote(text => $2, $1)}meg;								# footnote (text only)
	s{([.?!]<sup>.*?</sup>)  }{$1&nbsp; }g;											# end-of-sentence after a footnote
	s{\\([\[{*_/}\]])}{$1}g;														# literal brackets, braces, or */_
	s{\\(?=1/)}{}g;																	# literal fractions

	# paragraph everything if blog type requires it
	$blog{$blog_type}->{para}->() if $blog{$blog_type}->{para};
	# handle italics inside blockquotes (blogspot only)
	if ($blog_type eq 'blogspot')
	{
		while (m{<blockquote>(.*?)</blockquote>}sg)
		{
			substr($_, $-[1], $+[1] - $-[1]) =~ s/font-style: italic;/font-style: normal;/g;
		}
	}
	# handle header lines (article only)
	if ($blog_type eq 'article')
	{
		const my %STYLE =>
		(
			title       =>  '[font="Arial Narrow"][size=6][b]',
			subtitle    =>  '[font="Arial Narrow"][size=5][b][i]',
			header1     =>  '[font="Arial Narrow"][size=5]',
			header2     =>  '[font="Arial Narrow"][size=4][i]',
			header3     =>  '[font="Times New Roman"][size=4][b]',
			header4     =>  '[font="Times New Roman"][size=3][b][i]',
			normal      =>  '[font="Times New Roman"][size=3]',
			endnote     =>  '[font="Times New Roman"][size=1]',
		);

		s/^(=+)\s*(.*?)\s*\1\s*\n/"{\cSheader" . length($1) . "}$2\n"				# header level styles
				. "{\cSnormal}"/megx;												#	(back to normal afterwads)
		s/^(\^{2})\s*(.*?)\s*\1\s*\n/{\cSsubtitle}$2\n{\cSnormal}/mg;				# same for subtitles
		s/^(\^)\s*(.*?)\s*\1\s*\n/{\cStitle}$2\n{\cSnormal}/mg;						# same for titles
		$_ = "{\cSnormal}$_";														# start with normal style

		s/\{\cS\w+?\}(\{\cS\w+?\})/$1/g;											# eliminate styles w/ empty content
		$_ = join("\n",
			pairmap	{ spanify($STYLE{$a}, $b) }										# add formatting codes for styles
			after	{ $_ eq '' }													# skip first (empty) field
					split(/\{\cS(\w+?)\}/)											# split into style name and content
		);
		# special fixup for list items
		s/ (\cL) (.*?) (?=\n[[\cL]) / $1 . spanify( $STYLE{'normal'}, $2) /sgex;
	}
	# append footnotes
	if (first { defined } @footnotes)
	{
		$_ .= "\n\n";
		my @notes;
		foreach my $f (0..$#footnotes)
		{
			push @notes, footnote(final => $footnotes[$f], $f) if defined $footnotes[$f];
		}
		$_ .= $endnote_header . join('', map { "<p>$_</p>\n" } map { fmt(small => $_) } @notes) . '</div>';
	}
	# this makes footnote links work better,
	# and also makes single-line final paragraphs stand out
	$_ .= '<br>' x 10 if $blog_type eq 'blogspot' or $blog_type eq 'html';
	# do any accent fixups for musical references
	MixUtil->fixup_accents($_);
	# in-place HTML entity replacement (certain types only)
	decode_entities($_) if $blog_type eq 'article';
	# now put all blocks back
	s{\cQ(\d+)}{$blocks[$1]}g;
	# put BBcode lists items back
	s{\cL}{[*]}g if bbstyle;
	# put consecutive dashes back
	s{\cD(\d+)}{"-"x$1}eg;
	# handle initial whitespace according to blog type
	s{\A\s*}{$blog{$blog_type}->{'initial'}};
	# an initial blockquote needs a bit of extra space
	s{\A(\s*[[<]$blog{$blog_type}->{'quote'})}{\n$1};
	# handle subtitle, if any (goes in front of initial)
	s{\A}{fmt(italic =>
			{ alt => "or, $subtitle", vol => qq{"$subtitle"}, paren => "($subtitle)", }->{$subtitle_type}) . "\n"}e
		if $subtitle;
	# provide outer `div` for html types
	$_ = "<div>\n$_\n</div>";

	print;
}


func change_type ($type, $extra)
{
	if ($type)
	{
		die("unknown blog type $type") unless exists $blog{$type};
		$blog_type = $type;
	}
	$footnote_style = '1' if $blog_type eq 'perl';
	$section_break = '\_' x 10 if bbstyle;

	$me = get_blog($1) if $extra =~ /\[(.*?)]/;
	if ($extra =~ /(\w+):{(.*?)}/)
	{
		$subtitle_type = { subtitle => 'alt', volume => 'vol', parenthetical => 'paren' }->{$1}
				or die "unknown subtitle type $1";
		$subtitle = $2;
	}

	return '';															# for substitution
}


func block_save ($code)
{
	# in case we overzealously converted some ->'s to right justification codes inside code blocks
	$code =~ s/~~RIGHT~~/->/g;

	push @blocks, $code;
#warn("$#blocks => [$blocks[-1]] {from ", (caller(1))[3], "}\n");
	return "\cQ$#blocks";
}


sub url_block
{
	my $forward = 0;
	$forward = 1 && shift if $_[0] eq 'FORWARD';
	my ($url, $alt_text) = @_;
	$url = $blocks[$1] if $url =~ /^\cQ(\d+)$/;
	debuggit(4 => "url_block:", $url, "=>", $alt_text);

	if (bbstyle)
	{
		die("can't do forward links in bbcode") if $forward;
		state $bbcodes = [ map { qr{^/?$_\b}i }
				qw< b i u s quote list code img size font spoiler center color url indent mention > ];
		if (($url eq '*' or $url ~~ @$bbcodes) and not $alt_text)
		{
			return "[$url]";
		}

		die("no alt text for $url!") unless defined $alt_text;
		return qq{[url="$url"]${alt_text}[/url]};
	}

	$alt_text //= $url;													# no alt text
	$url =~ s/&[lr]squo;/'/g;											# fixup single quotes
	$url =~ s/&[lr]dquo;/"/g;											# fixup double quotes
	$alt_text =~ s[\{img(\d+x\d+)? (.*?)\}][image($2, $1, 1)]e;			# alt text can be an image

	if ($url =~ /^(\w+):\S+$/)											# external link
	{
		die("can't do forward links for external links") if $forward;
		given ($1)
		{
			when ('cpan')												# shortcut for links to CPAN modules
			{
				$url =~ s/^cpan://;
				$alt_text =~ s/^cpan://;
				$url = 'https://metacpan.org/module/' . $url;
			}
			default
			{
				# http or some other normal URL thingy
				# no need to do anything here
			}
		}
	}
	else																# internal link
	{
		return qq{<span style="color: gray;">$alt_text</span>}			# forward link
				if $forward;
		$url = get_blog($url);
	}

	return block_save(qq{<a href="$url">$alt_text</a>});
}


func code_block ($type, $code)
{
	$code = fmt(code => expand($code));
	$code =~ s/^$/ /mg				if						$blog_type eq 'perl';
	$code = "<pre>$code</pre>\n"	if $type eq 'block' and	not bbstyle;
	return block_save($code);
}


	# only used by diacritic_fixup (directly below)
	func _fixup ($string, $fixups)
	{
		foreach my $loc (sort { $b <=> $a } keys %$fixups)				# make adjustments from end-of-string backwards
		{
			my $fix = $fixups->{$loc};
			if ($fix =~ /^\w+$/)
			{
				if ($fix eq 'lig')
				{
					my $ligature = substr($string, $loc - 1, 2);
					my ($first, $second) = split(//, $ligature);
					# make case of second letter match that of the first
					$second = $first eq uc $first ? uc $second : lc $second;
					$ligature = "$first$second";
					substr($string, $loc - 1, 2) = "&${ligature}$fix;";
				}
				else
				{
					my $letter = substr($string, $loc - 1, 1);
					substr($string, $loc - 1, 1) = "&${letter}$fix;";
				}
			}
			elsif ($fix =~ /^#\d+/)
			{
				substr($string, $loc - 1, 1) = "&$fix;";
			}
			else
			{
				substr($string, $loc, 0) = $fix;
			}
		}
		return $string;
	}
func diacritic_fixup ($string is alias)
{
	state $FIXUPS =
	{
		cliche			=>	{ 6 => 'acute', plural => 1, },
		cafe			=>	{ 4 => 'acute', plural => 1, },
		risque			=>	{ 6 => 'acute', },
		passe			=>	{ 5 => 'acute', },
		voila			=>	{ 5 => 'grave', },
		outre			=>	{ 5 => 'acute', },
		naivete			=>	{ 3 => 'uml',   },
		'a la'			=>	{ 1 => 'grave', },
		facade			=>	{ 3 => 'cedil', plural => 1, },
		soupcon			=>	{ 5 => 'cedil', },
		uber			=>	{ 1 => 'uml',   },
		jalapeno		=>	{ 7 => 'tilde', plural => 1, },
		platanos		=>	{ 3 => 'acute', },
		eostre			=>	{ 1 => '#274',  },
		aeon			=>	{ 1 => 'lig',   plural => 1, },
		aesthetic		=>	{ 1 => 'lig',   plural => 1, },
		aesthetically	=>	{ 1 => 'lig',   },
		aetherium		=>	{ 1 => 'lig',	},
		anaesthesia		=>	{ 3 => 'lig',	},
		minutiae		=>	{ 7 => 'lig',   },
		oeuvre			=>	{ 1 => 'lig',   plural => 1, },
		pinata			=>	{ 3 => 'tilde', plural => 1, },
		'mon frere'		=>  { 7 => 'grave', },
		'deja vu'		=>	{ 2 => 'acute', 4 => 'grave', },
		'raison detre'	=>	{ 9 => 'circ',  8 => q|'|,    },
		'Pokemon'		=>	{ 4 => 'acute',	},
		'Ingy dot Net'	=>	{ 7 => 'uml',   },
		'Gabor'			=>	{ 2 => 'acute', },
		'Szabo'			=>	{ 5 => 'acute', },
		'Faerun'		=>	{ 5 => 'circ', },
	};
	my $PRE = qr/(^|[^\w\\]|_)/;
	my $POST = qr/(?=_|\W|$)/;

	# if it ever becomes possible/necessary to call diacritic_fixup more than once per program, this
	# will need to be moved into a `do` block or somesuch
	foreach (keys %$FIXUPS)
	{
		my $fixups = $FIXUPS->{$_};
		if ( delete $fixups->{plural} )
		{
			$FIXUPS->{$_ . 's'} = $fixups;
		}
	}

	foreach (keys %$FIXUPS)
	{
		my $find = /^[A-Z]/ ? qr/$PRE($_)$POST/ : qr/$PRE($_)$POST/i;
		$string =~ s/ $find / $1 . _fixup($2, $FIXUPS->{$_}) /egx;
	}
}


func fmt ($fmt, $text)
{
	debuggit(3 => "formatting", $text, "in", $fmt);

	my $on = $blog{$blog_type}->{$fmt} or die("unknown formatting $fmt");

	my $open = bbstyle ? '[' : '<';
	my $close = bbstyle ? ']' : '>';
	$on = "$open$on$close";

	return spanify($on, $text);
}

func spanify ($open, $content)
{
	my $close = closing_of($open);
	$content =~ s|\n|<br/>|g unless bbstyle;
	return join('', $open, $content, $close);
}

func closing_of ($opening)
{
	return $opening =~ s{ ([[<]) (\w+) .*? ([]>]) }{$1/$2$3}grx;
}


func image ($source, $size, $from_link?)
{
	my %props = ( src => $source );
	@props{qw< width height >} = split('x', $size) if $size;
	my $img = '<img ' . join(' ', map { qq{$_="$props{$_}"} } keys %props) . '>';
	return $size && !$from_link ? url_block($source, $img) : $img;
}

func blank_space ($size)
{
	return "<div style='margin-top:${size}px'></div>";
}


func mix_block ($mix_name, $vol, $extra?)
{
	my $file = "$mix_name.m3u";
	debuggit(2 => "creating mix block for", $mix_name, "volume", $vol, "file", $file);
	my $mix = MixVolume->new($file, volume => $vol);

	my $block = $mix->gen_html =~ s/\s+$//r;
	if ($extra)
	{
		my $space = qr/(?:\s|&nbsp;)/;
		my %mods;
		foreach (split("\n", $extra))
		{
			s/^$space*(\d+(,\d+)*):$space*// or die("don't know how to handle mix block line: $_");
			debuggit(4 => "code will be", "sub { $_ }");
			my $code = eval "sub { $_ }" || die("compilation error in mix block: $@");
			$mods{$_} = $code foreach split(',', $1);
		}
		my $track = 0;
		my @newblock;
		my $EOL = qr{(?:<br/>)?\n?};
		foreach (split("\n", $block))
		{
			if (/^\s*(<.*?>)?&ldquo;/)				# then it's a track line
			{
				s/($EOL)$//; my $eol = $1;
				debuggit(5 => "checking track", $track + 1);
				if (my $code = $mods{++$track})
				{
					unless ( $code->() )
					{
						debuggit("track line: $_");
						die("code block for track $track failed");
					}
				}
				$_ .= $eol;
			}
			push @newblock, $_;
		}
		$block = join("\n", @newblock);
	}
	# handle em dashes in the generated block; it's just easier to do it again here rather than
	# trying to fiddle with order dependency issues up above
	$block =~ s{--}{$blog{$blog_type}->{dash}}g;									# em dash
	return $block;
}


func list ($type, $text)
{
	my ($leader) = $text =~ /\A(\h+)/;
	$text =~ s/^$leader//mg if $leader;
	$text =~ s{$EMBEDDED_LIST}{list($2 => $1)."\n"}meg;				# embedded lists handled via recursive call

	if (bbstyle)
	{
		$type = $type eq '#' ? 'list=1' : 'list';
		$text =~ s/^\s+//;
		$text = join("\n", map { s/^\s*[#*]\s*//; "[*]$_" } split("\n", $text));
		return "\n[$type]$text\n[/list]";
	}
	else
	{
		$type = $type eq '#' ? 'ol' : 'ul';
		my ($open, $close, $item_style);
		if ($blog_type eq 'blogspot')
		{
			my $marker = $type eq 'ol' ? 'decimal' : 'disc';
			$open = qq{$type style="list-style: $marker outside none"};
			$close = $type;
			$item_style = qq{style="background-image: none; list-style: inherit; padding-bottom: 5px; padding-left: 5px"};
		}
		else
		{
			$open = $close = $type;
			$item_style = '';
		}

		$text =~ s/^\s+//;
		$text = join('', map { /^<[uo]l/ ? $_ : "<li $item_style>" . s/^\s*[#*]\s*//r . "</li>" } split("\n", $text));
		return "<$open>$text</$close>";
	}
}


func footnote_ref ($num)
{
	return $footnote_style eq '1' ? $num : $footnote_style x $num;
}

func save_footnote_and_gen_ref ($note)
{
	push @footnotes, $note;
	my $ref = footnote_ref($#footnotes);
	my $size = $ref =~ /^\*+$/ ? 'big' : 'small';
	my $text_and_link = fmt($size => qq{<a href="$me#note$#footnotes">} . $ref . '</a>');
	return '<sup>' . $text_and_link . '</sup>';
}

func footnote ($type, $text, $num?)
{
	if ($type eq 'ref')
	{
		save_footnote_and_gen_ref(undef);
	}
	elsif ($type eq 'text')
	{
		if (defined $num)
		{
			$footnotes[$num] = $text;
		}
		else
		{
			push @footnotes, $text;
		}
		return '';
	}
	elsif ($type eq 'full')
	{
		save_footnote_and_gen_ref($text);
	}
	elsif ($type eq 'final')
	{
		return qq{<a name="note$num">} . footnote_ref($num) . "</a> $text";
	}
}
