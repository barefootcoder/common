#! /bin/bash
set -e
set -o pipefail
source ~/common/functions

[[ -d /export/backup ]] || die "base backup dir doesn't exist!"
tag=$1
[[ $tag ]] || die "must supply backup tag"
[[ $LOCALHOSTNAME ]] || die "local hostname not set"
backup_dir=/export/backup/$LOCALHOSTNAME/$tag
mkdir -p $backup_dir
[[ ! $(ls -A $backup_dir) ]] || die "backup dir is not empty!"
( cd ~/workproj/cheops ; vagrant status | grep -q running ) && die "must stop Vagrant sandbox before backing up"

echo "about to generate a lot of output"
echo "make sure you're in an appropriate terminal window"
echo -n "press <ENTER> to continue ... "
read

fail_list=
missing_list=

function backup-dir
{
	local dir=$1
	local name=$2
	local maybe_sudo=$3
	if [[ -d $dir ]]
	then
		$maybe_sudo tar cvpjf $backup_dir/$name.tbz $dir || fail_list="$fail_list $dir"
	else
		missing_list="$missing_list $dir"
	fi
}

function root-backup-dir
{
	local dir=$1
	local name=$2
	backup-dir $dir $name sudo
	[[ -e $backup_dir/$name.tbz ]] && sudo chown $USER:users $backup_dir/$name.tbz
	true
}

root-backup-dir /etc          etc
root-backup-dir /var          var
root-backup-dir /root/.config root-config
backup-dir      ~/.perl-cpm/  home-perl-cpm
backup-dir      ~/workproj/   home-workproj

echo -e "all done\a"
[[ $missing_list ]] && echo "these dirs don't exist:      $missing_list" >&2
[[ $fail_list ]]    && echo "these dirs failed to backup! $fail_list"    >&2
