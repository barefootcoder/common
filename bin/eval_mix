#! /usr/bin/env perl

use 5.14.0;
use autodie ':all';
use warnings FATAL => 'all';

use Debuggit;
use Const::Fast;
use File::Basename;
use List::Util qw< max >;
use File::Glob qw< bsd_glob>;

const my $MUSICHOME => '/export/music';

my %WEIGHTS =
(
	SOURCE			=>	{
							' '		=>	1,
							'.'		=>	1,
							':'		=>	1,
							'>'		=>	.8,
							'<'		=>	.25,
							'F'		=>	.1,
						},
	POSITION		=>	{
							'*'		=>	1,
							'>'		=>	1,
							'~'		=>	.75,
							'?'		=>	.5,
							'X'		=>	.1,
							' '		=>	.1,
						},
	SUITABILITY		=>	{
							':'		=>	1,
							'V'		=>	1,
							'_'		=>	1,
							'v'		=>	1,
							'*'		=>	1,
							'~'		=>	.6,
							'?'		=>	.4,
						},
);


my $named = 0;
my $closer = .95;
my $running_score = 0;
my $in_header = 1;
my ($volume, $subtitle, $tracklist_ref, @tracks);
$volume = basename($ARGV[0], /\..+?$/) if @ARGV;
while ( <> )
{
	chomp;
	if ($in_header)
	{

		given ($_)
		{
			$volume = $_		when /^[A-Z8]/;		# mix name and volume
			$subtitle = $_		when /^\[.*?\]\??/;	# volume subtitle
			$tracklist_ref = $_	when /^==>/;		# pointer to real tracklist name
			''					when /^\{/;			# old statistics; throw these away
			$in_header = 0		when /^[=-]{3,}/;	# end of header
			# otherwise:
			die("can't understand header line: $_");
		}

		next;
	}

	push @tracks, $_;
	my ($src, $pos, $vocal, $suit, $track) = /(.)(.)(.)(.) (.*?)(\t|$)/ or die("illegal track format");
	$named = 1 if $vocal eq '=';
	$closer = 1 if $suit eq '_';
	$closer = .98 if $suit eq 'v';
	my $score = weight(SOURCE => $src) * weight(POSITION => $pos) * weight(SUITABILITY => $suit);
	debuggit("##", $score, ":", $track);
	$running_score += $score;
}

my $time = time_for_volume($volume);
my $final_score = final_score($running_score / @tracks, $time, $named, $closer);
my $stats = @tracks . " tracks, time: " . $time . ", named: " . ($named ? 'yes' : 'no') . ", score: "
		. sprintf("%5.2f%%", $final_score * 100);
my @headers;
	push @headers, $volume			unless @ARGV;
	push @headers, $tracklist_ref	if $tracklist_ref;
	push @headers, $subtitle		if $subtitle;
	push @headers, "{$stats}";
debuggit("headers:", DUMP => \@headers);

say foreach @headers;
say '=' x (max map { length } @headers);
say foreach @tracks;


sub weight
{
	my ($type, $symbol) = @_;

	return $WEIGHTS{$type}->{$symbol} // die("unknown symbol $symbol for $type");
}


sub final_score
{
	my ($score, $time, $named, $closer) = @_;
	$time =~ /^(\d)\d:/;
	my $factor = (7 - ($1 // 0)) ** 2 * 2;
	my $weight = 1 - $factor / 100;
	return ($score == 1 ? $score : $score * $weight) * ($named ? 1 : .75) * $closer;
}


sub time_for_volume
{
	const my $ROMAN_NUMERAL => qr/\bM{0,4}(?:CM|CD|D?C{0,3})(?:XC|XL|L?X{0,3})(?:IX|IV|V?I{0,3})\b/;

	my ($volume) = @_;

	my ($mix_name, $vol_num) = $volume =~ /^(.*?)\s+($ROMAN_NUMERAL)$/;
	($mix_name, $vol_num) = ($volume, '') unless $mix_name;

	my ($mix_file) = bsd_glob("$MUSICHOME/tracklists/*/$mix_name.m3u");
	die("cannot find mix file for: $mix_name") unless $mix_file;
	$mix_file =~ s/'/'\\''/g;

	return get_time($mix_file, $vol_num);
}

sub get_time
{
	my ($tracklist, $vol_num) = @_;

	open(PIPE, "$MUSICHOME/bin/total_time '$tracklist' |");
	while ( <PIPE> )
	{
		close(PIPE) and return $1 if /^ $vol_num \s+ .*? (\d*\d:\d\d) /x;
	}
	close(PIPE);
	die("couldn't find total for volume $vol_num");
}
