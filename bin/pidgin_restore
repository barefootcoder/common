#! /usr/bin/env perl

use myperl DEBUG => 1;
use autodie ':all';


const our $PANEL_HEIGHT	=>  24;
const our $WIN_WIDTH	=> 720;
const our $WIN_HEIGHT	=> 518;
const our $WIN_BORDER	=>  27;

const our $PidginWindow	=>	"Buddy List";


our ($SCREEN_WIDTH, $SCREEN_HEIGHT) = get_screen_size();
debuggit("screen size is $SCREEN_WIDTH x $SCREEN_HEIGHT");

my $data = read_layout();
debuggit(4 => "layout data:", DUMP => $data);

# make sure Pidgin is running, or else there's *really* no point
unless (get_window_id($PidginWindow))
{
	die("Pidgin not running, or I can't find the $PidginWindow");
}

foreach my $name (keys %$data)
{
	my $window = get_window_id($name);
	if (!$window and $data->{$name}->{autospawn})
	{
		type_in_contact_window("$name\r");

		# hopefully that gets us a window at this point
		# although we might have to wait a second for it to show up
		sleep 1;
		$window = get_window_id($name);
	}
	if ($window)
	{
		my ($x, $y) = convert_pos_to_pixel($data->{$name}->{xpos}, $data->{$name}->{ypos});
		my $h = convert_height_to_pixel($data->{$name}->{height} - $data->{$name}->{ypos} + 1);
		my $d = $data->{$name}->{desktop} - 1;
		debuggit("moving", $name, "to", $d, '/', $x, ',', $y);
		system("xdotool windowsize $window $WIN_WIDTH $h windowmove $window $x $y set_desktop_for_window $window $d");
	}
}

# for some reason, my groups get in the wrong open/closed state sometimes
# this should guarantee the right things are open or closed
type_in_contact_window("me\r-");
type_in_contact_window("work\r+");
type_in_contact_window("personal\r+");


func get_screen_size
{
	open(IN, "xrandr |");
	while ( <IN> )
	{
		if ( /current \s+ (\d+) \s* x \s* (\d+) /x )
		{
			close(IN);
			return ($1, $2);
		};
	}
	close(IN);
	return (undef, undef);
}


func get_window_id ($name)
{
	my $window = `xdotool search --name '^$name\$'`; chomp $window;
	if ($window =~ /\s/)
	{
		$window = first { /^\d+$/ } sort { $b <=> $a } split(' ', $window);
		warn("got multiple windows for $name! [using $window]");
	}
	return $window;
}

func goto_window ($name)
{
	system(qq{ xdotool search --name "$name" windowactivate --sync });
}

func type_in_contact_window ($string)
{
	state $do_once = do
	{
		# if we don't click somewhere in the list of contacts, typing won't work
		goto_window($PidginWindow);
		system('xdotool mousemove 1710 500 click 1');
		1;
	};

	goto_window($PidginWindow);
	# the `search` is most likely unnecessary here
	system(qq{ xdotool search --name "$PidginWindow" type "$string" });
}


func read_layout
{
	my $data = {};

	my $cur_desktop = 0;
	my $in_layout = 0;
	open(IN, "$ENV{HOME}/local/data/pidgin.layout");
	while ( <IN> )
	{
		if ( /^ [A-Z]+ : /x )						# start new desktop
		{
			++$cur_desktop;
			$in_layout = 0;
		}
		elsif ( /^ \s* $/x )						# blank line
		{
			++$in_layout if $in_layout;
		}
		elsif ( /^ \t (\s* \+? \w+.*) \s* $/x )
		{
			my $content = $1;
			$content = expand($content);

			++$in_layout;
			foreach my $name ( split(' ', $content) )
			{
				my $xpos = index($content, $name) / 16 + 1;
				my $ypos = ($in_layout + 1) / 2;
				my $spawn = $name =~ s/^\+//;

				if (exists $data->{$name})
				{
					die("conflicting desktop for $name") unless $cur_desktop == $data->{$name}->{desktop};
					die("conflicting horizontal for $name") unless $xpos == $data->{$name}->{xpos};
					die("conflicting vertical for $name") unless $ypos >= $data->{$name}->{ypos};
					$data->{$name}->{height} = $ypos;
				}
				else
				{
					$data->{$name} =
					{
						desktop		=>	$cur_desktop,
						xpos		=>	$xpos,
						ypos		=>	$ypos,
						height		=>	$ypos,
						autospawn	=>	$spawn ? 1 : 0,
					};
				}
			}
		}
		else
		{
			die("don't know how to parse: $_");
		}
	}
	close(IN);

	return $data;
}


func convert_pos_to_pixel ($x, $y)
{
	# convert to 0-based
	--$x; --$y;

	my $usable_width = $SCREEN_WIDTH - $WIN_WIDTH;
	$x = int($usable_width / 2 * $x);

	my $usable_height = $SCREEN_HEIGHT - $PANEL_HEIGHT * 2 - $WIN_HEIGHT;
	$y = int($usable_height / 2 * $y) + $PANEL_HEIGHT;

	return ($x, $y);
}

func convert_height_to_pixel ($h)
{
	my $unit = ($SCREEN_HEIGHT - $PANEL_HEIGHT * 2 - $WIN_HEIGHT) / 2;
	my $base = $WIN_HEIGHT - $WIN_BORDER - $unit;
	return $base + $unit * $h;
}
