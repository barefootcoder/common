#!/bin/bash


##########################################################################################
#
#	To install everthing, use this command:
#
#		curl -kL https://raw.github.com/barefootcoder/common/master/bin/setup_hire | bash
#
##########################################################################################


function ask
{
	read -p "$1 [y/N] " answer
	[[ $answer == [Yy]* ]]
}

function wait_return
{
	read -p "Press <Enter> to continue ... "
	echo ""
}

function fatal
{
	echo "$1" >&2
	echo "Sorry; bailing out." >&2
	exit 1
}

function clone_repo
{
	dir="$1"
	git clone https://github.com/barefootcoder/common.git $dir
}

function locate_cmd
{
	which "$1" >/dev/null 2>&1
}

function update_perl_mods
{
	dir="$1"
	echo -e "\nThis should take about 5-6 minutes if starting from scratch." >&2
	echo -e "(Much less if just updating.)\n" >&2
	podselect -section PREREQS $dir/perl/myperl.pm | grep '^[a-zA-Z]' | cpanm -n
}


if [[ ~/common/bin/$(basename $0) -ef $0 ]]								# backdoor for personal use
then
	update_perl_mods ~/common
	exec ~/bin/hire
fi

echo -e "\n"

# we'll need $WEBROOT at some point; better make sure it's set
if [[ -z $WEBROOT ]]
then
	fatal "You need a $WEBROOT set or else I won't know where to get my take-home test comparisons from."
fi

# base directory
perldir=~/perl5
[[ -d $perldir ]] || mkdir $perldir
cd $perldir

# Git repo
gitdir=BuddyStuff
if [[ -d $gitdir ]]
then
	if ask "Update your copy of the repo?"
	then
		cd $gitdir
		git pull
		cd ..
	fi
else
	if [[ -t 0 ]]
	then
		if ask "You don't have a copy of the repo.  Clone it?"
		then
			clone_repo $gitdir
		else
			echo "Can't continue." >&2
			exit 2
		fi
	else
		clone_repo $gitdir
		exec $gitdir/bin/setup_hire </dev/tty
	fi
fi
echo -e "\n"

# Perlbrew
if [[ ! -d perlbrew ]]
then
	if ask "You don't appear to have perlbrew.  Install it?"
	then
		if ! curl -kL http://install.perlbrew.pl | bash
		then
			wget --no-check-certificate -O - http://install.perlbrew.pl | bash
		fi
	else
		echo "Trying to continue, but not hopeful." >&2
	fi
fi
source perlbrew/etc/bashrc
echo -e "\n"

# proper Perl
if ! perlbrew list | grep -q 5.14.2
then
	if ask "You don't appear to have perl 5.14.2.  Build it?"
	then
		echo -e "\nThis should take about 4-5 minutes.\n" >&2
		perlbrew install -n 5.14.2
	else
		echo "Trying to continue, but not hopeful." >&2
	fi
fi
perlbrew use perl-5.14.2
echo -e "\n"

# cpanm
if ! locate_cmd cpanm
then
	perlbrew install-cpanm
fi

# library packages
if locate_cmd rpm
then
	# RedHat based (hopefully Fedora)
	for pkg in openssl-devel libxml2-devel
	do
		if ! rpm -q $pkg >/dev/null 2>&1
		then
			echo "You need to install $pkg.  Run this (as root) in another terminal:" >&2
			echo "    yum install $pkg" >&2
			echo "I'll wait." >&2
			wait_return
		fi
	done
elif locate_cmd dpkg
then
	# Debian based (hopefully Ubuntu or Mint)
	for pkg in libssl-dev libexpat1-dev
	do
		if ! dpkg -l $pkg >/dev/null 2>&1
		then
			echo "You need to install $pkg.  Run this (as root) in another terminal:" >&2
			echo "    apt-get install $pkg" >&2
			echo "I'll wait." >&2
			wait_return
		fi
	done
else
	# not sure
	fatal "can't make a reasonable guess as what distro you're running"
fi
echo -e "\n"

# all the modules we'll need
update_perl_mods $gitdir
echo -e "\n"

# make sure our local modules dir is getting into @INC
if ! echo $PERL5LIB | fgrep -q $perldir/$gitdir/perl
then
	export PERL5LIB=$perldir/$gitdir/perl:$PERL5LIB
fi

# create config, if necessary
config=$gitdir/conf/hire.conf
if [[ ! -r $config ]]
then
	if ask "You must have a hire.conf; create it now?"
	then
		# directory for take-home tests
		default_takehomedir=$perldir/data/hire/take-home
		read -p "What directory do you want to use for dropping take-home tests into? [$default_takehomedir] " takehomedir
		takehomedir=${takehomedir:-$default_takehomedir}
		mkdir -p $takehomedir >/dev/null 2>&1
		ln -s $WEBROOT/doc/howto/interview-programmer/take-home-test/OOPerlTest-Personal-0.01 $takehomedir
		ln -s $perldir/$gitdir/conf/hire/review $takehomedir
		echo "take_home_test_dir = $takehomedir" >>$config
	else
		fatal "You're boned."
	fi
fi

# create .googlerc, if necessary
googlerc=~/.googlerc
if [[ ! -r $googlerc ]]
then
	if ask "You must have a .googlerc; create it now?"
	then
		read -p "What is your (personal) Google account name? " user
		read -sp "What is your Google account password? " passwd
		echo -e "user = $user\npassword = $passwd" >$googlerc
	else
		fatal "You make me sad.  So be it."
	fi
fi
chmod 600 $googlerc

# finally, kick it off
exec $gitdir/bin/hire
