#!/bin/bash


##########################################################################################
#
#	To install everthing, use this command:
#
#		curl -kL https://raw.github.com/barefootcoder/common/master/bin/setup_hire | bash
#
##########################################################################################


function ask
{
	read -p "$1 [y/N] " answer
	[[ $answer == [Yy]* ]]
}

function wait_return
{
	read -p "Press <Enter> to continue ... "
	echo ""
}

function fatal
{
	echo "$1" >&2
	echo "Sorry; bailing out." >&2
	exit 1
}

function clone_repo
{
	dir="$1"
	git clone https://github.com/barefootcoder/common.git $dir
}

function locate_cmd
{
	which "$1" >/dev/null 2>&1
}

function update_perl_mods
{
	if ask "Update the dependent Perl modules?"
	then
		dir="$1"
		echo -e "\nThis should take about 5-6 minutes if starting from scratch." >&2
		echo -e "(Much less if just updating.)\n" >&2
		podselect -section PREREQS $dir/perl/myperl.pm | grep '^[a-zA-Z]' | cpanm -n
	fi
}

function choose_config
{
	conf=hire.conf
	dir=$(pwd)
	oldps3=$PS3

	cd $(dirname $0)/../conf/hire
	echo -ne "\n\nCurrent config : "
	grep '^name' $conf

	echo -e "\nChoose a new config:"
	PS3="Which config? "
	select file in $(ls -1 *.conf | grep -v $conf)
	do
		if [[ -n $file ]]
		then
			/bin/cp -fv $file $conf
			break
		fi
	done

	PS3=$oldps3
	cd $dir
}


if [[ ~/common/bin/$(basename $0) -ef $0 ]]								# backdoor for personal use
then
	update_perl_mods ~/common
	choose_config
	exec ~/bin/hire
fi

echo -e "\n"

# we'll need $WEBROOT at some point; better make sure it's set
if [[ -z $WEBROOT ]]
then
	fatal "You need a \$WEBROOT set or else I won't know where to get my take-home test comparisons from."
fi

# base directory
basedir=/rent/perlhire
[[ -d $basedir ]] || fatal "I can't find $basedir; that's a bit of a dealbreaker, I'm afraid."
cd $basedir

# Git repo
gitdir=common
if [[ -d $gitdir ]]
then
	if ask "Update your copy of the repo?"
	then
		cd $gitdir
		git pull
		cd ..
	fi
else
	if [[ -t 0 ]]
	then
		if ask "You don't have a copy of the repo.  Clone it?"
		then
			clone_repo $gitdir
		else
			echo "Can't continue." >&2
			exit 2
		fi
	else
		clone_repo $gitdir
		exec $gitdir/bin/setup_hire </dev/tty
	fi
fi
echo -e "\n"

# Perlbrew
perlbrewdir=perl5
if [[ -z $PERLBREW_HOME ]]
then
	fatal "You don't appear to have perlbrew, but I dare not install it.  Get thee to a sysadmin!"
fi
if [[ $PERLBREW_ROOT != $basedir/$perlbrewdir ]]
then
	fatal "Your perlbrew isn't pointing whence it should.  Try $basedir/$perlbrewdir instead."
fi
source $perlbrewdir/etc/bashrc
echo -e "\n"

# proper Perl
version=5.14.4
if ! perlbrew list | grep -q $version
then
	if ask "You don't appear to have perl $version.  Build it?"
	then
		echo -e "\nThis should take about 4-5 minutes.\n" >&2
		perlbrew install -n $version
	else
		echo "Trying to continue, but not hopeful." >&2
	fi
fi
perlbrew use perl-$version
echo -e "\n"

# cpanm
if ! locate_cmd cpanm
then
	perlbrew install-cpanm
fi

# library packages
if locate_cmd rpm
then
	# RedHat based (hopefully Fedora)
	for pkg in openssl-devel libxml2-devel
	do
		if ! rpm -q $pkg >/dev/null 2>&1
		then
			echo "You need to install $pkg.  Run this (as root) in another terminal:" >&2
			echo "    yum install $pkg" >&2
			echo "I'll wait." >&2
			wait_return
		fi
	done
elif locate_cmd dpkg
then
	# Debian based (hopefully Ubuntu or Mint)
	for pkg in libssl-dev libexpat1-dev
	do
		if ! dpkg -l $pkg >/dev/null 2>&1
		then
			echo "You need to install $pkg.  Run this (as root) in another terminal:" >&2
			echo "    apt-get install $pkg" >&2
			echo "I'll wait." >&2
			wait_return
		fi
	done
else
	# not sure
	fatal "can't make a reasonable guess as what distro you're running"
fi
echo -e "\n"

# all the modules we'll need
update_perl_mods $gitdir
echo -e "\n"

# make sure our local modules dir is getting into @INC
if ! echo $PERL5LIB | fgrep -q $basedir/$gitdir/perl
then
	export PERL5LIB=$basedir/$gitdir/perl:$PERL5LIB
fi

# create config, if necessary
config=~/hire.conf
if [[ ! -r $config ]]
then
	if ask "You must have a hire.conf; create it now?"
	then
		# directory for take-home tests
		default_takehomedir=$basedir/take-home
		read -p "What directory do you want to use for dropping take-home tests into? [$default_takehomedir] " takehomedir
		takehomedir=${takehomedir:-$default_takehomedir}
		mkdir -p $takehomedir
		ln -sf $WEBROOT/doc/howto/interview-programmer/take-home-test/OOPerlTest-Personal-0.01 $takehomedir
		ln -sf $basedir/$gitdir/conf/hire/review $takehomedir
		echo "take_home_test_dir = $takehomedir" >>$config

		# directory for resumes
		default_resumedir=/tmp
		read -p "What directory do you want to use for dropping resume PDFs into? [$default_resumedir] " resumedir
		resumedir=${resumedir:-$default_resumedir}
		mkdir -p $resumedir
		echo "pdf_files_dir = $resumedir" >>$config

		echo '' >>$config

		# name
		uid=$(id -u)
		default_fullname=$(awk -F: '$3 == '$uid' {print $5}' /etc/passwd)
		read -p "What is your full name? [$default_fullname] " fullname
		fullname=${fullname:-$default_fullname}
		echo "name = $fullname" >>$config

		# position
		default_position="hiring manager"
		read -p "What is your full name? [$default_position] " position
		position=${position:-$default_position}
		echo "name = $position" >>$config

		# initials
		default_initials=$(perl -le 'print uc join "", map { substr($_, 0, 1) } @ARGV' $fullname)
		read -p "What is your full name? [$default_initials] " initials
		initials=${initials:-$default_initials}
		echo "initials = $initials" >>$config
	elif [[ ! -r $gitdir/conf/hire.conf ]]
	then
		fatal "You're boned."
	fi
fi

# create .googlerc, if necessary
googlerc=~/.googlerc
if [[ ! -r $googlerc ]]
then
	if ask "You must have a .googlerc; create it now?"
	then
		echo -e "user = rent.com.engteam.testing@gmail.com\npassword = voidxu33" >$googlerc
	else
		fatal "You make me sad.  So be it."
	fi
fi
chmod 600 $googlerc

# finally, kick it off
exec $gitdir/bin/hire
