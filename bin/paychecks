#! /usr/bin/env perl

use myperl DEBUG => 1;

use Tie::IxHash;


tie my %FAMILY, 'Tie::IxHash' =>
(
	Buddy	=>	'11/5/1966',
	Christy	=>	'8/30/1971',
	Random	=>	'9/8/1998',
	Perrin	=>	'3/8/2006',
	Merrick	=>	'3/31/2012',
);
$_ = str2time($_) foreach values %FAMILY;

const my $HOUR => 60 * 60;
const my $DAY => 24 * $HOUR;
const my $WEEK => 7 * $DAY;
const my $YEAR => 365.25 * $DAY;


my $last_date = str2time(shift) or die("must supply last paycheck date");
foreach (keys %FAMILY)
{
	my $dow = time2str('%A', $FAMILY{$_});
	my $data = { weeks_owed => 0, weekly_total => 0, num_bdays => 0, bday_total => 0, };
	$data->{age} = round(UP => ($last_date - $FAMILY{$_}) / $YEAR);
	say "$_ : paid on $dow, \$$data->{age} per week (at start of period)";

	# go backwards till we find the previous payday
	my $prev_payday;
	for ($prev_payday = $last_date; time2str('%A', $prev_payday) ne $dow; $prev_payday -= $DAY)
	{
	}

	# now go forwards from previous payday until we hit a point later than about 3 days from now,
	# and pay attention to if we pass any birthdays
	my $target = str2time(time2str('%m/%d/%Y', time)) + 3 * $DAY;
	# bump it by 2 hours to deal with DST
	my $last_payday;
	for ($last_payday = $prev_payday + 2 * $HOUR + $WEEK; $last_payday < $target; $last_payday += $WEEK)
	{
		calc_paycheck($last_payday, $data);
	}
	calc_paycheck($last_payday, $data);									# don't forget the final paycheck!

	say "    last paycheck : ", time2str('%m/%d/%Y', $prev_payday);
	say "    next paycheck : ", time2str('%m/%d/%Y', $last_payday);
	say "    weekly owed   : $data->{weeks_owed} weeks totalling \$$data->{weekly_total}";
	say "    bday bonus    : $data->{num_bdays} bdays totalling \$$data->{bday_total}";
}


func calc_paycheck ($payday, $data)
{
	debuggit(4 => "payday:", time2str('%m/%d/%y', $payday));
	++$data->{weeks_owed};

	my $birthday = str2time(join('/', time2str('%m/%d', $FAMILY{$_}), time2str('%Y', $payday)));
	if ($payday > $birthday and $payday - $birthday < $WEEK)			# if birthday is less than a week prior ...
	{
		# ... then we passed a birthday: up the weekly amount and add a bonus
		++$data->{num_bdays};
		$data->{bday_total} += $data->{age} * 25;
		++$data->{age};
		debuggit(3 => "think last bday", time2str('%m/%d/%y', $birthday), "was this week:",
				"difference", ($payday - $birthday) / $DAY);

		if (time2str('%m/%d', $payday) eq time2str('%m/%d', $FAMILY{$_}))
		{
			# birthday falls on a payday; this week doesn't count
			--$data->{weeks_owed};
			# and don't add to the total this week
			next;
		}
	}

	$data->{weekly_total} += $data->{age};
}
