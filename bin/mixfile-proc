#! /usr/bin/env perl

use 5.14.0;
use autodie ':all';
use charnames ':full';
use warnings FATAL => 'all';

use Roman;
use Debuggit DEBUG => 1;
use Path::Class::Tiny;
use Scalar::Util qw< looks_like_number >;
use List::AllUtils qw< max zip apply pairmap >;


my $MODES =
{
	'mix-list'			=>	{
								end_of_block	=>	\&gather_names,
								block_line		=>	sub {},
								end_of_file		=>	\&print_mix_names,
							},
	'check-spectrum'	=>	{
								end_of_block	=>	\&gather_names,
								block_line		=>	sub {},
								end_of_file		=>	\&compare_spectrum,
							},
	'print-spectrum'	=>	{
								end_of_block	=>	sub {},
								block_line		=>	sub {},
								end_of_file		=>	\&print_spectrum,
							},
	'mix-stats'			=>	{
								end_of_block	=>	\&gather_mixes,
								block_line		=>	\&check_for_blogged,
								end_of_file		=>	\&print_mix_summary,
							},
	'mix-stats-completed'=>	{
								end_of_block	=>	\&gather_mixes,
								block_line		=>	\&check_for_blogged,
								end_of_file		=>	\&print_completed_mix_summary,
							},
	'mix-artists'		=>	{
								end_of_block	=>	\&print_volume_summary,
								block_line		=>	\&collect_artist,
								end_of_file		=>	\&print_artist_stats,
							},
};

my %ROMAN =
(
	I		=>	1,
	II		=>	2,
	III		=>	3,
	IV		=>	4,
	V		=>	5,
	VI		=>	6,
	VII		=>	7,
	VIII	=>	8,
	IX		=>	9,
	X		=>	10,
);

my %SYMBOL =
(
	0		=>	' ',
	1		=>	'/',
	2		=>	"\N{N-ARY LOGICAL AND}",
	3		=>	"\N{CYRILLIC CAPITAL LETTER HA WITH STROKE}",
	4		=>	"\N{NOT IDENTICAL TO}",
	5		=>	'*',
);

my $mode = shift;
die("unrecognized mode: $mode") unless exists $MODES->{$mode};
my $process = $MODES->{$mode};

my $file = file(pop);
say STDERR "processing mixfile $file";

$. = 1;
my %header;
my $in_header = 0;
my @spectrum;
my $in_spectrum = 0;
foreach ( $file->slurp )
{
	chomp;
	if ($in_header)
	{
		next if /^$/;													# blank line
		$header{line} //= $.;											# line number block starts on
		given ($_)
		{
			next						when '';						# blank line
			$header{volume} = $_		when /^[A-Z\d][a-z\d][^\t]+$/;	# mix name and volume
			$header{subtitle} = $_		when /^\[.*\]\??$/;				# volume subtitle
			$header{stats} = $1			when /^\{(.*)\}/;				# statistics
			$in_header = 0				when /^[=-]{3,}$/;				# end of header
			# otherwise:
			# 	this appears to be a "continution block"
			# 	keep volume, ditch everything else, drop out of header, retry current line
			reset_header( keep => 'volume' );
			redo;
		}

		next;
	}

	if ( $_ eq '' )									# blank line
	{
		$process->{end_of_block}->();
		# prepare to read another header
		reset_header();
		$in_header = 1;
	}
	elsif ( /^Spectrum/ )
	{
		$in_spectrum = 1;
	}
	elsif ($in_spectrum)
	{
		$in_spectrum = 0, next if /^[-]{5,}$/;
		chomp;
		push @spectrum, $_ if s/^\t\t//;
	}
	else
	{
		$process->{block_line}->();
	}
}
continue
{
	++$.;
}
$process->{end_of_file}->();


########################
# common routines      #
# (can be used by many #
# different modes)     #
########################

sub reset_header
{
	my %args = @_;
	$in_header = 0;
	foreach (keys %header)
	{
		$header{$_} = undef unless ($args{keep} // '') eq $_;
	}
}


my (@mixes, $num_lines, %seen, $blogged);
# this is taken from `blogify`, whence it was stolen from elsewhere (on the Internet)
my $roman_numeral; BEGIN { $roman_numeral = qr/\bM{0,4}(?:CM|CD|D?C{0,3})(?:XC|XL|L?X{0,3})(?:IX|IV|V?I{0,3})\b/; }


##################
# mix-list       #
# check-spectrum #
##################

sub gather_names
{
	if ( $header{volume} )
	{
		my $mix = $header{volume} =~ s/\s+ $roman_numeral $//xr;
		push @mixes, $mix unless $seen{$mix}++;
	}
}

sub print_mix_names
{
	say foreach sort @mixes;
}

sub compare_spectrum
{
	my %exclude  = map { $_ => 1 } ("Random's Mix", "Perrin's Mix", "Mother's Day", "In Search of ...");
	my %spectrum = map { $_ => 1 } @spectrum;
	my @leftovers;
	$spectrum{$_} ? delete $spectrum{$_} : push @leftovers, $_ foreach grep { not $exclude{$_} } @mixes;
	if (keys %spectrum)
	{
		say "IN SPECTRUM BUT NO MIX:";
		say "    $_" foreach sort keys %spectrum;
	}
	if (@mixes)
	{
		say "MIX NOT IN SPECTRUM:";
		say "    $_" foreach sort @leftovers;
	}
}

##################
# print-spectrum #
##################

sub _print_cols
{
	my ($indent, $left, $right) = @_;
	my $line = '';
	$_ = ' ' x ($indent * 4) . $_ foreach ($left, $right);
	$line .= $left;
	$line .= ' ' x (55 - length($left));
	$line .= $right;
	say $line;
}

sub print_spectrum
{
	my $list_is_odd = @spectrum % 2;
	my $col_height = int(@spectrum / 2) + $list_is_odd;
	my $list_height = $col_height + 5;
	my $spacer_lines = int((48 - $list_height) / 2);
	my @left = @spectrum[0..($col_height-1)];
	my @right = @spectrum[$col_height..$#spectrum];
	unshift @right, '' if $list_is_odd;
	die("calculation error") unless @left == @right;

	print "\n" x $spacer_lines;
	say '-' x 100;
	say "Spectrum of Mixes:";
	_print_cols( 1 => '[upbeat]', '...' );
	pairmap { _print_cols( 2 => $a, $b ) } zip @left, @right;
	_print_cols( 1 => '...', '[downbeat]' );
	say '-' x 100;
	print "\n" x $spacer_lines;
}

#############
# mix-stats #
#############

sub gather_mixes
{
	debuggit(4 => "gathering:", DUMP => \%header);

	# push what we found so far onto our list
	# (note! not every block is a mix; each mode must filter out whatever it can use)
	my ($time, $complete);
	($time, $complete) = $header{stats} =~ /time:\h+(\d+:\d+).*?score:\h+(\d+\.\d+)%/ if $header{stats};
	# we at least must have a name though ...
	if ($header{volume})
	{
		push @mixes,	{
							name		=>	$header{volume},
							subtitle	=>	$header{subtitle},
							volno		=>	$header{volno},
							time		=>	$time,
							score		=>	$complete,
							blogged		=>	$blogged,
							startline	=>	$header{line},
							endline		=>	$.,
							numlines	=>	$num_lines,
						};
	}

	# reset stuff
	$blogged = 0;
	$num_lines = 0;
}

sub check_for_blogged
{
	++$num_lines;
	if ( /^\./ )
	{
		$blogged = 1;
	}
}


#############
# mix-stats #
#############

sub FMT () { "(%s) %-*s || %6s%%     %s\n" }

sub _subtitle () { $_->{subtitle} ? "$_->{subtitle}" : "..." }

sub print_mix_summary
{
	debuggit(3 => "found:", DUMP => \@mixes);
	my $maxlen = max map { length $_->{name} } @mixes;

	my $num_completed = 0;
	# only care about those that have a 'complete' score
	foreach ( sort { $a->{score} <=> $b->{score} || $a->{blogged} <=> $b->{blogged} } grep { $_->{score} } @mixes )
	{
		if ( $_->{score} == 100 and $_->{blogged} )
		{
			++$num_completed;
		}
		else
		{
			printf(&FMT, $_->{blogged} ? '+' : ' ', $maxlen, $_->{name}, $_->{score}, _subtitle);
		}
	}
	printf(&FMT, '+', $maxlen, "-- $num_completed ADDITIONAL MIXES --", "100.00", '');
}

sub print_completed_mix_summary
{
	debuggit(3 => "found:", DUMP => \@mixes);
	debuggit(4 => "spectrum:", DUMP => \@spectrum);
	my $maxlen = max map { length $_->{name} } @mixes;
	my %spectrum = map { $spectrum[$_] => $_ } 0..$#spectrum;

	# only care about those that have a 'complete' score higher than 2/3rds
	# and print all mixes, even the 100% ones
	printf(&FMT, $_->{blogged} ? '+' : ' ', $maxlen, $_->{name}, $_->{score}, _subtitle)
		foreach
			sort  { $a->{tempo} <=> $b->{tempo} || $a->{volno} <=> $b->{volno}	}
			apply { $_->{tempo} = $spectrum{ $_->{mix} } // (warn("no tempo! [$_->{name}]"), -1)	}
			apply { $_->{volno} = arabic( $_->{volno} // 'I' )										}
			apply { $_->{mix}   = $_->{name} =~ s/\s+ ($roman_numeral) $//xr						}
			grep  { ($_->{score} // 0) >= 100 * 2/3													}
				  ( @mixes																			)
	;
}


###############
# mix-artists #
###############

sub _in_the_right_mix
{
	state $right_mix = do
	{
		# while in here, doing a thing which will only be done once per script run,
		# go ahead and set up our output file handle
		open(PAGER, '|-:encoding(UTF-8)', $ENV{PAGER});
		select PAGER;

		my $mix_line = shift @ARGV or die("must specify mix to analyze artists on");
		unless ( $mix_line =~ s/\s+ $roman_numeral $//x )
		{
			warn("assuming unnumbered mix");
		}
		$mix_line;
	};

	return undef unless $header{volume};
	$header{mix} //= do
	{
		my $m = $header{volume} =~ s/\s+ ($roman_numeral) $//xr;
		$header{volno} = $1 // 'I';
		$m
	};
	return $header{mix} eq $right_mix;
}

my ($track_pos, %artist_count, %artist_total, %artist_pos, %artist_distances);
sub collect_artist
{
	if (_in_the_right_mix())
	{
		my ($title, $artist, $soundtrack) = /^ .... \h+ (.*?) \h - \h (.*?) (?: \h \[ (.*?) \] )? (?: \t|$ )/x;
		die("can't work out title/artist from line: |$_|") unless $title and $artist;
		$artist = "[$soundtrack]" if $soundtrack and grep { not looks_like_number($_) } split('/', $soundtrack);
		$artist =~ s/^ the \h //xi;

		++$track_pos;
		++$artist_count{ $artist };
		++$artist_total{ $artist }->{ $header{volno} };
		push @{ $artist_distances{ $artist} }, $track_pos - $artist_pos{ $artist } if $artist_pos{ $artist };
		$artist_pos{ $artist } = $track_pos;
	}
}

sub print_volume_summary
{
	if (_in_the_right_mix())
	{
		my @artists =
			sort { $a cmp $b             }
			grep { $artist_count{$_} > 1 }
			keys %artist_count;

		if (@artists)
		{
			say "\n\n$header{volume}";
			say "=" x length($header{volume});
			printf "%-40s : %2d  [%s]\n", $_, $artist_count{$_}, join(',', @{ $artist_distances{$_} }) foreach @artists;
		}

		# reset for next volume
		$track_pos = 0;
		%artist_count     = ();
		%artist_pos       = ();
		%artist_distances = ();
	}
}

sub print_artist_stats
{
	my $header = 'TOTAL FOR MIX:';
	say "\n\n$header";
	printf "%-40s        %s\n", "=" x length($header), join('|', sort { $ROMAN{$a} <=> $ROMAN{$b} } keys %ROMAN);
	my @artists;
	foreach ( keys %artist_total )
	{
		my $artist = [ $_ ];
		my ($count, @volumes);
		my $astats = $artist_total{$_};
		foreach ( keys %$astats )
		{
			$count += $astats->{$_};
		}
		next unless $count > 1;
		my $volmap = join('|',
			pairmap { $b . ' ' x (length($a) - length($b))  }
			pairmap { ($a, ' ' x int(length($a)/2) . $b)    }
			map     { ($_ => $SYMBOL{ $astats->{$_} // 0 }) }
			sort    { $ROMAN{$a} <=> $ROMAN{$b}             }
			keys    %ROMAN
		);
		push @$artist, $count, $volmap;
		push @artists, $artist;
	}
	printf "%-40s : %2d  [%s]\n", @$_ foreach
		sort { $b->[1] <=> $a->[1] || $a->[0] cmp $b->[0] }
			@artists;

	close PAGER;
}
