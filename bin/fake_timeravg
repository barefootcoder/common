#! /usr/bin/env perl

use myperl DEBUG => 1;

use Getopt::Std;


my $opts = {};
getopts('v', $opts);

my $num_weeks = shift;
$num_weeks = date_to_weeks($num_weeks) if $num_weeks and $num_weeks =~ m{^ \d+ / \d+ ( / \d+ )? $}x;
die("usage: $0 [-v] num_weeks|date") unless $num_weeks and $num_weeks =~ /^\d+$/;


my @files = `ls -1r ~/timer/timer.20* | head -n$num_weeks`;
chomp @files;

my $total_time = 0;
my $total_avail = 0;
for my $file (@files)
{
	my ($time, $avail) = time_and_avail($file);
	die("can't get avail for file $file") unless $avail;
	$total_time += $time;
	$total_avail += $avail;
}
debuggit(3 => "total time:", $total_time, "total avail:", $total_avail);

my $this_week = time_and_avail("$ENV{HOME}/timer/timer-new");
debuggit(2 => "this week:", $this_week);

say "Average time: ", $total_time / $num_weeks;
say "Average availability: ", $total_avail / $num_weeks;
say "Time Remaining: ", print_time( (30 - $this_week) + ($num_weeks * 30 - $total_time) );


func date_to_weeks ($date)
{
	use Time::ParseDate;

	$date = parsedate($date, PREFER_PAST => 1) or die("can't make sense of date");
	my $weeks = int( (time - $date) / 60 / 60 / 24 / 7 );

	debuggit(2 => "number of weeks is", $weeks);
	return $weeks;
}


func time_and_avail ($file)
{
	my ($time, $avail);

	open(IN, "fake_timer total email $file |") or die("can't open pipe");
	while ( <IN> )
	{
		#  0 hrs, 36 mins : cpan
		my ($hrs, $mins, $timer) = /^ \s* (\d+) \s+ hrs, \s+ (\d+) \s+ mins \s* : \s* (.+) $/x;
		die("got a dangling timer") if /-$/ and $file !~ /new$/;
		next unless $timer and ( $timer eq 'GRAND TOTAL' or $timer eq 'AVAILABILITY' );

		if ($opts->{v})
		{
			say "$file : $timer $hrs:$mins";
		}
		$time = $hrs + $mins / 60 if $timer eq 'GRAND TOTAL';
		$avail = $hrs + $mins / 60 if $timer eq 'AVAILABILITY';
	}
	close(IN);

	debuggit(4 => "for file", $file, "time is", $time, "and avail is", $avail);
	return wantarray ? ($time, $avail) : $time;
}


func print_time ($time)
{
	$time = round($time, .25);
	my $hrs = int($time);
	my $mins = abs( ($time - $hrs) * 60 );

	return sprintf("%2d:%02d", $hrs, $mins);
}
