#! /usr/bin/env perl

use myperl::Script;
use autodie ':all';

use Date::Easy;

const my $AVAIL => ':AVAILABILITY';


opts <<'-';
	[-akvD] [-w <num>] <command> <cmd_arg> file [...]
	-a : operate on all weeks (default: only the latest/first one found)
	-k : skip the current week (only works with -a and/or -w)
	-v : be more verbose (currently only works with `review' command)
	-D : debug mode (implies -v)
	-w : operate on <num> weeks ago (1 == current week--default)
	commands (and what <cmd_arg> represents) are:
	*  start <timer>     : start the given timer
	*  half <timer>      : start the given timer in half-timing mode
	*  pause <timer>     : pause all timers, or pause availability if <timer> is `:AVAILABILITY'
	*  new-week <timer>  : start <timer>, then create a new week, retaining comments with tickets or marked `SAVE`
	*  total <timer>     : total of timers for the first week containing <timer>
	*  eod <date>        : total of timers for a given date
	*  breakdown <timer> : break down <timer> into chunks and display times and durations of each chunk
	*  daybreak <date>   : show all the chunks for a given date
	*  review <prefix>   : total of timers by ticket (all weeks) where timer has a ticket and name begins with <prefix>
-
$OPT{v} = 1 if $OPT{D};

my $cmd = shift;
my $arg = shift;
die("can't use -w# with new-week") if $cmd eq 'new-week' and $OPT{w};
my ($tname, $today, $prefix);
if ($cmd eq 'eod' or $cmd eq 'daybreak')
{
	$today = date($arg // today);
}
elsif ($cmd eq 'review')
{
	$prefix = $arg // '';
}
else
{
	$tname = $arg;
}
# need to handle setting $AVAIL specially for 'new-week' if it's Monday or Tuesday
my $set_avail = $cmd eq 'new-week' && today->day_of_week <= 2 ? 'new week' : 'old week';

my ($group_found, $timer_found, $avail_found) = (0,0,0);
my ($in_week, $cur_week) = (0,0);
my (%totals, @daybreak, %review, @mondays);
my ($week_timers, @week_timers, %week_timers, %no_time_timers);

my $processed_labels = 0;
while ( <> )
{
	debug(LINE => $_);
	if (/^\s*$/)
	{
		if ($cmd eq 'new-week' and ($in_week and $cur_week == 1))
		{
			$week_timers .= $_;
			if ($processed_labels)
			{
				$in_week = 0;
				debug(CMD => "new-week", week_data_tag('printing header'));

				if ($set_avail eq 'new week')							# we need to start $AVAIL timer
				{
					pop @week_timers if $week_timers[-1] eq $AVAIL;
					say foreach @week_timers;
					say "$AVAIL\t", time(), '-';
					$avail_found = 1;
				}
				else													# we can just dump all timer names
				{
					say foreach @week_timers;
				}
				say '';
				print $week_timers{$_} // "$_:\n" foreach grep { not /^:/ } @week_timers;
				say '';
				print $week_timers;
			}
			next;
		}

		if ( $processed_labels )
		{
			$in_week = 0;
			if ( $cmd ~~ [qw< total eod daybreak >] )
			{
				if ($group_found)
				{
					if ($cmd eq 'daybreak')
					{
						breakdown(sort @daybreak);
					}
					else
					{
						my $total = my $lines = 0;
						push @mondays, $totals{':MINDATE'} if $OPT{a};
						$totals{':MINDATE'} //= 'N/A';
						$totals{':MAXDATE'} //= 'N/A';
						say range_label($totals{':MINDATE'}, $totals{':MAXDATE'}, ':') if $cmd eq 'total';
						foreach (sort keys %totals)
						{
							next if /^:/;
							$total += $totals{$_};
							++$lines;
							print_time($_, $totals{$_});
						}
						print_time("GRAND TOTAL", $total) if $lines > 1;
						print_time("AVAILABILITY", $totals{$AVAIL}) if $totals{$AVAIL};
					}
					if ($OPT{a})
					{
						say "  (total as of " . now . ")";
						exit if $OPT{w} and $cur_week > $OPT{w};
					}
					else
					{
						say "  (total as of " . now . ")";
						exit;
					}
					say '';
					$group_found = 0;
				}
				else
				{
					undef %totals;
				}
			}
		}

		print unless $cmd ~~ [qw< breakdown total eod daybreak review >];
		next;
	}

	chomp;
	my ($name, $chunks, @stuff) = split("\t");
	$chunks ||= '';
	if ( $name )
	{
		if ( $name =~ /:$/ )
		{
			$processed_labels = 1;
		}
		else
		{
			if ( !$in_week )
			{
				++$cur_week;
				$in_week = 1;
				debuggit(4 => "incremented week to $cur_week at name $name");
			}
			$processed_labels = 0;
		}
	}

	if ($chunks and substr($chunks, -1, 1) eq '-' and $cmd ~~ [qw< start half pause new-week >])
	{
		$chunks .= time() . ',' unless $name eq $AVAIL and $tname ne $AVAIL;
	}
	if ( $cmd ~~ [qw< start half new-week >] )
	{
		if ($name eq $tname and !$timer_found)
		{
			$timer_found = 1;
			$chunks .= ($cmd eq 'half' ? '2/' : '') . time() . '-';
		}
		elsif ($name eq $AVAIL and !$avail_found)
		{
			$avail_found = 1;
			if ($set_avail eq 'old week')								# 'new week' handled elsewhere
			{
				$chunks .= time() . '-' unless $chunks =~ /-$/;
			}
		}
	}

	if ($cmd eq 'breakdown')
	{
		if ($name eq $tname and include_week($cur_week))
		{
			breakdown(split(',', $chunks));
			exit unless $OPT{a};
		}
		next;
	}
	elsif ( $cmd ~~ [qw< total eod daybreak >] )
	{
		if (include_week($cur_week))
		{
			$group_found = 1 if $cmd eq 'total' and $name eq $tname;
			my $sub;
			if ( $name =~ s/:$// )
			{
				if (my $ticket = extract_ticket(@stuff))
				{
					$sub = sprintf("%-20s  [%s]", $name, $ticket);
					$totals{$sub} += delete $totals{$name} if exists $totals{$name};
				}
				next;
			}
			else
			{
				$sub = $name;
				$sub =~ s/(-nw)+$//;
			}
			foreach (split(',', $chunks))
			{
				warn("no from time on timer $name, line $.") if /^-/;
				warn("bad time on timer $name, line $.") unless /^\d/;
				my ($from, $to) = date_range($_);
				if ($cmd eq 'eod' and $from == $today)
				{
					$group_found = 1;
					$totals{$sub} += total_chunk($_);
				}
				elsif ($cmd eq 'daybreak' and $from == $today and $name ne $AVAIL)
				{
					$group_found = 1;
					push @daybreak, "$_:$name";
				}
				elsif ($cmd eq 'total')
				{
					$totals{$sub} += total_chunk($_);
					$totals{':MINDATE'} = $from if not defined $totals{':MINDATE'} or $from < $totals{':MINDATE'};
					# $from and $to are nearly always the same
					# the only they wouldn't be is if a timer crossed a date boundary
					# and, in that (unlikely) scenario, we'd want to consider the timer to be on the
					# date that it started, not the date where it ended
					$totals{':MAXDATE'} = $from if not defined $totals{':MAXDATE'} or $from > $totals{':MAXDATE'};
				}
			}
		}
		next;
	}
	elsif ($cmd eq 'review')
	{
		if ($name =~ /^$prefix/)
		{
			if ($name =~ s/:$//)
			{
				my $ticket = extract_ticket(@stuff);
				$review{$name}->{ticket} = $ticket if $ticket;
				$review{$name}->{descr} = $chunks;
			}
			else
			{
				if ($chunks)
				{
					my $total = sum map { scalar total_chunk($_) } split(',', $chunks);
					$review{$name}->{total} += $total;
					if ($OPT{v})
					{
						my $min = min map { $_ ? (date_range($_))[0] : () } split(',', $chunks);
						my $max = max map { $_ ? (date_range($_))[1] : () } split(',', $chunks);
						print_time(range_label($min, $max), $total);
					}
				}
			}
		}
		next;
	}
	elsif ($cmd eq 'new-week' and $in_week and $cur_week == 1)
	{
		debug(CMD => "new-week", week_data_tag('gathering data'));
		if ($processed_labels)
		{
			my $timer_name = $name =~ s/:$//r;							# turn label name back into timer name
			if (my $save = save_ticket(@stuff))
			{
				my $new_stuff = "$_\n";
				$new_stuff =~ s/\(.*?\)\t/()\t/ if $save eq 'p';
				$week_timers{$timer_name} = $new_stuff;
			}
			unless ( $no_time_timers{$name} )
			{
				warn("no comment for timer: $timer_name") unless $chunks;
				warn("comment for timer is incomplete: $timer_name") if $chunks and $chunks =~ /\(\)$/;
				$week_timers .= "$_\n";
			}
		}
		else
		{
			push @week_timers, $name;
			if ($chunks)
			{
				$week_timers .= join("\t", $name, $chunks, @stuff) . "\n";
			}
			else
			{
				$no_time_timers{"$name:"} = 1;
			}
		}
		next;
	}

	print join("\t", $name, $chunks, @stuff), "\n";
}

if ($cmd eq 'review')
{
	debuggit(3 => "review hash:", DUMP => \%review);
	print_time(sprintf("%-7s/%-15s [ %-20s ]", $review{$_}->{ticket}, $_, $review{$_}->{descr}), $review{$_}->{total})
			foreach
				sort { $review{$a}->{ticket} cmp $review{$b}->{ticket} }
				grep { $review{$_}->{total} && $review{$_}->{ticket} }
				keys %review;
}

if ($cmd eq 'total' and $OPT{a})
{
	my $DAY = 24 * 60 * 60;
	my $WEEK = 7 * $DAY;
	debuggit(3 => "mondays:", DUMP => \@mondays);
	@mondays = sort { $a <=> $b } map { int($_->epoch / $WEEK) } @mondays;
	debuggit(3 => "week nums:", DUMP => \@mondays);
	for (1..$#mondays)
	{
		foreach ( ($mondays[$_-1] + 1)..($mondays[$_] - 1) )
		{
			# the beginning of the epoch was a Thursday ... in England
			# in the U.S., it was still Wednesday
			# so, to get a Monday, we have to add 5 days
			my $date = datetime($_ * $WEEK + $DAY * 5)->strftime("%m/%d/%Y");
			say STDERR "Missing week: $date";
		}
	}
}


sub debug
{
	if ( $OPT{D} )
	{
		my ($cat, @m) = @_;
		chomp $m[-1];
		printf STDERR "# %-4s => %s\n", $cat, join(' ', @m);
	}
}

sub week_data_tag
{
	if ( $OPT{D} )
	{
		my $array = scalar      @week_timers;
		my $hash  = scalar keys %week_timers;
		return "[$_[0] ($cur_week:$in_week/$processed_labels#$array/$hash)]";
	}
}


sub get_date
{
	my ($time) = @_;
	$time //= now;
	debuggit(4 => "get_date: got time", $time);

	# times before 6am are considered "yesterday", so just subtract 6 hours from the actual time
	return date($time - 60 * 60 * 6);
}


sub date_range
{
	my ($chunks) = @_;
	debuggit(4 => "date_range: got chunk", $chunks);

	$chunks =~ m{^(?:2/)?(\d+).*-(?:(\d+),?)?$};
	return (get_date($1), get_date($2));
}

sub range_label
{
	my ($from, $to, $suffix) = @_;
	$suffix //= '';
	foreach ($from, $to)
	{
		$_ = $_->as('/Ymd') unless $_ eq 'N/A';
	}
	return "time from $from to $to" . $suffix;
}

sub include_week
{
	my ($week) = @_;
	#	 -k         : skip the current week, regardless of other switches
	return 0 if $OPT{k} and $week == 1;
	if ($OPT{w})
	{
		# -a + -w<N> : include all weeks up to and including <N>
		#      -w<N> : include all weeks beginning with <N>
		return $OPT{a} ? $cur_week <= $OPT{w} : $cur_week >= $OPT{w};
	}
	else
	{
		# -a         : include all weeks, period
		#            : include only the current week
		return $OPT{a} || $week == 1;
	}
}


sub total_chunk
{
	my ($chunk) = @_;

	my $half = s{^2/}{};
	my ($from, $to) = split('-');

	my $mins = (($to || time()) - $from) / 60;
	$mins /= 2 if $half;
	$mins = round(UP => $mins);

	return wantarray ? ($from, $to, $mins, $half) : $mins;
}


sub print_time
{
	my ($label, $mins) = @_;

	my $hrs = round(DOWN => $mins / 60);
	$mins %= 60;
	printf("%2d hrs, %2d mins : %s\n", $hrs, $mins, $label);
}


sub extract_ticket
{
	my (@stuff) = @_;
	return $stuff[-1] && $stuff[-1] !~ /^SAVE/ ? $stuff[-1] : undef;
}

sub save_ticket
{
	my (@stuff) = @_;
	return $stuff[-1] && $stuff[-1] =~ /^(\d+|[A-Z]+-\d+|SAVE(\w)?)$/ ? $2 // 1 : 0;
}


sub breakdown
{
	my $total_mins = 0;
	foreach (@_)
	{
		my $tname; s/:([\w-]+)$// and $tname = $1;
		my ($from, $to, $mins, $half) = total_chunk($_);

		$from = localtime($from);
		$to = $to ? localtime($to) : 'current  (still timing) ';
		my $duration = "$from - $to";
		$duration .= " (half time)" if $half;
		$duration .= " [$tname]" if $tname;
		print_time($duration, $mins);
		$total_mins += $mins;
	}
	#printf("%5d mins : TOTAL\n", $total_mins);
	print_time("TOTAL  (as of " . now . ")", $total_mins);
}
