#! /bin/bash

# chkconfig: 345 85 15
# description: Startup script for dropbox daemon
#
# processname: dropboxd
# pidfile: ~/.dropbox-ctl/run/dropbox.pid
# config: ~/.dropbox-ctl/sysconfig/dropbox
#

### BEGIN INIT INFO
# Provides: dropboxd
# Required-Start: $local_fs $network $syslog
# Required-Stop: $local_fs $syslog
# Should-Start: $syslog
# Should-Stop: $network $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start up the Dropbox file syncing daemon
# Description:       Dropbox is a filesyncing sevice provided by dropbox.com
#                    This service starts up the dropbox daemon.
### END INIT INFO


# Make sure umask is sane
umask 022

basedir=~/.dropbox
prog=dropboxd
ctldir=~/.dropbox-ctl
distdir=~/.dropbox-dist
piddir=$ctldir/run
pidfile=$piddir/dropbox.pid
lockdir=$ctldir/lock
lockfile=${LOCKFILE-$lockdir/$prog}
config=${CONFIG-$ctldir/sysconfig/dropbox}
filter=$ctldir/sysconfig/output_filter
logdir=$ctldir/log
logfile=$logdir/dropboxd.log
RETVAL=0

[ -f $config ] && . $config

start() {
	if [[ -n $($0 status) ]] ; then
		exit 1
	fi

	if [[ -f $lockfile ]] ; then
		echo $"$prog is locked out; cannot start"
		RETVAL=13
	else
		echo -n $"Starting $prog"

		/bin/sh -c "nice $distdir/$prog 2>&1 | fgrep -vf $filter >>$logfile &"
		RETVAL=$?
		echo
		if [ $RETVAL = 0 ] ; then
			mkdir $piddir 2>/dev/null
			$0 status >${pidfile}
		fi
	fi
	return $RETVAL
}

status() {
	dbpid=`pgrep -u $USER -P 1 dropbox`
	if [ -t 1 ] ; then
		if [ -z $dbpid ] ; then
			echo "$prog for $USER: not running."
			[[ -e ${lockfile} ]] && echo "$prog is locked out; will not start."
		else
			echo "$prog for $USER: running (pid $dbpid)"
		fi
	else
		if [[ -n $dbpid ]] ; then
			echo $dbpid
		fi
	fi
}

stop() {
	echo -n $"Stopping $prog"
	pkill -f $distdir/dropbox
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && rm -f ${pidfile}
}

lock() {
	echo $"Locking out $prog"
	mkdir $lockdir 2>/dev/null
	touch ${lockfile}
	RETVAL=0
}

unlock() {
	if [[ -f $lockfile ]] ; then
		echo $"Unlocking $prog for use (\`start' to start)"
		rm -f ${lockfile}
		RETVAL=$?
	else
		echo $"$prog is already unlocked"
		RETVAL=1
	fi
}

install () {
	remote=$1
	if [[ $remote == *: ]]
	then
		remote=${remote%:}
		check="ssh $remote"

		if [[ $($check echo $SHELL) != /bin/tcsh ]]
		then
			echo "can't install to machine until you change your shell" >&2
			exit 1
		fi

		if [[ -n $($check ls $distdir 2>/dev/null) ]]
		then
			echo "won't install to a machine that already has Dropbox on it" >&2
			exit 1
		fi

		arch=$($check uname -i)
		case $arch in
			*86_64)	arch=x86_64
					;;
			*86)	arch=x86
					;;
			*)		echo "don't know what kind of architecture your machine has ($arch)"
					exit 1
					;;
		esac

		echo "will install Dropbox $arch version"
		echo -n "is this okay?  [y/N] "
		read yn
		if [[ $yn != [yY]* ]]
		then
			exit
		fi

		scp ~/common/new_dropbox ~/bin/dropbox $remote:
		ssh $remote echo ~/$(basename $0) $arch \> .login

		exec ssh $remote
	fi

	if [[ -d $distdir ]]
	then
		if [[ $1 == "force" ]]
		then
			shift 1
			/bin/rm -rf $distdir
		else
			echo "Dropbox already installed; won't reinstall without \`force'" >&2
			exit 1
		fi
	fi

	arch=${1:-$(uname -i)}
	case $arch in
		x86)	;;
		x86_64)	;;
		*)		echo "usage: $0 install [force] [x86|x86_64]" >&2
				exit 2
				;;
	esac

	cd ~
	tarfile=dropbox.tar.gz
	wget -O$tarfile --no-check-certificate "http://www.dropbox.com/download/?plat=lnx.$arch"
	tar xvpzf $tarfile

	configure										# defined below

	rm $tarfile

	if [[ -x ./dropbox ]]
	then
		./dropbox start
	elif [[ -x ~/bin/dropbox ]]
	then
		~/bin/dropbox start
	else
		/bin/sh -c "$distdir/dropboxd &"
	fi

	if [[ -r .login ]]
	then
		/bin/rm -f .login
	fi

	makeln=~/common/makeln
	fix_perms=~/common/fix_perms
	fortune=~/common/fortunes/buddy
	until [[ -r $makeln && -r $fix_perms && -r $fortune ]]
	do
		echo "Waiting for makeln et al ..."
		sleep 10
	done

	cd ~/common
	if [[ ! -x makeln ]]
	then
		source $fix_perms
	fi

	mkdir -p ~/local/fortunes ~/local/bin
	./makeln

	if [[ -x ./dropbox ]]
	then
		/bin/rm -f ./dropbox
	fi
}

configure() {
	mkdir -p $ctldir/lock
	mkdir -p $ctldir/run
	mkdir -p $ctldir/sysconfig

	mkdir -p $logdir
	ln -sf $basedir/logs/*/* $logdir

	echo "Gdk-CRITICAL **: IA__gdk_window_get_root_coords: assertion \`GDK_IS_WINDOW (window)' failed" >$filter
}

# See how we were called.
case "$1" in
  start)
        start
        ;;
  status)
        status
        ;;
  stop)
        stop
        ;;
  restart)
        stop
        start
        ;;
  lock)
		stop
        lock
        ;;
  unlock)
        unlock
        ;;
  install)
		shift 1
		install "$@"
		;;
  configure)
        configure
		;;
  *)
        echo $"Usage: $0 {start|status|stop|restart|install}"
        RETVAL=3
esac

exit $RETVAL
