#! /usr/bin/perl

use Getopt::Std;
use File::Basename;


getopts('fseb:Bh');

if ($opt_h)
{
	print STDERR "usage: ", basename($0), " -h | [-sfe] [-B | -b env_var] [dir ...]\n";
	print STDERR "       -s : return dirs separated by space (default: colon)\n";
	print STDERR "       -f : add dir(s) to front of list instead of back\n";
	print STDERR "       -e : output shell commands suitable for eval'ing\n";
	print STDERR "       -b : use this env_var's value as the base list to add to [default: \$PATH]\n";
	print STDERR "       -B : start with a blank base list\n";
	print STDERR "       -h : this help message\n";
	print STDERR "     dirs that do not exist and duplicate dirs are removed from the list\n";
	print STDERR "     this is true even if the dirs are in the base list instead of the supplied list\n";
	exit;
}

$opt_b ||= 'PATH';
unless ($opt_B)
{
	@dirs = split(':', $ENV{$opt_b});
	%dirs = map { $_ => 1 } @dirs;
}

foreach $dir (@ARGV)
{
	if ($dir and not exists $dirs{$dir} and -d $dir)
	{
		push @newdirs, $dir;
		$dirs{$dir} = 1;
	}
}
if ($opt_f)
{
	unshift @dirs, @newdirs;
}
else
{
	push @dirs, @newdirs;
}

my $out = join($opt_s ? ' ' : ':', @dirs);
if ($opt_e)
{
	print set_for_shell($opt_b, $out);
}
else
{
	print $out;
}


sub set_for_shell
{
	use Shell::Guess;
	use Shell::Config::Generate;

	my ($base, $path) = @_;

	my $conf = Shell::Config::Generate->new;
	$conf->set($base, $path);
	return $conf->generate;												# should be for the shell that called us
}
