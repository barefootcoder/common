#! /usr/bin/perl

use strict;
use warnings;
use autodie ':all';

use Getopt::Std;
use File::Basename;


my $opts = {};
getopts('fseb:BDh', $opts);

if ($opts->{h})
{
	print STDERR "usage: ", basename($0), " -h | [-sfe] [-B | -b env_var] [dir ...]\n";
	print STDERR "       -s : return dirs separated by space (default: colon)\n";
	print STDERR "       -f : add dir(s) to front of list instead of back\n";
	print STDERR "       -e : output shell commands suitable for eval'ing\n";
	print STDERR "       -b : use this env_var's value as the base list to add to [default: \$PATH]\n";
	print STDERR "       -B : start with a blank base list\n";
	print STDERR "       -D : print some debugging messages (to stderr)\n";
	print STDERR "       -h : this help message\n";
	print STDERR "     dirs that do not exist and duplicate dirs are removed from the list\n";
	print STDERR "     this is true even if the dirs are in the base list instead of the supplied list\n";
	exit;
}

$opts->{b} ||= 'PATH';
my (@dirs, %dirs);
unless ($opts->{B})
{
	@dirs = split(':', $ENV{$opts->{b}} || '');
	%dirs = map { $_ => 1 } @dirs;
}
$opts->{D} and print STDERR "starting with ", scalar @dirs, " dirs\n";

my @newdirs;
my ($before, $after) = (0,0);
foreach my $dir (@ARGV)
{
	++$before;
	if ($dir and not exists $dirs{$dir} and -d $dir)
	{
		push @newdirs, $dir;
		$dirs{$dir} = 1;
		++$after;
	}
}
$opts->{D} and print STDERR "winnowed $before dirs down to $after\n";
if ($opts->{f})
{
	$opts->{D} and print STDERR "unshifting ", scalar(@newdirs), " dirs into $opts->{b}\n";
	unshift @dirs, @newdirs;
}
else
{
	$opts->{D} and print STDERR "pushing ", scalar(@newdirs), " dirs onto $opts->{b}\n";
	push @dirs, @newdirs;
}

my $out = join($opts->{s} ? ' ' : ':', @dirs);
if ($opts->{e})
{
	print set_for_shell($opts->{b}, $out);
}
else
{
	print $out;
}


sub set_for_shell
{
	my ($base, $path) = @_;

	my $output;
	eval
	{
		require Shell::Guess;
		require Shell::Config::Generate;
		$opts->{D} and print STDERR "using Shell::Guess et al\n";

		my $conf = Shell::Config::Generate->new;
		$conf->set($base, $path);
		$output = $conf->generate;										# should be for the shell that called us
		$opts->{D} and print STDERR "Shell::* generated: $output\n";
	};
	if ($@ =~ /Can't locate Shell/)										# fallback to old stupid way
	{																	# if we don't have the cool modules installed
		$opts->{D} and print STDERR "guessing at shell based on $ENV{SHELL}\n";
		if ($ENV{SHELL} =~ /csh/)										# crappier guess than Shell::Guess
		{																# likely login shell, not shell that called us
			return "setenv $base $path";
		}
		else
		{
			return "export $base=$path";
		}
	}
	elsif ($@)
	{
		die;
	}

	return $output;
}
