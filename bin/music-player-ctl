#! /usr/bin/env perl

use myperl::Pxb;
use autodie ':all';

use Date::Easy;
use Sys::RunAlone;
use Time::HiRes qw< usleep >;
use List::AllUtils qw< firstidx >;


sub VolumeFile();
sub CurrentVolume();
sub PlaybackMode();


opts <<'-';
	{ -l | [-nvD] <cmd> [...] }
	-l : list possible commands
	-n : no action (do a dry run)
	-v : verbose
	-D : debug mode (implies -v)
	<cmd>  : command to process (maybe with args)
-
$OPT{v} = 1 if $OPT{D} or $OPT{n};


# I know I keep saying this, but this *really* needs to get moved into a common lib somewhere ...
const my $ROMAN_NUMERAL => qr/\bM{0,4}(?:CM|CD|D?C{0,3})(?:XC|XL|L?X{0,3})(?:IX|IV|V?I{0,3})\b/;

const my $DECIBEL_REMOTE => '/usr/share/decibel-audio-player/src/remote.py';
const my $CLEMENTINE     => '/usr/bin/clementine';

const my $MUSIC_HOME    => path( $ENV{MUSIC_HOME} // '/export/music' );
const my $TRACKLIST_DIR => $MUSIC_HOME->child("tracklists");
const my $TL_POS_FILE   => $MUSIC_HOME->child(etc => "tracklist.pos");

# NOTE! The `list_pos` field is the position of the track in the list *at the time it was saved.*
# It could have (and often will have) changed since then.  Thus, while it is informative for humans,
# *code should never use it.*
const my @POSFILE_FIELDS => qw< playlist list_pos track seconds >;

# oblig SO ref: https://stackoverflow.com/a/26782437/1383177
$ENV{QT_SELECT} = 'qt5';

my %COMMAND_MODES =
(
	vol		=>	'change_volume',
	plist	=>	'set_playlist',
	pos		=>	'handle_pos_subcommand',
	info	=>	'print_info',
);
if ( $OPT{l} )
{
	say sprintf("%-10s: %s", $_, $COMMAND_MODES{$_} =~ s/_/ /rg) foreach sort keys %COMMAND_MODES;
	exit;
}

my %PLAY_MODES =
(
	play	=>	'Playing',
	pause	=>	'Paused',
	stop	=>	'Stopped',
);

my %COMMAND_ALIASES =
(
	'music-player-volume'	=>	'vol',
);

my %VOL_COMMANDS =
(
	reset	=>	'=49',
	set		=>	'=',
	up		=>	'+',
	down	=>	'-',
	show	=>	undef,
);

my $command;
if (exists $COMMAND_ALIASES{$ME})
{
	$command = $COMMAND_ALIASES{$ME};
}
elsif (@ARGV)
{
	$command = shift;
}
die("must supply some command") unless $command;
die("unrecognized command: $command") unless exists $COMMAND_MODES{$command};
my $dispatch = main->can($COMMAND_MODES{$command}) or die("logic error: $command not defined");
$dispatch->(@ARGV);


#############
# MODE SUBS #
#############

sub change_volume
{
	die("must specify volume command") unless @_;
	my $subcommand = shift;
	die("unknown volume command $subcommand") unless exists $VOL_COMMANDS{$subcommand};

	my $curvol = CurrentVolume;
	if ($subcommand eq 'show')
	{
		say "volume currently: $curvol";
		exit;
	}

	my $adj = $VOL_COMMANDS{$subcommand};
	unless ($adj =~ /\d+$/)
	{
		fill_in_adj($adj, $curvol);
	}
	if ($adj =~ s/^=//)
	{
		$curvol = $adj;
	}
	else
	{
		$curvol += $adj;
	}
	$curvol = force_into_range($curvol, 0, 100);

	adjust_volume($curvol);
	say "voume set to: $curvol";
	VolumeFile->spew($curvol) unless $OPT{n};
}

sub set_playlist
{
	die("must specify playlist to set") unless @_;
	if ($command eq 'plist' and PlaybackMode ne 'stop')
	{
		handle_pos_subcommand(save => qw< only if existing and with confirm >);
	}

	my $list = shift;
	if (not -r $list)
	{
		if (-r $TRACKLIST_DIR->child($list))
		{
			$list = $TRACKLIST_DIR->child($list);
		}
		else
		{
			if ($list =~ /^\w{1,5}/)
			{
				my $found = 0;
				foreach ($MUSIC_HOME->child( mixes => 'mixes' )->slurp)
				{
					if ( /=$list=/i )
					{
						$found = 1;
					}
					elsif ($found)
					{
						next if /^$/;
						chomp;
						$found = s/\s+$ROMAN_NUMERAL$//r =~ s/^\s*\{(.*)\}$/$1/r;
						($list) = glob("$TRACKLIST_DIR/*/$found.m3u");
						die("resolved to playlist $found, but couldn't locate tracklist file") unless $list and -r $list;
						last;
					}
				}
			}

			if (not -r $list)
			{
				my $pattern = $TRACKLIST_DIR->child('*' => "$list*.m3u");
				my @candidates = glob($pattern);
				if (@candidates == 1)
				{
					($list) = @candidates;
				}
				elsif (@candidates > 1)
				{
					die("too many possibilities for $pattern");
				}
			}
		}
	}
	die("unknown playlist $list") unless -r $list;

	my $playlist = path($list)->relative($TRACKLIST_DIR);
	say $OPT{n} ? "would play" : "playing", ": $playlist" if $OPT{v};
	if ( -x $CLEMENTINE )
	{
		run($CLEMENTINE, '--load' => $list);
	}
	else						# should be decibel
	{
		run(python => $DECIBEL_REMOTE, 'pl-set' => $list);
	}
	return $playlist;
}

sub handle_pos_subcommand
{
	usage_error("must specify pos command") unless @_;
	my $subcommand = shift;

	given ($subcommand)
	{
		when ('cur')
		{
			my $info = get_playlist_info();
			print_playlist_info($info);
		}
		when ('save')
		{
			my %save_opt = map { $_ => 1 } @_;
			my $info = eval { get_playlist_info() };
			if ( not $info )
			{
				return if $save_opt{existing};
				die;			# otherwise, just rethrow
			}
			say "\nwould save:" if $OPT{n};
			print_playlist_info($info) if $OPT{v};
			my $tracklists = read_playlist_posfile();
			do { print "save position of playlist? [y/N] "; return unless <STDIN> =~ /^y/i } if $save_opt{confirm};
			$tracklists->{ $info->{playlist} } = $info;
			write_playlist_posfile($tracklists) unless $OPT{n};
		}
		when ('start')
		{
			my $plist = shift or die("must specify playlist to start");
			my $tracklists = read_playlist_posfile();
			# `set_playlist` may expand an abbreviated or alias arg
			$plist = set_playlist($plist);
			my $info = $tracklists->{$plist};
			if ($info)
			{
				print_playlist_info($info, "  aiming at: ") if $OPT{v};
				my $trackpos = tracknum($plist, $info->{track});
				# by this point, we must be using Clementine, or we'd have bombed out by now
				if ( $OPT{n} )
				{
					say "would jump to track: $info->{track} [$trackpos]";
					say "would seek to time:  ", display_time($info->{seconds});
				}
				else
				{
					my $count = 0;
					print "waiting for playlist to load ." if $OPT{v};
					while ( get_playlist_info()->{playlist} ne $plist )
					{
						usleep(100_000);
						print "." if $OPT{v} and ++$count % 10 == 0;
					}
					say " done" if $OPT{v};
					sh( clementine => -k          => $trackpos        );
					sh( clementine => '--seek-to' => $info->{seconds} );
				}
			}
			else
			{
				warn("could not find a position to restore");
			}
		}
		when ('load')
		{
			my $plist = shift or die("must specify playlist to load");
			handle_pos_subcommand('save');
			handle_pos_subcommand( start => $plist );
		}
		default { usage_error("unknown pos subcommand $subcommand") }
	}
}


sub print_info
{
	say '';
	say "  currently: ", player_api(Player => 'PlaybackStatus');
	say "     volume: ", player_api(Player => 'Volume') * 100, "        [should be: ", CurrentVolume, "]";

	my $info = get_playlist_info();
	print_playlist_info($info, "   playlist: ");
}


##################
# SHARED SUBS    #
# (of mode subs) #
##################


sub VolumeFile () { state $f = path(File::Spec->tmpdir, 'curvol') }

sub CurrentVolume ()
{
	my $curvol_file = VolumeFile;
	my $curvol = -e VolumeFile ? VolumeFile->slurp : $VOL_COMMANDS{'reset'};
	$curvol =~ s/^=//;
	return $curvol;
}


sub player_api
{
	my @extra;
	push @extra, shift while $_[0] =~ /^-/;
	my ($object, $prop) = @_;
	my @qdbus_cmd = (qdbus => @extra, 'org.mpris.MediaPlayer2.clementine',
		'/org/mpris/MediaPlayer2', 'org.freedesktop.DBus.Properties.Get', "org.mpris.MediaPlayer2.$object", $prop);
	sh(printf => "%q ", "+", @qdbus_cmd, ">&2"), say STDERR '' if $OPT{D};
	sh @qdbus_cmd;
}

sub PlaybackMode ()
{
	state $mode_lookup = { reverse %PLAY_MODES };
	my $status = player_api(Player => 'PlaybackStatus');
	return $mode_lookup->{$status} // die("can't determine playback status [$status]");
}

sub get_playlist_info
{
	die("only know how to get playlist info for clementine") unless -x $CLEMENTINE;
	die("no playlist is playing currently") if PlaybackMode eq 'stop';

	my @metadata  = player_api(Player => 'Metadata');
	my $cur_track = head 1 => map { m</music/(.*)$>       ? $1 : () } @metadata;
	my $plist_pos = head 1 => map { m<:trackid:.*?(\d+)$> ? $1 : () } @metadata;
	my $playlist;
	foreach ( sh fgrep => -l => $cur_track, "$TRACKLIST_DIR/*/*.m3u" )
	{
		my $track = tracknum($_, $plist_pos);
		$playlist = path($_) if $track and $track =~ /\Q$cur_track\E$/;
	}
	if ($playlist)
	{
		# This list of keys really needs to match @POSFILE_FIELDS (see constants, at the top of the
		# file), but I haven't figured out a way to guarantee that yet.
		return
		{
			playlist	=>	$playlist->relative($TRACKLIST_DIR),
			list_pos	=>	$plist_pos,
			track		=>	$cur_track,
			seconds		=>	int(player_api(Player => 'Position') / 1_000_000),
		};
	}
	else
	{
		die("cannot determine playlist for $cur_track at $plist_pos");
	}
}

sub print_playlist_info
{
	my ($info, $leader) = @_;
	my $min_sec = display_time($info->{seconds});
	my $track = '[' . ($leader ? 'track ' : '') . ($info->{list_pos} + 1) . ']' . ($leader ? '' : ':');

	say '';
	print $leader if $leader;
	say "$info->{playlist} $track";
	print ' ' x length($leader) if $leader;
	say "  $info->{track} [$min_sec]";
	say '';
}


sub read_playlist_posfile
{

	my $tlists = {};
	foreach ( $TL_POS_FILE->slurp(chomp=>1) )
	{
		my $info = {};
		@$info{@POSFILE_FIELDS} = split("\t");

		$tlists->{ $info->{playlist} } = $info;
	}

	return $tlists;
}

sub write_playlist_posfile
{
	my ($tlists) = @_;
	my @data;
	foreach ( sort keys %$tlists )
	{
		my $info = $tlists->{$_};
#use Data::Printer; p @POSFILE_FIELDS; p $info;
		push @data, join("\t", @$info{@POSFILE_FIELDS}) . "\n";
	}
	$TL_POS_FILE->spew(@data);
}


################
# GENERAL SUBS #
################

sub run
{
	say $OPT{n} ? "would run" : "running", ": @_" if $OPT{D};
	system(@_) unless $OPT{n};
}


sub force_into_range
{
	my ($n, $min, $max) = @_;
	return $n < $min ? $min : $n > $max ? $max : $n;
}


sub display_time
{
	my $seconds = shift;
	my $min = int($seconds / 60);
	my $sec = sprintf("%02d", $seconds % 60);
	return "$min:$sec";
}


sub fill_in_adj
{
	my ($adj, $curvol) = @_;
	$_[0] .= shift @ARGV, return if $adj eq '=';

	my $is_below = sub { my $n = shift; return $curvol < $n || $curvol == $n && $adj eq '-'; };
	if ($is_below->(10))
	{
		$adj .= 1;
	}
	elsif ($is_below->(30))
	{
		$adj .= 2;
	}
	elsif ($is_below->(45))
	{
		$adj .= 3;
	}
	elsif ($is_below->(65))
	{
		$adj .= 4;
	}
	else
	{
		$adj .= 5;
	}

	# adjust in place
	$_[0] = $adj;
}


sub adjust_volume
{
	my ($curvol) = @_;
	if ( -x $CLEMENTINE )
	{
		run($CLEMENTINE, '--volume' => $curvol);
	}
	else						# should be decibel
	{
		run(python => $DECIBEL_REMOTE, volume => $curvol);
	}
}


sub tracknum
{
	my ($list, $which) = @_;
	$list = path($list);
	$list = $TRACKLIST_DIR->child($list) if $list->is_relative;
	my @tracks = grep { not /^#/ } $list->slurp;

	if ( $which =~ /^\d+$/ )						# it's a number; return the name
	{
		return $tracks[$which];
	}
	else											# it's a name; return the number
	{
		return firstidx { /\Q$which\E$/ } @tracks;
	}

	# not sure it's possible to get here ...
	return undef;
}


__END__
