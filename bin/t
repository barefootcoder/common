#! /usr/bin/env perl

# we're not requiring any Modern Perl features here
# because we want to remain backwards compatible at least back to 5.8.9
# this helps uses such as ~/bin/test_all_perls (q.v.)
use strict;
use autodie qw< :all >;
use warnings FATAL => 'all';

sub check_prereqs
{
	foreach (qw< Getopt::Std File::Which Path::Class Perl6::Slurp Time::Duration List::MoreUtils Time::HiRes >)
	{
		eval "require $_" or system(qw< cpanm -n >, $_);
	}
}
BEGIN { check_prereqs() }

use Getopt::Std;
use File::Which;
use Path::Class;
use Perl6::Slurp;
use Time::Duration;
use List::MoreUtils qw< uniq >;
use Time::HiRes qw< gettimeofday tv_interval >;

my $start_time; BEGIN { $start_time = [gettimeofday]; }
END { local $Time::Duration::MILLISECOND = 1; print "Runtime: ", duration_exact(tv_interval($start_time)), "\n"; }

our $WORKDIR;

sub print_color(@);


$| = 1;

my $opt = { N => '', };
exit 2 unless getopts("hnaTcpvsAPDRN:Sm:", $opt);
$opt->{R} = 1 if $opt->{p};

# help message
if ($opt->{h})
{
	my $me = $0;
	$me =~ s@^.*/@@;

	print "usage: $me -h | [-naTcvsAPD] [-Nlrj] [-m method_name] [perl_module|t_dir]\n";
	print "       run tests associated with perl_module\n";
	print "           -h: this help message\n";
	print "           -n: only run the newest (most recently modified) test file\n";
	print "           -a: run all tests (i.e. don't bail on fail)\n";
	print "           -T: run tests with taint checking on\n";
	print "           -c: try to run tests under Devel::Cover and report (forces -Nj)\n";
	print "           -p: try to run tests under Devel::NYTProf and report (forces -R)\n";
	print "           -v: run tests in verbose mode\n";
	print "           -s: show only test summary\n";
	print "           -A: load Carp::Always to get full stack traces on errors\n";
	print "           -P: load Test::Pretty to get nicer test output (forces -Nj)\n";
	print "           -D: debug mode\n";
	print "           -R: raw mode (don't use prove; run test file with perl directly); implies -a -Nrj\n";
	print "           -N: do not pass the following switch(es) to prove (must combine multiples)\n";
	print "                  -Nl: do not add -Ilib for your tests (default: prove -l)\n";
	print "                  -Nr: do not run recursively (default: prove -r)\n";
	print "                  -Nj: do not parallelize tests (default: prove -jN [unless -c or -P])\n";
	print "                          default N: number of CPU cores + 1\n";
	print "           -S: skip all commands *before* prove, if any (may cause weird failures)\n";
	print "           -m: only run a single test method in the specified file\n";
	print "                  this only works with Test::Class-style tests\n";
	print "                  you can specify a partial name; if it is ambiguous, it is an error\n";
	print "                  this probably doesn't work with multiple files\n";
	exit;
}


###########################
###  QUICK HACKS
###########################


# quick hack: shortcut to spawning `dzil test` if:
# 	a) we can find a "dist.ini"
# 	b) we're called with no args (that includes switches!)
# 	c) we can find dzil and it's using the same Perl we are
# alternately, we could call `rent` if:
#	a) we're in the packages/ directory, or a subdir thereof
#	b) we have no args, and only -n and/or -v switches
# we can't allow switches because there's no reliable way to pass them on to `dzil`
# (although `rent` specifically handles -v and -n, so those are okay)
$ENV{RELEASE_TESTING} = 1;
if (-r 'dist.ini' and can_run_dzil())
{
	output_if_debug("found a dist.ini and a Perl-compatible dzil");
	if (dir()->absolute =~  m{/packages/})
	{
		output_if_debug("trying to run `rent`");
		if (not @ARGV)
		{
			my $opts = '';
			$opts .= " -v" if delete $opt->{v};
			$opts .= " -n" if delete $opt->{n};
			if (%$opt)
			{
				die("Sorry! can't figure out how to run `rent' with switches: " . join(', ', keys %$opt));
			}
			else
			{
				spacer();
				$ENV{'RENT_DEV_YES'} = 1;
				my $command = "rent test $opts";
				print_command_if_debug($command, noenv => 1);
				exec($command);
			}
		}
	}
	else
	{
		output_if_debug("trying to run `dzil`");
		my $opts = join('', map { $_ eq 'N' ? "N$opt->{N}" : $_ } sort keys %$opt);
		if (@ARGV)
		{
			output_if_debug("giving up on `dzil` due to having arguments:", @ARGV);
		}
		elsif ( $opts !~ /^D?N$/ )
		{
			output_if_debug("giving up on `dzil` due to having options:", $opts);
		}
		else
		{
			spacer();
			my $command = "dzil test --release && dzil clean";
			print_command_if_debug($command, noenv => 1);
			exec($command);
		}
	}
}


# another quick hack:
# if we see evidence that we're going to be using blib/lib/ instead of lib/, we probably better run
# `make` to make sure the library file is copied to blib/lib/
system("make") if -d 'blib/lib' and -e 'Makefile';


my $precommand;															# will be executed just before main command is run
my $postcommand;														# executes after command, but *only* if successful
# slightly less quick hack:
# if we're in a Dist::Zilla distro and we _do_ get arguments, we _may_ be able to set up an
# environment where prove will work properly ...
if (-r "dist.ini" and which("dzil") and @ARGV)
{
	$precommand = sub
	{
		system("dzil build");
		# the dir we want is the same as the tarfile sans extension
		(my $dir = glob("*.tar.gz")) =~ s/(-TRIAL)?\.tar\.gz$//;
		-d $dir or die("can't figure out build directory [$dir]");
		chdir $dir;
		system("$^X Makefile.PL");
		system("make");
	};

	$postcommand = sub
	{
		chdir '..';
		system("dzil clean");
	}
}


###########################
###  THE MAIN EVENT
###########################


#
# set up cover stuff
# 		[ -c switch ]
#

my $coverdb = '/tmp/cover_db';
my $cover = "cover";
$cover .= " -silent" unless $opt->{D};
my $HARNESS = 'HARNESS_PERL_SWITCHES';
if ($opt->{c})
{
	eval { require Devel::Cover } or die("$0: Devel::Cover not found [ $@ ]\n");
	my $command = "$cover -delete $coverdb";
	print_command_if_debug($command, noenv => 1);
	system($command);
	$ENV{$HARNESS} = "-MDevel::Cover=-db,$coverdb";
}

#
# set up Test::Pretty stuff
# 		[ -P switch ]
#

if ($opt->{P})
{
	eval { require Test::Pretty } or die("$0: Test::Pretty not found [ $@ ]\n");
}


#
# find the right directory
#

my ($dir, @files);
if (@ARGV)
{
	foreach my $arg (@ARGV)
	{
		if ( $arg =~ /\.(t|pm)$/ )
		{
			push @files, $arg;
		}
		else
		{
			my ($pkg, @possibles);
			if ( my $file = identify_perl_module($arg) )
			{
				$pkg = $arg;
				$dir = file($file)->dir;
			}
			elsif (-f $arg)
			{
				$pkg = get_pkgname($arg);
				output_if_debug('got package:', $pkg);
			}
			$pkg =~ s/::/-/g if $pkg;

			my @dirs = get_workenv('test_dirs');
			if (@dirs)
			{
				# if we get this far, we're running in a work environment
				(my $d = $arg) =~ s{::}{/}g;
				foreach my $t_dir ( @dirs )
				{
					push @possibles, "$WORKDIR/$t_dir/$d/t";
					push @possibles, "$WORKDIR/$t_dir/$d";
					push @possibles, "$WORKDIR/$t_dir/$pkg" if $pkg;
				}
			}

			push @possibles, "$arg/t", $arg;
			push @possibles, "t/$arg" if $arg and $arg !~ m@^/@;
			push @possibles, "t/$pkg" if $pkg;
			@possibles = uniq @possibles;
			push @possibles, map { dir($dir)->file($_) } @possibles if $dir;

			my $found = find_dest(@possibles);
			-d $found ? ($dir = $found) : push @files, $found if $found;
		}
	}
}

# if we haven't found the directory/files yet, better try harder
if (not $dir and not @files)
{
	$dir = find_dest("t", "../t", "../../t", "../../../t");
}
die("$0: cannot figure out where test files are\n") unless $dir or @files;

@files = get_files($dir) unless @files;
output_if_debug("file(s):", @files);

# use requested modules
my %req_modules =
(
	A	=>	'Devel::Confess',
);
$ENV{PERL5OPT} = join(' ', map { $opt->{$_} ? "-M$req_modules{$_}" : () } keys %req_modules);

# set test method if requested
if ($opt->{m})
{
	my $sub = qr/\w*$opt->{m}\w*/;
	my @candidates = map { /sub\s+($sub)\s*:\s*Test/ ? $1 : () } map { slurp } @files;
	if (@candidates == 0)												# too few
	{
		die("$0: can't find method *$opt->{m}*");
	}
	elsif (@candidates > 1)												# too many
	{

		die("$0: method pattern /$opt->{m}/ is ambiguous (", join(',', @candidates), ")");
	}
	else																# just right
	{
		$ENV{TEST_METHOD} = $candidates[0];
	}
}

$ENV{BAIL_ON_FAIL} = 1 unless $opt->{a};
print "testing @files ", $ENV{TEST_METHOD} ? "[$ENV{TEST_METHOD}] " : '', "...\n";


spacer();
run_pre_commands();

my $command;
my $single_file = @files == 1 && ! -d $files[0];
if ($opt->{R})
{
	# if we're in raw mode, most switches won't mean much
	my @incompatible_switches = qw< c v s P >;
	die("$0: the following switches are incompatible with -R: " . join(', ', map { "-$_" } @incompatible_switches) . "\n")
		if grep { $opt->{$_} } @incompatible_switches;

	# also, in raw mode, can't run on directories
	die("$0: must specify only individual test files with -R\n") if grep { -d } @files;

	my @perl_args;
	push @perl_args, '-d:NYTProf' if $opt->{p};
	push @perl_args, '-T' if $opt->{T};
	push @perl_args, map { "-I$_" } split(':', $ENV{PERL5LIB}) if $opt->{T} and $ENV{PERL5LIB};
	push @perl_args, -d 'blib' ? '-Iblib/lib' : '-Ilib' unless $opt->{N} =~ /l/;
	push @perl_args, '%f';												# placeholder for filenames
	push @perl_args, get_workenv('post_args');
	$command = "$^X @perl_args";
}
else
{
	my @prove_args;
	push @prove_args, '-c' if -t STDOUT;
	if ( $opt->{v} )
	{
		push @prove_args, '-v';
		# --merge doesn't play nice with -j, so only do it if we only have one file
		push @prove_args, '--merge' if $single_file;
	}
	push @prove_args, '-Q' if $opt->{s};
	push @prove_args, '-T' if $opt->{T};
	push @prove_args, -d 'blib' ? '-Iblib/lib' : '-l' unless $opt->{N} =~ /l/;
	push @prove_args, '-r' unless $opt->{N} =~ /r/;
	# don't try to parallelize if:
	# 	-	we've only got one file (nothing to parallelize, and borks --merge)
	# 	-	the user specifically requested that we not do so with -Nj
	# 	-	we're using -c (coverage testing and parallelizing don't mix)
	# 	-	we're using -P (Test::Pretty won't play nice with -j either)
	unless ($single_file or $opt->{N} =~ /j/ or $opt->{c} or $opt->{P})
	{
		my $cpuinfo = '/proc/cpuinfo';
		my $num_cores = -r $cpuinfo ? ()= grep { /^processor/ } slurp $cpuinfo : 4;
		my $num_procs = $num_cores + 1;
		push @prove_args, "-j$num_procs";
	}
	push @prove_args, '-PPretty' if $opt->{P};
	push @prove_args, map { "-I$_" } split(':', $ENV{PERL5LIB}) if $opt->{T} and $ENV{PERL5LIB};
	push @prove_args, @files;
	push @prove_args, get_workenv('post_args');
	$command = "prove @prove_args";
}

if ($opt->{c})
{
	print_command_if_debug($command);
	open(PIPE, "$command 2>&1 |") or die("$0: can't run prove\n");
	while ( <PIPE> )
	{
		# ignore errors from Devel::Cover
		next if /^Devel::Cover: Can't open accessor/;
		next if /^Can't find digest for accessor/;
		next if /^Deep recursion on subroutine "B::Deparse::deparse".*Devel\/Cover\.pm/;
		print;
	}
	close(PIPE);
}
elsif ($opt->{R})
{
	foreach (@files)
	{
		my $cmd = $command;
		$cmd =~ s/%f/$_/;
		print_command_if_debug($cmd);
		system($cmd);
	}
}
else
{
	print_command_if_debug($command);
	system($command);
}
if ($?)
{
	print_color red => "\nTEST FAILURE\n";
	exit 1;
}

$postcommand->() if $postcommand;
print_color green => "\nALL TESTS PASSED\n";


# Devel::Cover reporting

if ($opt->{c})
{
	my $pretty_arg = join(', ', map { prettify_dir($_) } @files);
	my $args_re = join('|', map { file($_)->basename =~ /^(.*)\.?/ } @files);
	print "\n\nResults from Devel::Cover for $pretty_arg:\n\n";

	my @select_args = map { "+select $_" } @files;
	my $command = "$cover @select_args -report text $coverdb";
	print_command_if_debug($command);
	open(PIPE, "$command 2>&1 |") or die("$0: can't run cover\n");
	my $section = 0;
	while ( <PIPE> )
	{
		next if /^Devel::Cover: Can't find digest for/;
		next if /^Devel::Cover: ignoring extra/;
		#last if /^Run:/;

		++$section if /^\s*-----/ and $section < 4;
		$section = 4 if /^Run:/;
		$section = 5 if m@^/@;
		$section = 6 if /^Covered Subroutines/;

		if ($section == 2)
		{
			print if /$args_re/ and not /\.t\b/;
			next;
		}

		next if $section == 4;
		next if $section == 5;
		next if $section == 6;

		print;
	}
	close(PIPE);
}


# Devel::NYTProf reporting

if ($opt->{p})
{
	system("nytprofhtml --open");
}


###########################
###  SUBS
###########################


sub can_run_dzil
{
	# The trickiness here is that you may be in a situation where `dzil` is in your path, but you're
	# not using the same Perl that `dzil` is.  One simple example of how this can happen is:
	# 		perlbrew exec --with 5.8.9 t
	# So, assuming `dzil` was in your path before, it still is, and its shebang line has the version
	# of Perl that installed it hardcoded there.  The end result is that the above `perlbrew` line
	# ends up running your tests, via `dzil`, on an entirely different version of Perl than you
	# thought you were.  Which is bad.
	#
	# To avoid this, we actually find the copy of `dzil` that's going to be run (if there is one),
	# read its shebang line, and refuse to run `dzil` if it doesn't match the currently running
	# Perl.  This is a lot of work.  However, it prevents nasty surprises, so it's worth it.

	return 0 unless $^O eq 'linux';					# too hard to figure out if this is safe on non-Linux systems
	my $perl = $^X;
	my $dzil = which("dzil") or return 0;			# no dzil to check Perl path of
	my $dzil_perl = do
	{
		my ($first_line) = file($dzil)->slurp;
		$first_line =~ s/^#!\s*//;
		$first_line =~ s/\s*$//;
		$first_line;
	};
	return $perl eq $dzil_perl;
}


my ($WORKENV, $CURENV);
sub get_workenv
{
	my ($param) = @_;
	# this is like a poor man's `state`
	# can't use the real thing because we need this to work on 5.8 as well
	unless (defined $WORKENV)
	{
		$WORKENV =
		{
			Rent	=>	{
							env_var		=>	[ 'WEBROOT', 'RENT_HOME' ],
							test_dirs	=>	[qw< lib/Test/t lib/Company/t >],
						},
			CE		=>	{
							env_var		=>	[ 'CEROOT' ],
							test_dirs	=>	[qw< t/lib tlib >],
							pre_cmd		=>	[ 'database/cetest/build-cetest' ],
							post_args	=>	[qw< :: --dbconfig utest-main >],
						},
		};
	}

	unless (defined $CURENV)
	{
		foreach my $env (keys %$WORKENV)
		{
			my $env_vars = $WORKENV->{$env}->{env_var};
			foreach (@$env_vars)
			{
				if (exists $ENV{$_})
				{
					$WORKDIR = dir($ENV{$_});
					next unless -d $WORKDIR;
					next unless $WORKDIR->absolute->contains(".");
					$CURENV = $env;
					last;
				}
			}
			last if $CURENV;
		}
		$CURENV = 0 unless defined $CURENV;								# i.e., false but not undefined
	}

	return $CURENV && exists $WORKENV->{$CURENV}->{$param} ? @{ $WORKENV->{$CURENV}->{$param} } : ();
}


sub get_pkgname
{
	if (local $_ = shift)
	{
		output_if_debug("opening file:", $_);
		open(IN, $_) or return undef;
		output_if_debug("reading file:", $_);
		no warnings 'once';												# for older Perls
		while ( <IN> )
		{
			# skip pod
			next if /^=/../^=cut/;

			if ( /package\s+(.*?);/ )
			{
				return $1;
			}
		}
		close(IN);
	}

	return undef;
}


sub identify_perl_module
{
	my ($mod) = @_;

	if (eval "require $mod")
	{
		output_if_debug("identified as a module:", $mod);
		$mod =~ s{::}{/}g;
		return $INC{"$mod.pm"};
	}

	return undef;
}


sub find_dest
{
	foreach (@_)
	{
		next unless $_;
		output_if_debug("checking destination:", $_);
		if (-f "$_.pm")
		{
			return prettify_dir("$_.pm");
		}
		elsif (-f "$_.t")
		{
			return prettify_dir("$_.t");
		}
		elsif (-d)
		{
			return prettify_dir($_);
		}
	}
	return undef;
}


sub prettify_dir
{
	local $_ = shift;

	# just makes for a prettier display
	my $cwd = dir->absolute();
	if ($_ eq $cwd)
	{
		return '.';
	}
	else
	{
		eval { s@^$cwd//?@@ };
	}

	return $_;
}


sub get_files
{
	local $_ = shift;
	output_if_debug("found directory", $_);

	if ( $opt->{n} )								# find the newest test file
	{
		my @dirs = ($_);
		my $xt = dir($_)->parent->subdir('xt');
		push @dirs, $xt if -d $xt;

		my $glob = $opt->{N} =~ /r/ ? "$_/*.t" : `find -H @dirs -name '*.t'`;
		$glob =~ s/\n/ /g;

		my $latest = `/bin/ls -1t $glob | head -n1`;
		chomp $latest;

		return $latest;
	}
	else											# just do 'em all
	{
		if (-e "$_/test_manifest")
		{
			require Test::Manifest;
			# Test::Manifest doesn't do recursion or parallelization
			$opt->{N} .= 'rj';
			return scalar(Test::Manifest::get_t_files(0));
		}
		else
		{
			return $_;
		}
	}
}


sub spacer
{
	print "\n" x 10 unless $opt->{s};
}


sub run_pre_commands
{
	return if $opt->{S};
	$precommand->() if $precommand;
	foreach ( get_workenv('pre_cmd') )
	{
		print_command_if_debug($_, noenv => 1);
		system $_;
	}
}


sub output_if_debug
{
	if ( $opt->{D} )
	{
		print STDERR join(' ', map { defined $_ ? $_ : '<<undef>>' } @_), "\n";
	}
}

sub print_command_if_debug
{
	my ($command, %args) = @_;
	return unless $opt->{D};

	output_if_debug("running:", $command);
	unless ($args{'noenv'})
	{
		output_if_debug("         (with BAIL_ON_FAIL=$ENV{BAIL_ON_FAIL})") unless $opt->{a} or $opt->{R};
		output_if_debug("         (with $HARNESS=$ENV{$HARNESS})") if $opt->{c};
		output_if_debug("         (with PERL5OPT=$ENV{PERL5OPT})") if grep { $opt->{$_} } keys %req_modules;
		output_if_debug("         (with TEST_METHOD=$ENV{TEST_METHOD})") if $opt->{m};
	}
}


sub print_color (@)
{
	my ($color, $msg) = @_;

	if (-t STDOUT)
	{
		require Term::ANSIColor;
		print Term::ANSIColor::colored($msg, $color);
	}
	else
	{
		print $msg;
	}
}
