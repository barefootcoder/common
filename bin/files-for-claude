#! /usr/bin/env perl

use myperl::Pxb;
use autodie ':all';

const my $VREGEX => '-v(\d+)\.txt$';


opts <<'-';
	[-O <outfile>] [-vD] <file> [...]
	-O : write to <outfile> (default: write to stdout)
	-v : be more verbose
	-D : debug mode (implies -v)
	<file>    : one or more files to process (dirs handled recursively)
	<outfile> : output .txt file (will be versioned)
-
$OPT{v} = 1 if $OPT{D};

my @files = map { file($_) } @ARGV or usage_error("must supply at least one file");
fatal("cannot process non-existent files") if grep { !  -e        } @files;
fatal("cannot process special files")      if grep { ! (-f || -d) } @files;


my $OUT;
if ($OPT{O})
{
	my $base = $OPT{O} =~ s/$VREGEX//r;
	my $curver = max map { /$VREGEX/ ? $1 : die("weird unversioned file: $+") } glob("$base-v*.txt");
	my $nextver = ($curver // 0) + 1;
	my $outfile = "$base-v$nextver.txt";
	open ($OUT, ">$outfile");
	select $OUT;
}

my $doc_index = 1;
say "<documents>";									# start the XML wrapper
process_path($_) foreach @ARGV;						# process command line args
say "</documents>";									# close out the XML wrapper

close $OUT if $OPT{O};


sub info
{
	say STDERR "# @_ ..." if $OPT{v};
}

sub process_path
{
    my ($path) = @_;
    
    # If it's a directory, recurse through it
    if (-d $path)
    {
		info("recursing into dir $path");
        my $dir = path($path);
		process_path($_) foreach $dir->children;
    }
    # If it's a file, process it directly
    elsif (-f $path)
    {
        process_file(path($path));
    }
	else
	{
		info("skipping special file $path");
	}
}

sub process_file
{
    my ($path) = @_;
	return if $path->basename =~ /^\./;				# skip "hidden" files
    
    # Try to read the file - skip if we can't
    my $content;
    eval {
        $content = $path->slurp;
        1;
    } or do {
        warn "Warning: Couldn't read $path: $@\n";
        return;
    };
	info("processing file $path");
    
    say qq{<document index="$doc_index">};
    say "<source>$path</source>";
    say "<document_content>";
    print $content;  # keeping this as print since we don't want to add a newline
    say "</document_content>";
    say "</document>";
    
    $doc_index++;
}
