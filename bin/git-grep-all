#! /usr/bin/env perl
#
# I wrote the original version of this cript based on a couple of StackOverflow articles:
#
#		https://stackoverflow.com/questions/21903972
#		https://stackoverflow.com/questions/746684
#
# The rewrite, including adding all the parallelization and excluding empty commits to reduce false
# positives, etc, was guided almost entirely by ChatGPT:
#
#		https://chat.openai.com/share/3000121b-4271-4a14-ab7c-740a9eab4144
#
# And, when that didn't work, it came the rescue again (note: may require
# access to Archer's team ChatGPT space):
#
#		https://chat.openai.com/share/e/e5ab3ead-3798-47ba-9572-b0806cc7275c
#		https://chat.openai.com/share/e/bf504f7a-6c4a-4f4c-aa5e-a620462c3955
#
# I also hightly recommend this truly brillant (and insanely complete)
# StackOverflow answer about commits, parents, and stashes:
#
#		https://stackoverflow.com/a/62868403

use myperl::Pxb;
use autodie ':all';

use MCE::Map;
use Date::Easy;
use MCE::Shared;
use Data::Printer;
use Path::Class::Tiny;

$| = 1;


sub warning_block ($)
{
	say '';
	color_msg(YELLOW => shift =~ s/^\h+/    /mgr);
	sleep 5;
}


my $me = sh(git => config => 'user.email'); chomp $me;
opts <<"-";
	[-ilURm] [-d <date> ] [-p <path>] [-v | -D] [-X] { -e <pattern> | <pattern> }
	-i : case-insensitive matching
	-l : only print the SHA1s of matching commits
	-U : grep only unreachable commits (default: grep all)
	-R : grep only reachable commits (default: grep all)
	-m : grep only my commits (only commits for $me)
	-p : grep only commits that reference <path>
	-d : grep only commits since <date>
	-e : next arg is the <pattern>, even if it starts with -
	-v : be chatty (add progress meter)
	-D : debug mode (implies -v)
	-X : don't grep; dump out the commit SHA1s (run with `-v` first!)
	<pattern> : Perl-style regex
-

$OPT{v} = 1 if $OPT{D};
if ($OPT{D})
{
	warning_block <<'.';
		We are going to run a metric shit-ton of `git` commands.
		And you've requested for every one of them to go to your screen.
		Bail now if you've only just realized what you've done.
.
}

$OPT{d} = datetime($OPT{d}) if $OPT{d};
my $regex = $OPT{e} // shift // $OPT{X} || usage_error('must supply regex');
$regex = $OPT{i} ? qr/$regex/i : qr/$regex/;


# this used to just page itself to `$ENV{PAGER}` in a simlar way that `hunks` does
# but that seems to cause some hanging at the end of the script
# possibly some interaction with MCE?  it wasn't clear
# but, in the end, it just wan't worthwhile to spend a lot of time on trying to fix it
if (-t STDOUT)
{
	warning_block <<'.';
		This often produces a large amount of output.
		I strongly advise that you stop and rerun, piping to $PAGER.
.
}


# Stash commits are special in many ways, so retrieve them all first for later reference.
sub stash_parent
{
	my ($commit, $how_far) = @_;
	eval { sh( git => 'rev-parse' => "$commit^$how_far", '2>/dev/null' ) };
}

my %stash_commits =
	map     { $_ => 1											}
	grep	{ defined											}
	map		{ $_, stash_parent($_, 2), stash_parent($_, 3)		}
			( sh(git => stash => 'list', '--format=%H')			)
	;
say "Considering ", scalar keys %stash_commits, " stash commits." if $OPT{v};


sub is_stash_commit ()
{
	return $stash_commits{ $_->{sha1_full} };
}

sub is_valid ()
{
	# stash commits must always be considered valid, because `git diff-tree` doesn't work on them
	return 1 if is_stash_commit;

	my @paths = sh(git => 'diff-tree', '--no-commit-id', '--name-only', '-r', $_->{sha1});

	# first, ensure the commit contains the path we care about (if we care about a path)
	if (defined $OPT{p})
	{
		return 0 unless grep { $_ eq $OPT{p} } @paths;
	}

	# otherwise, empty commits are _not_ valid; everything else is okay
	return @paths > 0;
}


my @commits;
unless ($OPT{R})
{
	push @commits,
		map { /unreachable commit (\w+)/ ? $1 : () }
			sh(git => fsck => qw< --unreachable --no-reflogs >);
}
unless ($OPT{U})
{
	push @commits, keys %stash_commits;
	push @commits, sh(git => 'rev-list' => '--reflog');
}
@commits = uniq @commits;
my $total_commits = @commits;
say "Filtering $total_commits total commits." if $OPT{v};

my $tmpfile = Path::Tiny->tempfile;
$tmpfile->spew( map { "$_\n" } @commits );
@commits = ();
const my $SEP => '<<|>>';
foreach ( sh("xargs git show -s --no-renames --format='%h$SEP%H$SEP%at$SEP%ae$SEP%an' <$tmpfile") )
{
	my $commit = {};
	@$commit{qw< sha1 sha1_full date author_email author_name >} = split(quotemeta($SEP));
	if ($OPT{m})
	{
		next unless $commit->{author_email} eq $me;
	}
	if ($OPT{d})
	{
		next unless $commit->{date} >= $OPT{d}->epoch;
	}
	push @commits, $commit;
}
$total_commits = scalar @commits;
say "Validating $total_commits total commits." if $OPT{v};

@commits = mce_map { is_valid ? $_ : () } @commits;
$total_commits = scalar @commits;
say "Grepping $total_commits filtered commits." if $OPT{v};

if ($OPT{X})
{
	select()->flush();
	my $orig = select(STDERR);
	if (confirm("Will print SHA1s for $total_commits commits; are you sure?"))
	{
		select($orig);
		print form "{<<<<<<<<}  {<<<<<<<<<<<<<<<<<<} {<<<<<<<<<<<<<<<<<<<<<<<<<<<<}",
				$_->{sha1}, datetime($_->{date})->iso, $_->{author_name}
			foreach sort { $a->{date} <=> $b->{date} } @commits;
	}
	exit;
}
die("Nothing left to search!") unless $total_commits;

my $interval = int($total_commits / 20);			# show a dot for every 5% progress
my $countdown = MCE::Shared->scalar($total_commits);
@commits = mce_map
{
	my @out = eval
	{
		my @git_args = ( show => $_->{sha1} );
		push @git_args, $OPT{p} if defined $OPT{p};
		grep { /$regex/ } sh(git => @git_args );
	};
	if (@out and not $@)
	{
		$_->{ref} = sh(git => 'name-rev', $_->{sha1}) =~ s/ undefined$//r;
		$_->{out} = join("\n", @out);
	}
	{												# scope so the lock on `$countdown` gets released
		lock $countdown;
		print STDERR "." if --$$countdown % $interval == 0 and $OPT{v};
	}
	return $_->{out} ? ($_) : ();
} @commits;
$total_commits = scalar @commits;
say STDERR " done ($total_commits commits remain)" if $OPT{v};
p @commits if $OPT{D};

foreach (sort { $a->{date} <=> $b->{date} } @commits)
{
	my $date = datetime($_->{date});
	say "\e[96m$_->{ref}\e[0m :: $date :: $_->{author_email} [$_->{author_name}] :";
	say $_->{out} =~ s/^/  /mgr unless $OPT{l};
}
