#!/bin/bash
. ~/bin/bash_funcs

count=-c
while getopts ":nvbh" opt
do
	case $opt in
		n)	files=$(git status -s | awk '{print $2}')
			[[ -z $files ]] && exit
			;;
		v)	count=-n
			;;
		b)	count=-l
			;;
		h)  echo "usage: $me -h | [-nv] [dir]" >&2
			echo "    -n : only check for tabs in Git modified files" >&2
			echo "    -v : verbose (print matching lines, not just count)" >&2
			echo "    -b : bare (don't even print counts, just filenames)" >&2
			echo "    -h : this help message" >&2
			echo "    dir : directory to search (default [w/o -n]: .)" >&2
			exit
			;;
		:)  usage_error "$OPTARG requires an argument"
			;;
		\?) usage_error "unknown argument $OPTARG"
			;;
	esac
done
shift $(( $OPTIND - 1 ))

if [[ -z $files ]]
then
	if [[ -z $1 ]]
	then
		files="*"
	else
		if [[ -d $1 ]]
		then
			files="$1/*"
		else
			die "$1 not a directory"
		fi
	fi
fi

out=$(fgrep $count -srHI $'\t' $files | grep -v ':0$')
for pattern in '^Makefile(\..*)?$' '\.tsv$'
do
	[[ $count != -l ]] && pattern=${pattern/$/:}
	out=$(echo "$out" | grep -Pv $pattern)
done
echo -n "$out"
exit

# first simplistic try to convert this multi-process bash algo over to single-process Perl
# but it seems to take about 5x as long, so I'm temporarily abandoning it
perl -MFile::Next -MPath::Tiny -le '
	$files = File::Next::files(@ARGV);
	while (defined($_ = $files->()))
	{
		next if /^Makefile(\..*)?$/;
		next if /\.tsv$/;
		next if -B;

		my $contents = path($_)->slurp;
		my $count = $contents =~ tr/\t//;
		print "$_:$count" if $count;
	}
' $files
