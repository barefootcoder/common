# common functions and pseudo-global vars
# used by the psync system
# 	including: `psync` (both personal and root versions), `makeln`, and `build-music`


# variables
mydir=~/common

# simple fatal error
function die
{
	for msg
	do
		echo "$0: $msg" >&2
	done
	exit 1
}

# get a yes/no response from a user
function confirm
{
	echo -ne "$1 [y/N] " >&2
	read answer
	[[ $answer == [yY]* ]]
}


# find a valid directory from a list of choices
# args will be a list of potential directories
# returns the first one that actually exists
# errs out if none are found
function find_dir
{
	for potential_dir
	do
		if [[ -d $potential_dir ]]
		then
			echo $potential_dir
			return
		fi
	done

	# if we get here, we couldn't find anything at all
	die "can't find any of these directories: $*"
}

# find a valid directory in external storage
# checks in all the possible places it might be stuck into
# and does in the preferred order
function storage_dir
{
	find_dir /var/sync/synology/$1 /var/sync/resilio/$1 /export/$1
}


# build the symlink itself
function make_link
{
	# $1 == source file
	# $2 == destination (will be the symlink)

	if [[ ! -e $1 ]]
	then
		# thing we want to link to isn't there
		echo "$1 doesn't exist; skipping link" >&2
	elif [[ -L $2 && $1 -ef $2 ]]
	then
		# don't bother if it's already pointing at the right place
		:
	elif [[ -e $2 || -L $2 ]]
	then
		# there's _something_ there, but not the right something
		# better make sure it's okay to replace it
		/bin/ls -l "$2"
		echo -n "$2 exists; overwrite [new src: $1]? " >&2
		read yn
		if [[ $yn == [yY]* ]]
		then
			/bin/rm -f "$2"
			ln -s "$1" "$2"
		fi
	else
		ln -s "$1" "$2"
	fi
}

# freak out if a dir is *not* a symlink
function verify_dirlink
{
	if [[ -d $1 && ! -L $1 ]]
	then
		die "your $1 directory is a real directory instead of a symlink"								\
			"please fix that and rerun"
	fi
}


# copy a file, as safely as possible
function make_copy
{
	# $1 == source file
	# $2 == destination file

	if [[ ! -e $1 ]]
	then
		# thing we want to copy isn't there
		echo "$1 doesn't exist; skipping copy" >&2
	elif [[ -L $2 ]]
	then
		# dest is a symlink; need to handle that first
		echo -n "$2 exists as a symlink; remove? " >&2
		read yn
		if [[ $yn == [yY]* ]]
		then
			/bin/rm -f $2
			/bin/cp -p $1 $2
		fi
	elif [[ -e $2 ]] && diff $1 $2 >/dev/null
	then
		# don't bother if the content is already correct
		:
	elif [[ -e $2 ]]
	then
		# would overwrite something; better get permission first
		echo -n "$2 exists (not a symlink); overwrite? " >&2
		read yn
		if [[ $yn == [yY]* ]]
		then
			/bin/rm -f $2
			/bin/cp -p $1 $2
		fi
	else
		/bin/cp -pi $1 $2
	fi
}


# turn a hostname into an IP address
function resolve_host
{
	host="$1"
	nslookup -timeout=2 $host 2>/dev/null | perl -lne '/^Address: (.*)/ and print $1 if /answer:/..1'
}


# backup a file when needed
function backup_file
{
	# $1 == original file

	if [[ ! -d $mydir/backup ]]
	then
		if ! mkdir $mydir/backup
		then
			die "can't seem to make backup directory"
		fi
	fi

	backup=$mydir/backup/$(basename $1)
	mv $1 $backup

	echo $backup
}


# replace a line in one file with the contents of another file
# based on an identifier plucked out using an awk pattern
function replace_in_file
{
	local base_file="$1"
	local file_piece="$2"
	local identifier_pattern="$3"

	if ! fgrep -q "$(cat $file_piece)" $base_file 2>/dev/null
	then
		identifier=$(awk "$identifier_pattern" $file_piece)
		if fgrep -q $identifier $base_file 2>/dev/null
		then
			# have to put this in a temp var for some reason ... can't seem to
			# make it not interpolate any @ signs in identifier otherwise
			perl -i -lne '$t=q{'$identifier'}; print unless /$t$/' $base_file
		fi
		cat $file_piece >>$base_file
	fi
}


# find the profie directory for Mozilla
# Phoenix/Firebird/Firefox/whatever the hell it is this week
function find_mozilla_profile_dir
{
	# first see if we can find the base directory for profiles
	basedir=$(find_dir ~/.mozilla/firefox ~/.phoenix/default /export/projdata/data/Mozilla/$USER)

	if [[ -n $basedir ]]
	then
		# now find the "salt" directory underneath that
		# WTF use is this thing anyway? just to screw up scripts?
		saltdir=$(find $basedir -name "*.slt" -type d | head -n1)
		# firefox 0.9 changes things (again)
		# and then something or other came along and changed it AGAIN!
		if [[ -z $saltdir ]]
		then
			saltdir=$(ls -1dt $(find $basedir -type d \( -name "default.*" -o -name "buddy.*" -o							\
					-name "*.default" -o -name "*.buddy" \)) | head -n1)
		fi
	fi

	# that should pretty much do it
	# if saltdir is undefined, we couldn't find it
	echo $saltdir
}


# find the root-like admin group
# on most systems, it's "wheel"
# but on Linux Mint, it's "sudo"
function set_admin
{
	for group in wheel sudo
	do
		if grep -q "^$group:" /etc/group
		then
			ADMIN=$group
			break
		fi
	done

	if [[ -z $ADMIN ]]
	then
		die "can't figure out the name of the ADMIN group on this machine"
	fi
}
