#! /usr/bin/perl

use strict;
use warnings;

use Getopt::Std;
use File::Basename;
use Cwd qw< getcwd >;

$| = 1;

sub run_command();


my $format = '%f:%l';

my $opt = {};
getopts("qlF:vcCPDh", $opt);
usage() if $opt->{h};

$format = '%l' if $opt->{q};
$format = $opt->{F} if $opt->{F};


my $orig_dir = getcwd();

my $command = shift;
if (@ARGV)
{
	run_command foreach (@ARGV);
}
else
{
	chomp $_, run_command while <STDIN>;
}


sub usage
{
	my $me = basename($0);
	print STDERR <<END;
usage: $me [-q|-l|-v|-c|-F FORMAT] [-CPDh] 'command to run on {}' [files ...]
    command is run on every provided filename
    in command, {} is replaced by "filename" (including double quotes)
    if no files are given, STDIN is treated as a list of filenames
    -q : do not precede output by filename (shortcut for -F %l)
    -l : print filenames which have output, but not output (not same as -F %f)
    -v : print only filenames which have *no* output
    -c : print count of output lines for each filename
    -F : print filename/output according to supplied FORMAT (default: $format)
    -C : for each filename, chdir to `dirname filename` before running command
    -P : treat command as Perl code, not a shell command
            in this case, evaluation of code is output
            value is split into lines
            no output if evaluation is false
    -D : debugging (print commands to be run to STDERR)
    -h : this help message
  in FORMATs:
    %f : filename
    %l : output line
    %% : literal %
END

	exit;
}


sub run_command ()
{
	my $file = $_;
	$file =~ s/"/\\"/g;

	my $cfile = $file;
	if ($opt->{C})
	{
		my $dir;
		($cfile, $dir) = fileparse($file);
		chdir $dir;
	}
	$cfile =~ s/([ *?[<>|&;\$'"`({!#\\])/\\$1/g;

	my $run_file = $command;
	$run_file =~ s/\\\{\}/\cC\0/g;
	$run_file =~ s/\{\}/$cfile/g;
	$run_file =~ s/\cC\0/{}/g;
	print STDERR "$run_file\n" if $opt->{D};

	my $count = 0;
	if ($opt->{P})
	{
		local $@;
		my $out = eval $run_file;
		die("syntax error: $@") if $@;

		if ($out)
		{
			foreach ( split("\n", $out) )
			{
				++$count;
				last if $opt->{v};

				if ($opt->{l})
				{
					print "$file\n";
					last;
				}

				print_output($file, $_) unless $opt->{c};
			}
		}
	}
	else
	{
		open(PIPE, "$run_file |") or die("can't open pipe");
		while ( <PIPE> )
		{
			++$count;
			last if $opt->{v};

			if ($opt->{l})
			{
				print "$file\n";
				last;
			}

			print_output($file, $_) unless $opt->{c};
		}
		close(PIPE);
	}
	print "$file\n" if $opt->{v} and !$count;
	print "$file:$count\n" if $opt->{c} and $count;

	chdir $orig_dir if $opt->{C};
}


sub print_output
{
	my ($filename, $output) = @_;
	chomp $output;

	my $line = $format;
	$line =~ s/%f/$filename/g;
	$line =~ s/%l/$output/g;
	$line =~ s/%%/%/g;

	print "$line\n";
}


=head1 EXAMPLES

	xdotool search -name "Kid3" | each 'xwininfo -id {} | fgrep "Map State"'

	find /usr/local/sbin/ -xtype l | each -l 'ls -l {} | grep /root/common' | each 'rm {}'

=cut
