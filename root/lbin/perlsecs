#! /usr/bin/env perl

use strict;
use warnings;

use Getopt::Std;
use Date::Parse;
use File::Basename;
use Time::ParseDate;


my $opts = {};
getopts('gqlr:h', $opts);
my $quiet = defined $opts->{q};
my $gmtime = defined $opts->{g};
my $me = basename($0);
print <<USAGE and exit if $opts->{h};
usage: $me [-h] [-g | -q] { <date> | [-l] -r <file> }
	-h: this help message
	-g: print verification as GMT (default: local time)
	-q: quiet (including no verification)
	-r: treat arg as reference <file> instead of date
	-l: treat -r arg as a symlink
	<date> : date-as-string, arbitrary format, can be multiple args
	<file> : filename to pull date from (modification time)
USAGE


foreach (@ARGV)
{
	s{(?:^| )(\d+)[.:/-](\d+)$}{$1:$2};
	s{(?:^| )(\d+)([.:/-])(\d+)(?:\2(\d+))?([ap])m?}{"$1:$3:". ($4 // '00') . "$5m"}e;
	s{(?:^| )(\d+)([ap])m?}{$1:00$2m};
	s{^y$}{yesterday};
}

my $perlsecs = @ARGV ? parsedate("@ARGV") : time();
$perlsecs = str2time("@ARGV") unless $perlsecs;

if (defined $opts->{r})
{
	my $file = $opts->{r};
	die("$me: reference file [$file] is not readable\n") unless -r $file;
	$perlsecs = $opts->{l} ? (lstat $file)[9] : (stat _)[9];
}

if ($perlsecs)
{
	if ($quiet)
	{
		print "$perlsecs\n";
	}
	else
	{
		print "number is: $perlsecs\n";
		print "(your original date was ", scalar($gmtime ? gmtime $perlsecs : localtime $perlsecs), ")\n";
	}
}
else
{
	print STDERR "unknown date: @ARGV\n" unless $quiet;
	exit 2
}
