#! /bin/bash


SERVICE_CHECKS_EVERY=30								# seconds


readonly ME=${0##*/}
function USAGE
{
    cat <<EOM

usage: $ME [--manager] [--eth0] [--kernel-mod]

    --manager       : bounce Network Manager
    --eth0          : bounce eth0 interface (or equivalent)
    --driver        : bounce network card driver (kernel module)
    --help          : this help message

				things are bounced in the order shown above
				default: --manager --eth0 --driver
EOM
}

manager=false
eth0=false
driver=false
as_service=false

while [ $# -gt 0 ]
do
	case $1 in
		--manager)		manager=true
						shift
						;;
		--eth0)			eth0=true
						shift
						;;
		--driver)		driver=true
						shift
						;;
		--as-service)	as_service=true
						shift
						;;
		--help|-h|-\?)  USAGE
						exit
						;;
		*)				usage_error "Unrecognized option: $1"
						;;
	esac
done

if ! $manager && ! $eth0 && ! $driver
then
	# no individual ones are set, so do them all
	manager=true
	eth0=true
	driver=true
fi


# determine the wired interface
# it used to always be eth0, but nowadays, not so much
function eth0
{
	for interface in $(ifconfig -s -a | awk 'NR > 1 {print $1}')
	do
		if ethtool $interface 2>/dev/null | grep -q "Supported ports"
		then
			echo $interface
			break
		fi
	done
}


# figure out whether we're going to connect or not
function network-up
{
	ping -c 1 google.com > /dev/null 2>&1
}

# check for being up; exit cleanly if we are
function exit-if-network-up
{
	if network-up
	then
		if $as_service
		then
			[[ ${1:-} ]] && logger -t $ME "$1"
		else
			echo " and we're up"
		fi
		exit 0
	fi
}

# progress message, but only if not running as a service
function progress-msg
{
	! $as_service && echo -ne "$@"
}


if $as_service && network-up
then
	sleep $SERVICE_CHECKS_EVERY
	exec $ME --as-service
fi

if $manager
then
	# this usually fixes it
	if [[ $(ps -o comm= -p1) == "systemd" ]]
	then
		systemctl restart NetworkManager
	else
		# older version of Linux Mint
		service network-manager restart
	fi

	progress-msg "waiting for reconnect "
	for n in $(seq 1 20)
	do
		progress-msg "."
		sleep 1
		exit-if-network-up "restarted network manager"
	done
	progress-msg " tired of waiting\n"
fi

if $eth0
then
	# this is a bit more intrusive,
	# but fixes some things the above doesn't
	progress-msg "\ngoing deeper "
	ip link set $(eth0) down
	ip link set $(eth0) up

	for n in $(seq 1 20)
	do
		progress-msg "."
		sleep 1
		exit-if-network-up "bounced ethernet link"
	done
	progress-msg " tired of waiting\n"
fi

if $driver
then
	# go extreme
	progress-msg "going medieval on its ass\n"
	basemod=$(lsmod | awk '{print $1}' | grep 'iwl.vm')
	rmmod $basemod
	rmmod iwlwifi
	modprobe $basemod iwlwifi
	lsmod | grep iwlwifi

	exit-if-network-up "reloaded network kernel mod"
fi

if $as_service
then
	logger -t $ME "failed to restart network"
else
	echo "out of tricks"
fi
exit 1
