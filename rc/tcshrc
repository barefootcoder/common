if ( $?tcsh_reset ) then
	# make sure fortune index gets updated, symlinks are updated, etc
	cd ~/common
	./makeln refresh
	cd -
	source ~/bin/tcshrc-DEBUG "ran makeln"
endif

# figure out where we are
setenv LOCALHOSTNAME `~/common/root/lbin/localhostname`

# internal shell stuff
bindkey -v
set autoexpand=onlyhistory
set histdup=erase
set autolist=ambiguous
unset autologout
unset autocorrect
unset correct
unset complete
set echo_style=both
set notify
set symlinks=ignore
set ellipsis
set prompt="[${LOCALHOSTNAME}:%{\e[96m%}%.04%{\e[0m%}] "
source ~/bin/tcshrc-DEBUG "set shell stuff"

if ( $?PERL5OPT ) then
	echo $PERL5OPT | grep -q Carp::Always
	if ( $? == 0 ) then
		set prompt="[Carp::Always debugging] "
		alias carpalways 'unsetenv PERL5OPT ; resrc'
	else
		unalias carpalways
	endif
else
	alias carpalways 'setenv PERL5OPT -MCarp::Always ; resrc'
endif

if ( $?METHOD_SIGNATURES_DEBUG ) then
	set prompt="[Method::Signatures debugging] "
	alias msdebug 'unsetenv METHOD_SIGNATURES_DEBUG ; resrc'
else
	alias msdebug 'setenv METHOD_SIGNATURES_DEBUG 1 ; resrc'
endif
source ~/bin/tcshrc-DEBUG "set Perl stuff"

set WHOAMI=`/usr/bin/whoami`
if ( ${WHOAMI} == "root" ) then
	set prompt="[RT][${LOCALHOSTNAME}:%/] "
endif

# choose which database will be the primary one
setenv RDBMS mysql

# Sybase stuff
if ( -d /opt/sybase ) then
	setenv SYBASE /opt/sybase
	setenv LANG C
	if ( -r /usr/local/dbutils/syrc.csh ) then
		source /usr/local/dbutils/syrc.csh
	endif
	set sybase_bin=$SYBASE/bin
else
	set sybase_bin
endif

# Oracle stuff
if ( -e ~/.oraenv ) then
	source ~/.oraenv
	set oracle_bin=$ORACLE_HOME/bin
	setenv SQLPATH ~/common/oracle

	eval `~/bin/addpath -eb LD_LIBRARY_PATH $ORACLE_HOME/lib /lib /usr/lib`
else
	set oracle_bin
endif

# web server stuff
if ( -e ~/apache-1.3 ) then
	setenv APACHE "$HOME/proj/Sphorb"
	setenv APACHE_LOG "$HOME/apache-1.3/logs"
else
	if ( $LOCALHOSTNAME == triton ) then
		setenv APACHE "/home/hosts/barefoot.net"
		setenv APACHE_LOG "$APACHE/logs"
	else
		setenv APACHE "/home/httpd"
		setenv APACHE_LOG "/var/log/httpd"
	endif
endif
source ~/bin/tcshrc-DEBUG "finished DB/server stuff"

set path_dirs = ( /usr/local/bin /bin /usr/bin /usr/X11R6/bin $sybase_bin $oracle_bin /usr/sbin /usr/local/sbin /usr/local/dbutils /usr/local/t3/bin /usr/local/thinkgeek /usr/local/bin/proj /usr/games ~/bin ~/local/bin ~/rpg/bin /sbin ~/.rakudobrew/bin /cygdrive/c/WINDOWS/system32 /cygdrive/c/Perl/site/bin . )
set cdpath_dirs = ( . $APACHE ~ /export/usr/buddy )
if ( -x ~/bin/addpath ) then
	eval `~/bin/addpath -eB $path_dirs`
	set cdpath = ( `~/bin/addpath -sB $cdpath_dirs` )
	if ( -d $HOME/man ) then
		eval `~/bin/addpath -eb MANPATH $HOME/man`
		echo "MANPATH is $MANPATH"
		[ -z "$MANPATH" ] && unsetenv MANPATH
	endif
else
	set path=($path_dirs)
	set cdpath=($cdpath_dirs)
endif
source ~/bin/tcshrc-DEBUG "finished path/cdpath fiddling"

setenv PAGER "less -RaF -x4 -j4"
setenv EDITOR `which fe_vi`
eval `~/bin/addpath -efb PERL5LIB ~/common/perl`						# has to override other dirs (cf perl-privatize)
eval `~/bin/addpath -eb PERL5LIB /usr/barefoot/perl`
setenv DATE_MANIP DM5
setenv BC_ENV_ARGS ~/.bcrc
setenv PGLIB /usr/local/pgsql/lib
setenv PGDATA /usr/local/pgsql/data
setenv LPDEST hp4000
setenv PRINTER hp4000
setenv T3_WORKGROUP Barefoot
setenv T3_USER buddy
setenv CDA_EXCLUDE /usr/src/kernels:/export/arc/laptop/hold

alias pd pushd
alias cda 'cd "`$HOME/bin/cda \!*`"'
alias ls ls -CFL
alias ll ls -lh
alias lll /bin/ls -lhF
alias lln 'ls -lhtr \!* | tail'
alias lls 'ls -lhSr'
alias lastf '/bin/ls -1 | tail -n1'
alias ltail 'tail `lastf`'
alias rm rm -v
alias cp cp -piv
alias mv mv -iv
alias scp scp -pC
alias ps 'ps -wwwo user,group,pid,ppid,pgid,stime,tty8,stat,time,cmd'
alias time '/usr/bin/time -f "\nWallclock: %e (%UU, %SS)"'
alias psg '/usr/bin/pgrep -f \!* >/dev/null && ps -p `/usr/bin/pgrep -f \!*`'
alias dfk df -h .
alias dfa 'df -h | head -n1 ; df -h | awk '\''$1 ~ "[/_]"'\'
	set mfawk='{ mem = $2 / 1024; t = "Mb"; if (mem > 1024) { mem = mem / 1024; t = "Gb" } }'
	set mfawk="$mfawk"' $1 == "MemFree:" { printf "%7.2f %s main\n", mem, t }'
	set mfawk="$mfawk"' $1 == "SwapFree:" { printf "%7.2f %s swap\n", mem, t }'
alias mf "cat /proc/meminfo | awk '$mfawk'"
alias du. 'du -chs "`ls -1 | grep /`"'
alias dus "du -sh * | sortk | tail"
alias dux "du -xchH --max-depth=1 \!* | grep -v '^0	' | sortk"
alias cal ~/bin/cal
	# yes, those 3 *'s in a row are correct (even tho i have no idea why)
alias ff 'bash -c "find . -name /proc -prune -o -iname '"'"'*\!***'"'"' -print 2>/dev/null"'
alias ffd 'bash -c "find . -name /proc -prune -o -type d -iname '"'"'*\!***'"'"' -print 2>/dev/null"'
alias vi "fe_vi"
alias vims "vimS"
alias list "vi -v +'map   '"
alias less "less -a -x4"
alias dlocate "locate -be \!^ | each -l '[ -d {} ] && echo x'"
alias xlocate "locate -be \!^ | each -l '[ -f {} -a -x {} ] && echo x'"
alias xpath "perl -le 'print foreach split(q/:/, @ENV{qw<PATH>})' | each -q 'ls {}/*\!{^}* 2>/dev/null'"
alias ed "vim -u ~/.edrc"
alias wvi "vim -u ~/.viwebrc"
alias vimhelp "vim -s ~/.vim-help"
alias deparse "perl -MO=Deparse,-p \!*"
alias perlfunc "perldoc -f"
alias pdoc perldoc
alias pdocre "perldoc perlre"						# if `pdoc re` worked, I wouldn't need this ...
alias pfunc perlfunc
alias pfind perlfind
alias unison "unison -ui text"
setenv CURRENT_SCREEN base
alias sr 'screen -A -x $CURRENT_SCREEN'
alias dev 'umask 2 ; newgrp \!^ dev'
alias pgrep 'grep -P \!*'
if ( $?APACHE_LOG ) then
	alias weberr "tail $APACHE_LOG/error_log"
endif
alias timer "cd ~/timer ; vi -u ~/.vim-timer timer-new"
alias lctime "history | tail -n2 | head -n1 | awk '{print "'$2'"}'"
alias ferry "vi ~/Dropbox/ferry"
alias updreq "perl -e 'print time' > \!^/update-request"
alias xff "xrestore -browsers"

set bundle_file=~/proj/dist-zilla-pluginbundle-barefoot/lib/Dist/Zilla/PluginBundle/BAREFOOT.pm
set filter='/exclude_generated_files\s*=\s*qw<(.*?)>/ && print $1'
alias dzclean 'rm -f `'"perl -lne '$filter' $bundle_file"'`; dzil clean'
alias dzbuild 'dzclean ; dzil build'
alias dzrel 'dzclean ; dzil release'
alias dzpod 'dzbuild ; perldoc *[0-9].[0-9]*/\!^ ; dzclean'
alias dzinst 'dzbuild ; cpanm -n *[0-9].[0-9]*.tar.gz ; dzclean'
alias pbinst 'perlbrew install -n -j 5 --noman'
alias cpi 'cpanm -n \!*'

alias resrc "set tcsh_reset ; source ~/.tcshrc"
set sys_complete=/etc/profile.d/tcsh-complete
if ( $?tcsh_reset && -e $sys_complete ) then
	source $sys_complete
endif

alias pack 'tar --same-owner -cvzpf \!^.tgz \!^'
alias unpack 'tar --same-owner -xvzpf'

# repos where we want aliases for everything in their bin/
foreach repo (pjawk)
	set bindir=~/proj/$repo/bin
	if ( -d ~/proj/$repo/bin ) then
		foreach prog ($bindir/*)
			set progname=`basename $prog`
			set existing_alias=:`alias $progname`
			if ( $existing_alias == :$prog ) then
				# alias already set correctly; nothing to do
			else if ( $existing_alias == : ) then
				# no alias; create one
				# note that if you use `basename $prog` directly, instead of going through
				# the $progname var, you'd have to use `eval` here ... not sure why
				alias $progname $prog
			else
				# have an alias, but not the one we expect
				echo "already have an alias for $progname; can't set"
			endif
		end
	endif
end
source ~/bin/tcshrc-DEBUG "set vars and aliases"

# this should be a list of the hosts that we typically keep sync'ed up
# with this one.  we'll use it for two things:
# 1) alias the hostname so it ssh'es into it
# 2) as a complete list for the certain commands (psync, runon, steal-common, etc)
alias friendly-hosts '/bin/ls -1F ~/common/local/ | grep /\$ | perl -lpe chop'
foreach fhost (`friendly-hosts`)
	alias $fhost ssh $fhost
end

# programmed completions
complete cd 'p/1/d/' 'p/*/x/'
complete rmdir 'p/1/d/' 'p/*/x/'
complete setenv 'p/1/e/'
complete unsetenv 'p/*/e/'
complete which 'p/*/c/'
complete inf 'p/*/c/'
complete man 'p/*/c/'
complete sudo 'p/1/c/' 'n/chown/u/'
complete tar 'n/*f/f:*{.tar,.tgz,.tbz,.tlz,[._-]tar.*}/'
complete unison 'C@*@`/bin/ls -1 ~/.unison/*.prf | each -q "basename {} .prf"`@' 'n/-path/d/'

alias installed-packages 'dep -g "[a-z]" | perl -lne '"'"'m{[^/]+/([^/]+?)(-\d.*)} and print $1'"'"
complete dep 'C?[^-]*?`installed-packages`?'
complete equery 'p/1/(belongs changes check depends depgraph files glsa hasuse list size stats uses which)/'			\
		'C?[^-]*?`installed-packages`?'
complete ewhich 'C?[^-]*?`installed-packages`?'
complete edep 'C?[^-]*?`installed-packages`?'
complete pkprog 'C?[^-]*?`installed-packages`?'

complete timer 'n/-*u/u/' 'N/-*u/x/' 'C?[^-]*?`timer -@t`?'
complete cdp 'n/-u/u/'
complete svn 'p/1/(add checkout cleanup commit remove diff help log mkdir propdel propedit propget proplist propset		\
		revert resolved status update)/'
complete psync 'C?[^-]*?`friendly-hosts`?'
complete runon 'p/1/`friendly-hosts`/'
complete steal-common 'p/1/`friendly-hosts`/'
complete vims 'C?[^-]*?`vimS -l`?'
complete vimS 'C?[^-]*?`vimS -l`?'										# should be same as line above

# many gentoo systems try to be all clever with a huge list of preprogrammed completions for most common commands
# but for cp/mv/ln, for instance, they define the 2nd arg as having to be a directory
# that makes trying to use one of these to overwrite a file using completion impossible
# that's annoying
# so get rid of it
uncomplete mv
uncomplete cp
uncomplete ln
source ~/bin/tcshrc-DEBUG "finished completions"

# perlbrew setup
if ( -e ~/perl5/perlbrew/etc/cshrc ) then
	setenv PERLBREW_PERL perl-5.14.2
	source ~/perl5/perlbrew/etc/cshrc
endif

setenv PINTO_HOME /home/buddy/opt/local/pinto
if ( -d $PINTO_HOME ) then
	alias pinto $PINTO_HOME/bin/pinto
endif
source ~/bin/tcshrc-DEBUG "finished perlbrew et al"

if ( $?tcsh_reset ) then
	# this will start dropbox if not started, and not do anything if it is
	if ( -d ~/.dropbox-dist ) then
		$HOME/bin/dropbox start
	endif

	# refresh or create ssh-agent vars
	eval `ssh-agent-env`
endif

# allow local overrides to shared .tcshrc
if ( -e ~/.tcshrc.local ) then
	source ~/.tcshrc.local
endif
source ~/bin/tcshrc-DEBUG "back from .tcshrc.local"

if ( -e /usr/local/etc/VCtools/vctools.cshrc ) then
	# debugging
	#alias vctools-config ~/proj/VCtools/vctools-config
	#source ~/proj/VCtools/etc/vctools.cshrc

	# production
	#source /usr/local/etc/VCtools/vctools.cshrc
endif
source ~/.vctoolsrc
	set pbtest_path=~/proj/Pb.testing/bin:$PATH
	set pbtest_lib=$HOME/proj/Pb.testing/lib:$HOME/proj/perlx-bash/lib:$PERL5LIB
	set pbtest_setup="unalias vc ; setenv PATH $pbtest_path ; setenv PERL5LIB $pbtest_lib"
	complete pbtest "p/1/(`vc info --oneline project:all`)/"
alias pbtest "vcd \!^ ; set prompt='[Pb.testing: \!^] ' ; $pbtest_setup"
source ~/bin/tcshrc-DEBUG "finished VCtools"

# Heroscapers stuff
alias hsreply 'vimS hsreply'

# make sure our subshells don't count as resets
unset tcsh_reset
source ~/bin/tcshrc-DEBUG "exiting .tcshrc"
