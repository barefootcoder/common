set showmode					" want to see insert / replace mode
set nobackup					" stop leaving annoying tilde droppings all over the place
set autoindent					" handy for programming
set tabstop=4					" standard for Barefoot files
set shiftwidth=4				" needs to match tabstop
set undolevels=1000				" go with default undolevels
set linebreak					" makes long lines easier to read without inserting newlines
set noexpandtab					" yes, I like real tabs in my files; so sue me

" keyword lookups
set iskeyword=@,_,48-57			" default definition of word (as opposed to WORD)
" allow word to expand to include sigils and namespace separators when doing keyword lookup
nnoremap K :set iskeyword=@,48-57,_,$,@-@,%,:<CR>K:set iskeyword=@,_,48-57<CR>
" assume keyword lookup means Perl
set keywordprg=perlref

" class stuff
map <C-C><C-H> :!clgrep -a %<CR>|										" show attributes ("has")
map <C-C><C-I> :!clgrep -i %<CR>|										" show inheritance ("extends" and "with")
map <C-C><C-M> :!clgrep -m %<CR>|										" show method ("method" and "sub")
map <C-C><C-K> :!clgrep -mn <C-R><C-W> %<CR>|							" find definition of method under cursor
map <C-C><C-N> :!grep -Pe '^\s*\#\s*[A-Z\s]+$' %<CR>|					" find "sections" (all-caps comments)

" jump to next section
map ]s /^[ <Tab>]*#[ <Tab>]\+[A-Z ]\+[ <Tab>]*#\?$<CR>
" jump to previous section
map [s m`/^[ <Tab>]*#[ <Tab>]\+[A-Z ]\+[ <Tab>]*#\?$<CR>``N

" make Y same as y$ (matches other operators)
nmap Y y$
" make g same as G (g not used in original vi, so this mapping is ancient)
map g G
" but remove unused gx mapping, because it causes a delay when you hit g
let loaded_netrwPlugin = 1
" make [[ et al work for Perl-style curly brace placement (according to vim help)
" this doesn't really work worth a crap
"map [[ ?{<CR>w99[{
"map ][ /}<CR>b99]}
"map ]] j0[[%/{<CR>
"map [] k$][%?}<CR>
" turn "add" into "plus" (because ^A conflicts with screen, and ^P is the same as k)
map <C-P> <C-A>
" easy comment
map q :s/^/\/\* /<CR>:s/$/ \*\//<CR>
" easy uncomment
map Q :s/^\/\* //<CR>:s/ \*\/$//<CR>
" remove any ^R remap
"try | unmap <C-R> | catch /E31/ | endtry
" show buffers
map <C-Y> :files<CR>
" get rid of annoying trailing spaces
map <C-Z> :%s/[ 	]\+$//<CR>
" convert all tabs to spaces ... BE VERY CAREFUL WITH THIS ONE!
map <C-Z><C-Z> :up<CR>:!vcpatchws -f %<CR>:e!<CR>
" convert tabs to spaces on the current line only
map <Esc>z<Esc>z !!expand -t4<CR>
" convert tabs to spaces for the current paragraph
map <Esc>z} !}expand -t4<CR>}

" search for the word under the cursor
nmap <C-_> *|																				" Ctrl-/
" search for the word under the cursor, but restrict to last visual region
nmap <Esc><C-_> /\%V\<<C-R><C-W>\><CR>|														" Ctrl-Alt-/
" start search from top of file
nmap <C-N> 1Gn
" stop the hideously annoying shift+backspace problem
map!  
" push to testing
nmap <C-W> :up<CR>:!pusht %<CR>
" compile check
nmap <C-C> :up<CR>:!ccheck %<CR>
" VC blame + jump to current line
nmap <Esc>b :exe "!git blame % <Bar> less +" . line(".") . "G"<CR>|							" Alt-B
" show doco
nmap <Esc>d :up<CR>:!perldoc %<CR>|															" Alt-D
" swap artist/title in a mix file
map QQ !!perl -lpe 's/^([<>FXV=:~*? -]{4})?(.*?) - (.*?)(\s+[[{].*?[]}])?$/$1$3 - $2$4/'<CR>

:function! FindMatching()
:	if getline(".") =~ '^=cut\>'
:		normal! ``
:	elseif getline(".") =~ '^='
:		call search("^=cut", "s")
:	else
:		normal! %
:	endif
:endfunction
nmap % :call FindMatching()<CR>

" allow locking of vi
map LockZZ :let choice = confirm("Are you sure you want to exit?", "&Yes\n&No", 2)<CR>:if choice == 1<CR>:x<CR>:endif<CR><CR>
map Lock :map ZZ LockZZ<CR>:echo "Locked"<CR>

set formatoptions=croqv													" only autoformat comments
set textwidth=0															" set this on a file-by-file basis
" comment markers (only works for Perl and piqt, sort of for Mason, and a little for bulleted lists)
set comments=b:#,b://,b:--\!\ print,b:--,fb:*
" reformat current comment block (using Alt-R)
nnoremap <Esc>r ^gq/^$\<Bar>^<Tab>*#$\<Bar>^<Tab>*[^<Tab>#]\<Bar>^--! print$<CR>|			" Alt-R
nnoremap <Esc>r<Esc>r gqgq|																	" Alt-R Alt-R
nnoremap <Esc>r} gq}|																		" Alt-R }
" twiddle line numbers in Perl to correct stupid Devel::Declare modules
nnoremap <Esc>i<Esc>l m`O<Esc>i# line 0<Esc>:1,$! reset_lines<CR>:up<CR>``|					" Alt-I Alt-L
nnoremap <Esc>r<Esc>l m`:1,$! reset_lines<CR>``|											" Alt-R Alt-L
nnoremap <Esc>c<Esc>l :%g/^# line/d<CR>:up<CR>|												" Alt-C Alt-L
" use my tfmt program for reformatting non-comment stuff
set equalprg=tfmt\ -t4\ -w100

"syntax off
set nohlsearch
set noincsearch
set nocindent
filetype off
filetype indent off

" useful in Changes files
map <C-C><C-D> 0Wy0!!date +\%Y-\%m-\%dT\%H:\%M:\%S\%z<CR>0P

" to make sessions work properly
set sessionoptions=buffers,curdir,globals,localoptions,options,unix

" check for differences in session
:function! SessionDiffs()
:	if v:this_session == ''
:		echo "No current session"
:	else
:		let sessfile = v:this_session
:		mksession
:		exe "!diff " . sessfile . " Session.vim"
:		!rm Session.vim
:		let v:this_session = sessfile
:	endif
:endfunction
:command! SD call SessionDiffs()

" save session with the current name
:function! SaveSession()
:	if v:this_session == ''
:		echo "No current session"
:	else
:		exe "mksession! " . v:this_session
:		if exists("g:MarksFile")
:			call SaveMarks()
:		endif
:	endif
:endfunction
:command! SaveSession call SaveSession()
:autocmd VimLeave * call SaveSession()

" save marks along with session
:function! SaveMarks()
:	if v:this_session == ''
:		echo "Can't save marks without session"
:	else
:		let g:MarksFile = v:this_session . ".marks"
:		exe "wviminfo! " . g:MarksFile
:	endif
:endfunction
:command! SM call SaveMarks()

" reload marks (if the file exists)
:function! LoadSessionAuxFiles()
:	if exists("g:MarksFile")
:		exe "rviminfo! " . g:MarksFile
:	endif
:	if exists("g:FuncsFile")
:		exe "source " . g:FuncsFile
:	endif
:endfunction

let loaded_matchparen = 1

" restore last known position when opening a new file
" (this used to happen automatically, but something I did turned it off)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" grep all buffers
:function! GrepBuffs()
:	let g:grepregex=input("Regex to search for:")
":	bufdo silent !echo % >>/tmp/vims.grepbuffs
":	execute "!grep -Pe \"" . g:grepregex . "\" `cat /tmp/vims.grepbuffs`"
":	!rm -f /tmp/vims.grepbuffs
:	let buffs = []
:	let bufnums = range(1, bufnr('$'))
:	for b in bufnums
:		if buflisted(b)
:			call add(buffs, bufname(b))
:		endif
:	endfor
:	execute "vimgrep /" . g:grepregex . "/ " . join(buffs, ' ')
:endfunction
:map <Esc>/ :call GrepBuffs()<CR>|															" Alt-/
:map <Esc>Oc :cn<CR>|																		" Ctrl-Right
:map <Esc>Od :cp<CR>|																		" Ctrl-Left
